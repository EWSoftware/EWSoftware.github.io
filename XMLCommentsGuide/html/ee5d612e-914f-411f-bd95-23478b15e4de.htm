<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Member ID Strings</title><meta name="Help.Id" content="ee5d612e-914f-411f-bd95-23478b15e4de" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="ee5d612e-914f-411f-bd95-23478b15e4de" /><meta name="Description" content="All cref attributes on documentation elements such as see or exception generate an ID string in the XML comments file. Normally, the ID string can be properly generated by the compiler based on a partial or fully qualified type or member name." /><meta name="tocFile" content="../toc/RootTOC.xml" /><link type="text/css" rel="stylesheet" href="../css/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/EWSoftware/SHFB"><img alt="Sandcastle XML Comments Guide" style="height: 50px;" src="../icons/Sandcastle.jpg" /></a></div><div id="DocumentationTitle" class="level-item">Sandcastle XML Comments Guide</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="HeaderTextContainer" class="level-left"><div class="level-item"><span class="has-text-grey-light">SHFB Default 2022 Style - Coming Soon</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Member ID Strings</h1><div><p>All <span class="code">cref</span> attributes on documentation elements such as <span class="code">see</span>
or <span class="code">exception</span> generate an ID string in the XML comments file.  Normally, the ID string
can be properly generated by the compiler based on a partial or fully qualified type or member name.  However,
there are occasions where this will not work properly.  A common example is in C++ code where the compiler is not
always able to generate IDs for forward referenced members.  In such cases, an ID string can be used as a
reference explicitly instead of letting the compiler figure it out.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>Author Credit: Most of the information in this topic was originally written by Microsoft as part
of the .NET Documentation Guidelines document.</p></div></article></div><div id="IDBABSection" class="noTitle"><p>The format of the ID string is shown below.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">type:fullname[(arglist)]`genericcount</pre></div></div><p><span class="code">type</span> is one of the following.  The final three are specific to the
Sandcastle Help File Builder and Tools and are never generated by the compiler.</p><table class="table is-hoverable"><thead><tr><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tr><td><p>!</p></td><td><p>Used by the compiler to indicate an error such as being unable to resolve the member ID</p></td></tr><tr><td><p>N</p></td><td><p>Namespace</p></td></tr><tr><td><p>T</p></td><td><p>Type (class, interface, structure, enumeration, etc.)</p></td></tr><tr><td><p>F</p></td><td><p>Field</p></td></tr><tr><td><p>E</p></td><td><p>Event</p></td></tr><tr><td><p>P</p></td><td><p>Property</p></td></tr><tr><td><p>M</p></td><td><p>Method</p></td></tr><tr><td><p>R</p></td><td><p>Sandcastle generated.  Represents the root namespace page.  There will always be a single
entry named R:Project_[HtmlHelpName] where "[HtmlHelpName]" is the value of your project's HTML Help Name
property with spaces replaced by underscores.  This suffix is required to keep the root namespace container page
ID unique across all help files so that there are no duplicate IDs when generating MS Help Viewer output.</p></td></tr><tr><td><p>G</p></td><td><p>Sandcastle specific.  Represents a root namespace group page.  These will appear if a
presentation style supports namespace grouping and the option is enabled in the project.  In such cases,
namespaces with a common root will be grouped under a list topic.</p></td></tr><tr><td><p>O</p></td><td><p>Sandcastle specific.  Used to generate a link to the Overloads List page for an overloaded
member.</p></td></tr></table><p><span class="code">fullname</span> is the full name of the member from the root.  Thus referencing
<span class="code">StringBuilder</span> would be <span class="code">System.Text.StringBuilder</span>.  The full
name will include any member references as well so referencing the <span class="code">Append</span> method of
<span class="code">StringBuilder</span> would be <span class="code">System.Text.StringBuilder.Append</span>.</p><p>For properties that accept parameters and methods with parameters, the argument list is next.  The
argument list contains the parentheses as well.  Each argument is specified as the full name of the associated
type.  For reference types, the type name is followed by an at (@) sign.  For array types, the type name is
followed by brackets ([]).  Other symbols are possible but they are not supported by Visual Basic or C#.</p><p>For generic classes, the type is followed by a back tick (`) and the number of generic type
parameters.  For generic methods, there is one back tick (`) and a number for each generic parameter.  Additional
generic parameters are separated by a comma.  Each number is the zero-based index within the parameter list of
the parameter.</p><p>There are no spaces allowed in the ID string.  If a name contains a dot (except to separate
namespaces from types, types from other types, and types from members) then the pound (#) sign is used instead.
In general, such a member is not possible. However, for referencing special methods like a constructor or
explicitly implemented members, it is needed.  An example of an explicitly implemented member ID is:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">M:TestNamespace.TestClass.System#Collections#IEnumerable#GetEnumerator</pre></div></div><p>The constructor for a type is always of the following form.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">M:fullname.#ctor[(arglist)]</pre></div></div><p>The destructor for a class is always of the following form.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">M:fullname.Finalize</pre></div></div><p>Operators are encoded as the formal name of the operator followed by their arguments.  For
conversion operators, the formal name is used (<span class="code">op_Explicit</span> or
<span class="code">op_Implicit</span>) followed by the arguments, a tilde (~), and the return type.  For
example:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">M:fullname.op_[binaryOpname](arg1, arg1)
M:fullname.op_[unaryOpname](arg)
M:fullname.op_Explicit(arg1, arg2)~returnType
M:fullname.op_Implicit(arg1, arg2)~returnType</pre></div></div><p>Below are example IDs for each overloadable operator:</p><table class="table is-hoverable"><thead><tr><th><p>Operator</p></th><th><p>Usage</p></th><th><p>Member ID Example</p></th></tr></thead><tr><td><p>+</p></td><td><p>x = y + z</p></td><td><p>M:TestDoc.Type1.op_Addition(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>&amp;</p></td><td><p>x = y &amp; z</p></td><td><p>M:TestDoc.Type1.op_BitwiseAnd(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>|</p></td><td><p>x = y | z</p></td><td><p>M:TestDoc.Type1.op_BitwiseOr(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>--</p></td><td><p>x--</p></td><td><p>M:TestDoc.Type1.op_Decrement(TestDoc.Type1)</p></td></tr><tr><td><p>/</p></td><td><p>x = y / z</p></td><td><p>M:TestDoc.Type1.op_Division(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>==</p></td><td><p>if(x == y)</p></td><td><p>M:TestDoc.Type1.op_Equality(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>^</p></td><td><p>x = y ^ z</p></td><td><p>M:TestDoc.Type1.op_ExclusiveOr(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>explicit</p></td><td><p>string x = (string)test1Object</p></td><td><p>M:TestDoc.Type1.op_Explicit(System.String)~TestDoc.Type1</p></td></tr><tr><td><p>false</p></td><td><p>if(test1Object == false)</p></td><td><p>M:TestDoc.Type1.op_False(TestDoc.Type1)</p></td></tr><tr><td><p>&gt;</p></td><td><p>if(x &gt; y)</p></td><td><p>M:TestDoc.Type1.op_GreaterThan(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>&gt;=</p></td><td><p>if(x &gt;= y)</p></td><td><p>M:TestDoc.Type1.op_GreaterThanOrEqual(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>implicit</p></td><td><p>string x = test1Object</p></td><td><p>M:TestDoc.Type1.op_Implicit(TestDoc.Type1)~System.String</p></td></tr><tr><td><p>++</p></td><td><p>x++</p></td><td><p>M:TestDoc.Type1.op_Increment(TestDoc.Type1)</p></td></tr><tr><td><p>!=</p></td><td><p>if(x != y)</p></td><td><p>M:TestDoc.Type1.op_Inequality(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>&lt;&lt;</p></td><td><p>x = y &lt;&lt; 2</p></td><td><p>M:TestDoc.Type1.op_LeftShift(TestDoc.Type1,System.Int32)</p></td></tr><tr><td><p>&lt;</p></td><td><p>if(x &lt; y)</p></td><td><p>M:TestDoc.Type1.op_LessThan(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>&lt;=</p></td><td><p>if(x &lt;= y)</p></td><td><p>M:TestDoc.Type1.op_LessThanOrEqual(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>!</p></td><td><p>if(!x)</p></td><td><p>M:TestDoc.Type1.op_LogicalNot(TestDoc.Type1)</p></td></tr><tr><td><p>%</p></td><td><p>x = y % z</p></td><td><p>M:TestDoc.Type1.op_Modulus(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>*</p></td><td><p>x = y * z</p></td><td><p>M:TestDoc.Type1.op_Multiply(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>~</p></td><td><p>x = ~x</p></td><td><p>M:TestDoc.Type1.op_OnesComplement(TestDoc.Type1)</p></td></tr><tr><td><p>&gt;&gt;</p></td><td><p>x = y &gt;&gt; 2</p></td><td><p>M:TestDoc.Type1.op_RightShift(TestDoc.Type1,System.Int32)</p></td></tr><tr><td><p>-</p></td><td><p>x = y - z</p></td><td><p>M:TestDoc.Type1.op_Subtraction(TestDoc.Type1,TestDoc.Type1)</p></td></tr><tr><td><p>true</p></td><td><p>if(test1Object == true)</p></td><td><p>M:TestDoc.Type1.op_True(TestDoc.Type1)</p></td></tr><tr><td><p>- (unary)</p></td><td><p>x = -test1Object</p></td><td><p>M:TestDoc.Type1.op_UnaryNegation(TestDoc.Type1)</p></td></tr><tr><td><p>+ (unary)</p></td><td><p>int x = +test1Object</p></td><td><p>M:TestDoc.Type1.op_UnaryPlus(TestDoc.Type1)</p></td></tr></table></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="57C91630-95D6-4E3E-AF24-3415CC569AC8.htm">Walkthrough: Enabling and Using XML Comments</a></div><div><a href="515d5a54-5047-4d6f-bf51-d47c7c699cc2.htm">Usage Notes</a></div></div></div><div class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">[v2022.4.16.0] Sandcastle XML Comments Guide</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle%20XML%20Comments%20Guide">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="XMLCommentsGuide"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks()

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>
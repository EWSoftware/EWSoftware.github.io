<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>AttachedPropertyComments</title><meta name="Title" content="AttachedPropertyComments" /><meta name="Help.Id" content="c0346d23-f376-4948-8f9a-d17b2f1acef3" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="c0346d23-f376-4948-8f9a-d17b2f1acef3" /><meta name="Description" content="This element is used to define the content that should appear on the auto-generated attached property member topic for a given WPF dependency property member." /><meta name="tocFile" content="../toc/IDJ.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/EWSoftware/SHFB"><img alt="Sandcastle XML Comments Guide" style="height: 50px;" src="../icons/Sandcastle.jpg" /></a></div><div id="DocumentationTitle" class="level-item">Sandcastle XML Comments Guide</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>AttachedPropertyComments</h1><div><p>This element is used to define the content that should appear on the auto-generated attached property
member topic for a given WPF dependency property member.</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Syntax</h2><div id="IDBABSection"><p>This top-level element is valid on any dependency property member.  The member on which the element
appears should have its own set of member-specific XML comments as well.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-xml">&lt;AttachedPropertyComments&gt;
  &lt;summary&gt;
  Summary description
  &lt;/summary&gt;
  [&lt;remarks&gt;Optional remarks&lt;/remarks&gt;]
  [&lt;example&gt;Optional examples&lt;/example&gt;]
  [... other top-level comments elements as needed ...]
&lt;/AttachedPropertyComments&gt;</code></pre></div></div><p>Include any top-level XML comments elements as you would on a standard member.  These elements will
be formatted in an identical fashion and will appear in the auto-generated attached property member topic.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>This is a custom XML comments element implemented by the <a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">Sandcastle Help File Builder</a>.  It will not appear
in the list of valid elements for XML comments IntelliSense.</p></div></article></div><h2 id="Remarks" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Remarks</h2><div id="IDCABSection"><p>Because the attached property and attached event members of WPF classes are compiler-generated,
there is no way to associate XML comments with them directly without managing a standalone XML comments file.
While it is possible to do this, it is less convenient than keeping the comments in the code.  The help file
builder provides a solution to this through its <strong>GenerateInheritedDocs</strong> tool.  As part
of the process of generating inherited documentation, the tool will look for attached property and attached event
fields.  If it finds them, it will automatically inherit their comments for the related compiler-generated
members as default comments to prevent a "missing comments" warning.</p><p>In addition, if it finds comments for those field members, it will check for an
<span class="code">AttachedPropertyComments</span> element (for attached properties) or an
<span class="code">AttachedEventComments</span> element (for attached events) and, if found, will use the XML
comments nested within those elements for the related compiler-generated members.  This allows you to provide
comments for the field member and the related compiler-generated member that are entirely different but are
managed from within the code.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>Because the attached property and event members are compiler-generated, you must fully qualify
their names if you want to create a link to them with a <span class="code">see</span> element as shown in the
example below.</p></div></article></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Example</h2><div id="IDDABSection"><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">/// &lt;summary&gt;
/// This defines the
/// &lt;see cref="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected"/&gt;
/// attached property.
/// &lt;/summary&gt;
/// &lt;AttachedPropertyComments&gt;
/// &lt;summary&gt;This attached property indicates whether or not a tree view item is brought into
/// view when selected.
/// &lt;/summary&gt;
/// &lt;value&gt;The default value is false&lt;/value&gt;
/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt;
/// &lt;/AttachedPropertyComments&gt;
/// &lt;conceptualLink target="c0346d23-f376-4948-8f9a-d17b2f1acef3" /&gt;
public static readonly DependencyProperty IsBroughtIntoViewWhenSelectedProperty =
    DependencyProperty.RegisterAttached(
    "IsBroughtIntoViewWhenSelected",
    typeof(bool),
    typeof(AttachedEventsAndPropertiesTest),
    new UIPropertyMetadata(false, OnIsBroughtIntoViewWhenSelectedChanged));

/// &lt;summary&gt;
/// Get the property value
/// &lt;/summary&gt;
/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt;
/// &lt;returns&gt;The property value&lt;/returns&gt;
public static bool GetIsBroughtIntoViewWhenSelected(TreeViewItem treeViewItem)
{
    return (bool)treeViewItem.GetValue(IsBroughtIntoViewWhenSelectedProperty);
}

/// &lt;summary&gt;
/// Sets the property value
/// &lt;/summary&gt;
/// &lt;param name="treeViewItem"&gt;The tree view item&lt;/param&gt;
/// &lt;param name="value"&gt;The property value&lt;/param&gt;
public static void SetIsBroughtIntoViewWhenSelected(
  TreeViewItem treeViewItem, bool value)
{
    treeViewItem.SetValue(IsBroughtIntoViewWhenSelectedProperty, value);
}

/// &lt;summary&gt;
/// Connect or disconnect the event handler when the selected state changes
/// &lt;/summary&gt;
/// &lt;param name="depObj"&gt;The dependency object&lt;/param&gt;
/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;
static void OnIsBroughtIntoViewWhenSelectedChanged(
  DependencyObject depObj, DependencyPropertyChangedEventArgs e)
{
    TreeViewItem item = depObj as TreeViewItem;

    if(item == null)
        return;

    if(e.NewValue is bool == false)
        return;

    if((bool)e.NewValue)
        item.Selected += OnTreeViewItemSelected;
    else
        item.Selected -= OnTreeViewItemSelected;
}

/// &lt;summary&gt;
/// Bring the item into view
/// &lt;/summary&gt;
/// &lt;param name="sender"&gt;The sender of the event&lt;/param&gt;
/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;
static void OnTreeViewItemSelected(object sender, RoutedEventArgs e)
{
    // Only react to the Selected event raised by the TreeViewItem
    // whose IsSelected property was modified. Ignore all ancestors
    // who are merely reporting that a descendant's Selected fired.
    if(!Object.ReferenceEquals(sender, e.OriginalSource))
        return;

    TreeViewItem item = e.OriginalSource as TreeViewItem;

    if(item != null)
        item.BringIntoView();
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4 class="quickLinkHeader">Reference</h4><div><a href="ca2575b2-2ea9-27d4-8c28-8a52b8472762.htm">IsBroughtIntoViewWhenSelected</a></div><div><a href="b4603b26-6819-f433-915d-552cf3796fd6.htm">IsBroughtIntoViewWhenSelectedProperty</a></div><h4 class="quickLinkHeader">Other Resources</h4><div><a href="9341fdc8-1571-405c-8e61-6a6b9b601b46.htm">Miscellaneous Elements</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Syntax</a></li><li><a class="quickLink">Remarks</a></li><li><a class="quickLink">Example</a></li><li><a class="quickLink">See Also</a><ul class="menu"><li><a class="quickLink">Reference</a></li><li><a class="quickLink">Other Resources</a></li></ul></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">[v2022.4.16.0] Sandcastle XML Comments Guide</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle%20XML%20Comments%20Guide">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="XMLCommentsGuide"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XMLCommentsExamples</name>
  </assembly>
  <members>
    <member name="T:XMLCommentsExamples.GenericClass`2">
      <summary>
            This class is used to demonstrate the various XML comments elements
            related to generics.  It serves no useful purpose.
            </summary>
      <typeparam name="T1">This is the first generic argument.</typeparam>
      <typeparam name="T2">This is the second generic argument constrained to
            be or derive from <see cref="T:System.EventArgs" />.</typeparam>
    </member>
    <member name="M:XMLCommentsExamples.GenericClass`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XMLCommentsExamples.GenericClass`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XMLCommentsExamples.GenericClass`2.GenericMethod``2(``0)">
      <summary>
            This is a generic method that takes two other generic types
            </summary>
      <param name="argument">This is an argument of the type specified by
            the generic type argument <typeparamref name="T3" />.</param>
      <typeparam name="T3">This is a generic type argument for the method
            argument.</typeparam>
      <typeparam name="T4">This is a generic type argument for the return
            value.</typeparam>
      <returns>The default value of the type specified by the generic type
            argument <typeparamref name="T4" />.</returns>
    </member>
    <member name="M:XMLCommentsExamples.GenericClass`2.Method(`0)">
      <summary>
            This is a method with an argument.
            </summary>
      <param name="argument"> This is an argument of the type specified by
            the generic type argument <typeparamref name="T1" />.</param>
    </member>
    <member name="M:XMLCommentsExamples.GenericClass`2.OnSomethingHappened(`1)">
      <summary>
            This is a protected virtual method used to raise the
            <see cref="E:XMLCommentsExamples.GenericClass`2.SomethingHappened" /> event.
            </summary>
      <param name="e">Arguments for the event of the type specified by
            the generic type argument <typeparamref name="T2" />.</param>
    </member>
    <member name="P:XMLCommentsExamples.GenericClass`2.Property">
      <summary>
            This is a property that gets or sets an instance of the type specified
            by the generic type argument <typeparamref name="T1" />.
            </summary>
    </member>
    <member name="E:XMLCommentsExamples.GenericClass`2.SomethingHappened">
      <summary>
            This is an event that takes a generic argument.
            </summary>
      <remarks>The <see cref="T:System.Delegate">delegate</see> for this event is
            <see cref="T:System.EventHandler`1" /> bound to the type specified by the
            generic type argument <typeparamref name="T2" />.
            </remarks>
    </member>
    <member name="T:XMLCommentsExamples.RevisionHistoryClass">
      <summary>
            This class demonstrates the revision history
            </summary>
      <remarks>The revision history element can be used on the class and its
            members.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.RevisionHistoryClass.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XMLCommentsExamples.RevisionHistoryClass</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XMLCommentsExamples.RevisionHistoryClass.ExampleMethod">
      <summary>
            This method has revision history
            </summary>
    </member>
    <member name="P:XMLCommentsExamples.RevisionHistoryClass.Revision">
      <summary>
            This property has revision history
            </summary>
    </member>
    <member name="T:XMLCommentsExamples.SampleClass">
      <summary>
            This class is used to demonstrate the various XML comments elements.  It serves no useful purpose.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.AverageValues(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            This is used to average an enumerable list of values
            </summary>
      <param name="values">The values to average</param>
      <returns>The average of the values</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.AverageValues(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            This is used to get the average of two enumerable list of values
            </summary>
      <param name="firstValues">The first set of values to average</param>
      <param name="secondValues">The second set of values to average</param>
      <returns>The average of the values from both enumerable lists</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.BibliographyCiteExample">
      <summary>
            This demonstrates the <c>cite</c> element used to produce a bibliography section in the topic.
            </summary>
      <remarks>
        <para>Sandcastle is a popular download<cite>sandcastle activity</cite>.</para>
        <para>The Sandcastle Help File Builder<cite>SHFB</cite> adds even more value.</para>
        <para>I expect Sandcastle's popularity<cite>sandcastle activity</cite> to increase as more community
            members become aware of its usefulness, with the help of projects like the Sandcastle Help File
            Builder<cite>SHFB</cite>.</para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.CallStoredProcedure(System.String,System.Int32)">
      <summary>
            Executes a <see cref="T:System.Data.SqlClient.SqlCommand" /> with the specified
            <paramref name="storedProcName" /> as a stored procedure initialized
            for updating the values of the specified <paramref name="row" />.
            </summary>
      <param name="storedProcName">The stored procedure name to execute</param>
      <param name="row">The row to update</param>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.ConceptualLinkExample">
      <summary>
            See the <conceptualLink target="db2703b4-12bc-4cf5-8642-544b41002809" /> topic
            for more information.
            </summary>
      <remarks>
        <c>conceptualLink</c> is classed as one of the
            <conceptualLink target="9341fdc8-1571-405c-8e61-6a6b9b601b46">miscellaneous
            elements</conceptualLink>.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.DoSomething">
      <summary>
            This version of the method takes no parameters.
            </summary>
      <remarks>
        <para>To see all overloads, refer to the
            <see cref="M:XMLCommentsExamples.SampleClass.DoSomething" autoUpgrade="true" /> topic.</para>
        <para>Other overloads:</para>
        <list type="bullet">
          <item>
            <description>
              <see cref="M:XMLCommentsExamples.SampleClass.DoSomething(System.Int32)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:XMLCommentsExamples.SampleClass.DoSomething(System.String)" />
            </description>
          </item>
          <item>
            <description>
              <see cref="M:XMLCommentsExamples.SampleClass.DoSomething(System.Int32,System.String)" />
            </description>
          </item>
        </list>
        <para>Alternate syntax to link to the overloads topic:
            <see cref="O:XMLCommentsExamples.SampleClass.DoSomething">DoSomething
            Overloads</see></para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.DoSomething(System.Int32)">
      <summary>
            This version of the method takes an integer parameter.
            </summary>
      <param name="number">A number to use</param>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.DoSomething(System.Int32,System.String)">
      <summary>
            This version of the method takes both an integer and a string parameter.
            </summary>
      <param name="number">A number to use</param>
      <param name="text">A text value to use</param>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.DoSomething(System.String)">
      <summary>
            This version of the method takes a string parameter.
            </summary>
      <param name="text">A text value to use</param>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.FilterPriorityExample">
      <summary>
            Filter priority example
            </summary>
      <remarks>This element is rarely used as <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />
            does the same thing and is effective across all languages.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.GetRandomNumber">
      <summary>
             This returns a random number
             </summary>
      <returns>A random number using <see cref="P:XMLCommentsExamples.SampleClass.SampleNumber" /> as the seed.</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.IncludeAllExample">
      <summary>
			This summary came from an external XML file.
		</summary>
      <remarks>
			These remarks came from an external XML file.
		</remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.IncludeSectionsExample">
      <summary>
            In this example, the <c>include</c> element is used to pull in sections of
            the comments.
            </summary>
      <remarks>
        <para>As shown in these examples (see source code).  Single and double quotes
            can be used on the XPath query when nested quotes are required.  The key is to
            be consistent.</para>
        <para>This pulls in a single paragraph element.</para>
        <para>This paragraph was imported from an external XML file.</para>
        <para>This pulls in a all the content of the element.</para>
        <para>Paragraph 1</para>
        <para>Paragraph 2</para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.Increment">
      <summary>
            The <c>Increment</c> method increments the stored number by one
            </summary>
      <returns>The new sample number after being incremented</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.MethodRequiringSpecificPermissions">
      <summary>
            The <c>permission</c> element is used to document the types of permissions that
            a caller must be granted to access this method.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.OnSomethingHappened">
      <summary>
            This is a protected virtual method used to raise the
            <see cref="E:XMLCommentsExamples.SampleClass.SomethingHappened" /> event.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.op_Addition(XMLCommentsExamples.SampleClass,XMLCommentsExamples.SampleClass)">
      <summary>
            Addition operator overload
            </summary>
      <param name="left">The left value</param>
      <param name="right">The right value</param>
      <returns>A new instance containing the sum of the left and right
            sample numbers</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.ParagraphExample">
      <summary>
            A simple demonstration of the <c>para</c> element.
            </summary>
      <returns>Always returns 0.</returns>
      <remarks>
        <para>The <c>para</c> element is optional if the text in the parent
            element consists of a single sentence or paragraph such as in the
            <c>summary</c> and <c>returns</c> elements on this method.</para>
        <para>When multiple blocks of text are present, each must be
            wrapped in it to create new paragraphs.</para>
        <para>Paragraph 1.</para>
        <para>Paragraph 2.</para>
        <para />
        <para></para>
        <para>Self-closing and empty paragraphs are ignored unless they create
            an initial paragraph break.</para>
        <para>Paragraph 4.</para>
        <p />HTML paragraph elements can also be used.
            <p>They work the same way.</p></remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.PerformAnAction">
      <summary>
            This performs an action
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.PreliminaryExample">
      <summary>
            This method may go away or its signature may change in a later release.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.ProcessText(System.String)">
      <summary>
            This method processes text
            </summary>
      <param name="text">The text to process</param>
      <exception cref="T:System.ArgumentNullException">This is thrown if the <paramref name="text" />
            parameter is null.</exception>
      <exception cref="T:System.ArgumentException">This is thrown if the <paramref name="text" />
            parameter is an empty string.</exception>
      <exception cref="T:System.InvalidOperationException">This is thrown because the method
            is not currently implemented.</exception>
    </member>
    <member name="P:XMLCommentsExamples.SampleClass.SampleNumber">
      <summary>
            This is used to get or set the sample number
            </summary>
      <value>The value can be any valid integer</value>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.SeeElementExternalExample">
      <summary>
            This is used to demonstrate the external reference type of <c>see</c>
            and <c>seealso</c> elements.
            </summary>
      <remarks>
        <list type="bullet">
          <item>
            <description>Basic link: <see href="https://GitHub.com/EWSoftware/SHFB" /></description>
          </item>
          <item>
            <description>Link with target: <see href="https://GitHub.com/EWSoftware/SHFB/wiki" target="_self" /></description>
          </item>
          <item>
            <description>Link with alternate text: <see href="https://GitHub.com/EWSoftware/issues" alt="Discuss SHFB on GitHub" /></description>
          </item>
          <item>
            <description>Link with inner text: <see href="https://GitHub.com/EWSoftware/SHFB">
                  SHFB on GitHub</see></description>
          </item>
        </list>
        <para>Equivalent <c>seealso</c> links are shown below.</para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.SeeLangWordExamples">
      <summary>
            This demonstrates the <c>see</c> element's <c>langword</c> form
            </summary>
      <returns>This method is <see langword="static" /> and always returns
            <see langword="null" />.</returns>
    </member>
    <member name="E:XMLCommentsExamples.SampleClass.SomethingHappened">
      <summary>
            This event is raised when something interesting happens.
            </summary>
      <remarks>
        <para>The <see cref="M:XMLCommentsExamples.SampleClass.OnSomethingHappened" /> method is used to
            raise this event.  This event uses the general <see cref="T:System.EventHandler" />
            delegate that passes <see cref="F:System.EventArgs.Empty">EventArgs.Empty</see>
            to the handlers.</para>
        <para>Alternate <c>see</c> syntax: <see cref="F:System.EventArgs.Empty" qualifyHint="true" /></para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.SummaryRemarksExample">
      <summary>
             The summary is a brief description of the type or type member and will
             be displayed in IntelliSense and the Object Browser.
             </summary>
      <remarks>
        <para>The remarks element should be used to provide more detailed information
             about the type or member such as how it is used, its processing, etc.</para>
        <para>Remarks will only appear in the help file and can be as long as
             necessary.</para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.SumValues(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            This is used to sum an enumerable list of values
            </summary>
      <param name="values">The values to sum</param>
      <returns>The sum of the values</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.SumValues(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
            This is used to sum two enumerable list of values
            </summary>
      <param name="firstValues">The first set of values to sum</param>
      <param name="secondValues">The second set of values to sum</param>
      <returns>The sum of the values from both enumerable lists</returns>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.TemporaryMethod">
      <summary>
            A temporary method
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.TokenExample">
      <summary>
            The help file was built on July 8, 2023 using Sandcastle
            v2023.7.8.0.
            </summary>
      <remarks>For tokens to be resolved, the <b>API Token Resolution</b> build component
            must be added to the SHFB project.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.VariousListExamples">
      <summary>
             This method shows various examples of the <c>list</c> XML comments element.
             </summary>
      <remarks>
        <para>A simple bulleted list.  The <c>term</c> and <c>description</c>
             elements are optional for simple string descriptions.</para>
        <list type="bullet">
          <item>First item</item>
          <item>Second item</item>
          <item>Third item</item>
        </list>
        <para>Bullet list with terms and definitions.  The term is highlighted and
             separated from the definition with a dash.</para>
        <list type="bullet">
          <item>
            <term>maxLen</term>
            <description>field must contain no more than the specified number
             of characters</description>
          </item>
          <item>
            <term>minLen</term>
            <description>field must contain at least the specified number
             of characters</description>
          </item>
          <item>
            <term>maxVal</term>
            <description>field must contain a number that is no larger than the
             specified value</description>
          </item>
          <item>
            <term>minVal</term>
            <description>field must contain a number that is no smaller than the
             specified value</description>
          </item>
          <item>
            <term>pattern</term>
            <description>field must match the specified regular expression
             </description>
          </item>
        </list>
        <para>A simple numbered list.  The <c>term</c> and <c>description</c>
             elements are optional for simple string descriptions.</para>
        <list type="number">
          <item>First item</item>
          <item>Second item</item>
          <item>Third item</item>
        </list>
        <para>This next numbered list uses the optional <c>start</c> attribute to
             continue numbering where the last one left off.</para>
        <list type="number" start="4">
          <item>Fourth item</item>
          <item>Fifth item</item>
          <item>Sixth item</item>
        </list>
        <para>Numbered list with terms and definitions.</para>
        <list type="number">
          <item>
            <term>maxLen</term>
            <description>field must contain no more than the specified number
             of characters</description>
          </item>
          <item>
            <term>minLen</term>
            <description>field must contain at least the specified number
             of characters</description>
          </item>
          <item>
            <term>maxVal</term>
            <description>field must contain a number that is no larger than the
             specified value</description>
          </item>
          <item>
            <term>minVal</term>
            <description>field must contain a number that is no smaller than the
             specified value</description>
          </item>
          <item>
            <term>pattern</term>
            <description>field must match the specified regular expression
             </description>
          </item>
        </list>
        <para>Definition list.</para>
        <list type="definition">
          <item>
            <term>maxLen</term>
            <description>field must contain no more than the specified number
             of characters</description>
          </item>
          <item>
            <term>minLen</term>
            <description>field must contain at least the specified number
             of characters</description>
          </item>
          <item>
            <term>maxVal</term>
            <description>field must contain a number that is no larger than the
             specified value</description>
          </item>
          <item>
            <term>minVal</term>
            <description>field must contain a number that is no smaller than the
             specified value</description>
          </item>
          <item>
            <term>pattern</term>
            <description>field must match the specified regular expression
             </description>
          </item>
        </list>
        <para>Two-column table list with terms and definitions.</para>
        <list type="table">
          <listheader>
            <term>Item</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>maxLen</term>
            <description>field must contain no more than the specified number
             of characters</description>
          </item>
          <item>
            <term>minLen</term>
            <description>field must contain at least the specified number
             of characters</description>
          </item>
          <item>
            <term>maxVal</term>
            <description>field must contain a number that is no larger than the
             specified value</description>
          </item>
          <item>
            <term>minVal</term>
            <description>field must contain a number that is no smaller than the
             specified value</description>
          </item>
          <item>
            <term>pattern</term>
            <description>field must match the specified regular expression
             </description>
          </item>
        </list>
        <para>A table with multiple columns.  <c>term</c> or <c>description</c>
             can be used to create the columns in each row.</para>
        <list type="table">
          <listheader>
            <term>Column 1</term>
            <term>Column 2</term>
            <term>Column 3</term>
            <term>Column 4</term>
          </listheader>
          <item>
            <term>R1, C1</term>
            <term>R1, C2</term>
            <term>R1, C3</term>
            <term>R1, C4</term>
          </item>
          <item>
            <description>R2, C1</description>
            <description>R2, C2</description>
            <description>R2, C3</description>
            <description>R2, C4</description>
          </item>
        </list>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.SampleClass.VariousNoteExamples">
      <summary>
             This shows the result of the various <c>note</c> types.
             </summary>
      <remarks>
        <para>These are various examples of the different note types.</para>
        <note>
             This example demonstrates the handling of a <c>note</c> element with no
             defined type.  It defaults to the "note" style.
             </note>
        <note type="tip">
             Always document your code to help others understand how it is used.
             </note>
        <note type="implement">
             Override this method in a derived class to do something useful
             </note>
        <note type="caller">
             Calling this implementation will have no effect at all
             </note>
        <note type="inherit">
             Types inheriting this base method will have no use for it as it does nothing
             </note>
        <note type="caution">
             Use of this method is not recommended.
             </note>
        <note type="warning">
             XML is case-sensitive so the note type must be entered as shown in order for
             it to be interpreted correctly.
             </note>
        <note type="important">
             Calling this method excessively will only slow down your application.
             </note>
        <note type="security">
             It is always safe to call this method.
             </note>
        <note type="security note">
             This method requires no special privileges
             </note>
        <note type="C#">
             Use parentheses when calling this method in C#.
             </note>
        <note type="VB">
             Parentheses are not required when calling this method in Visual Basic.
             </note>
        <note type="C++">
             Use parentheses when calling this method in C++.
             </note>
        <note type="J#">
             Use parentheses when calling this method in J#.
             </note>
        <note type="todo">
             This could contain a To Do list.
             </note>
        <note type="todo" title="Project Road Map">
             This note contains a custom title.
             </note>
        <para>See the <conceptualLink target="4302a60f-e4f4-4b8d-a451-5f453c4ebd46" />
             topic for a full list of all possible note types.</para>
      </remarks>
    </member>
    <member name="T:XMLCommentsExamples.ThreadSafetyClass">
      <summary>
            This class demonstrates the <c>threadsafety</c> XML comments element.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.ThreadSafetyClass.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XMLCommentsExamples.ThreadSafetyClass</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XMLCommentsExamples.ThreadSafetyClass.InstanceMethod">
      <summary>
            Per the <c>threadsafety</c> XML comments element on the class, the developer has
            indicated that instance method like this one are not safe for multi-threaded use.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.ThreadSafetyClass.StaticMethod">
      <summary>
            Per the <c>threadsafety</c> XML comments element on the class, the developer has
            indicated that static methods like this one are safe for multi-threaded use.
            </summary>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest">
      <summary>
            This class is used to test inherited documentation on attached properties and events
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.AddItemActivateHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Add an event handler to an object
            </summary>
      <param name="o">The dependency object</param>
      <param name="handler">The event handler</param>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.GetIsBroughtIntoViewWhenSelected(System.Windows.Controls.TreeViewItem)">
      <summary>
            Get the property value
            </summary>
      <param name="treeViewItem">The tree view item</param>
      <returns>The property value</returns>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected">
      <summary>This attached property indicates whether or not a tree view item is brought into
            view when selected.
            </summary>
      <value>The default value is false</value>
    </member>
    <member name="F:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelectedProperty">
      <summary>
            This defines the
            <see cref="P:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.IsBroughtIntoViewWhenSelected" />
            attached property.
            </summary>
    </member>
    <member name="E:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.ItemActivate">
      <summary>
            This attached event is raised when an item is activated
            </summary>
      <remarks>There's a bit more too it to get the event raised but this is just a
            documentation example.</remarks>
    </member>
    <member name="F:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.ItemActivateEvent">
      <summary>
            This defines the
            <see cref="E:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.ItemActivate" />
            attached event.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.RemoveItemActivateHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
      <summary>
            Remove an event handler from an object
            </summary>
      <param name="o">The dependency object</param>
      <param name="handler">The event handler</param>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.AttachedEventsAndPropertiesTest.SetIsBroughtIntoViewWhenSelected(System.Windows.Controls.TreeViewItem,System.Boolean)">
      <summary>
            Sets the property value
            </summary>
      <param name="treeViewItem">The tree view item</param>
      <param name="value">The property value</param>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc">
      <summary>
             A base class from which to inherit documentation
             </summary>
      <remarks>
        <para>These remarks are for the base class.</para>
        <para>This information applies to all classes that derive from
             <see cref="T:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc" />:
             <list type="bullet"><item><description>Point #1.</description></item><item><description>Point #2.</description></item><item><description>Point #3.</description></item></list></para>
      </remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc.#ctor">
      <summary>
            Constructor
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc.MethodWithExample">
      <summary>
            Summary for the method with an example
            </summary>
      <returns>True all the time</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc.MethodWithLotsOfComments(System.Int32)">
      <summary>
            The method in the base class has lots of comments.
            </summary>
      <param name="x">The parameter</param>
      <remarks>Remarks for the base class</remarks>
      <exception cref="T:System.ArgumentException">Thrown if x is zero</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if x is
            less than zero.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc.MethodWithTwoExamples">
      <summary>
            A method with two examples
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc.ToString">
      <summary>
            The ToString implementation for BaseInheritDoc
            </summary>
      <returns>A string representing the object</returns>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.CustomException">
      <summary>
            This exception class is thrown by the application if it encounters an
            unrecoverable error.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.CustomException.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.CustomException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <see langword="null" /> or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.CustomException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error. </param>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.CustomException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Exception" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (<see langword="Nothing" /> in Visual Basic) if no inner exception is specified. </param>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs">
      <summary>
            This is a derived class with inherited documentation.
            </summary>
      <remarks>This will inherit just the last &lt;para&gt; tag from
            the base class's &lt;remarks&gt; tag:
            <para>This information applies to all classes that derive from
             <see cref="T:XMLCommentsExamples.DocumentationInheritance.BaseInheritDoc" />:
             <list type="bullet"><item><description>Point #1.</description></item><item><description>Point #2.</description></item><item><description>Point #3.</description></item></list></para></remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.MethodUsingSharedExample">
      <summary>
            This uses a shared example from a base member that is not
            public and this doesn't override.
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithExample">
      <summary>
            An override of the method with an example
            </summary>
      <returns>Always returns false</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithLotsOfComments(System.Int32)">
      <summary>
            The method in the base class has lots of comments.
            </summary>
      <param name="x">The parameter</param>
      <remarks>Remarks for the base class</remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.MethodWithTwoExamples">
      <summary>
            This only includes one of the examples
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.OverloadedMethod(System.String)">
      <summary>
            This overloaded method does something
            </summary>
      <param name="p1">The string parameter</param>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.OverloadedMethod(System.String,System.Int32)">
      <summary>There are three overloads for this method.</summary>
      <param name="x">An integer parameter</param>
      <param name="p1">The string parameter</param>
      <remarks>These remarks are from the overloads tag on the
            first version.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.OverloadedMethod(System.String,System.String)">
      <summary>
            This overloaded method does something
            </summary>
      <param name="p2">The second string parameter</param>
      <param name="p1">The string parameter</param>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.DerivedClassWithInheritedDocs.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation">
      <summary>
            A class with an explicit interface implementation
            </summary>
      <remarks>Note that you must enable the <b>DocumentExplicitInterfaceImplementations</b>
            SHFB project options in order to see the explicitly implemented members.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing. </param>
      <param name="index">The zero-based index in <paramref name="array" /> at which copying begins. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or- The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.-or-The type of the source <see cref="T:System.Collections.ICollection" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
      <returns>
        <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.</returns>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</returns>
      <remarks>This is a dummy class and always returns null.</remarks>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.ExplicitImplementation.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>This is a dummy class so it throws an exception</returns>
    </member>
    <member name="T:XMLCommentsExamples.DocumentationInheritance.SetDocumentation">
      <summary>
            A structure with a generic base class that has inherited documentation on its members
            </summary>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Add(System.Int32)">
      <summary>Adds an element to the current set and returns a value to indicate if the element was successfully added. </summary>
      <param name="item">The element to add to the set.</param>
      <returns>
        <see langword="true" /> if the element is added to the set; <see langword="false" /> if the element is already in the set.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Contains(System.Int32)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.CopyTo(System.Int32[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.ExceptWith(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Removes all elements in the specified collection from the current set.</summary>
      <param name="other">The collection of items to remove from the set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IntersectWith(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Modifies the current set so that it contains only elements that are also in a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IsProperSubsetOf(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether the current set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a proper subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IsProperSupersetOf(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether the current set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set. </param>
      <returns>
        <see langword="true" /> if the current set is a proper superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="P:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>
        <see langword="true" /> if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, <see langword="false" />.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IsSubsetOf(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether a set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a subset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.IsSupersetOf(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether the current set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is a superset of <paramref name="other" />; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Overlaps(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether the current set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set and <paramref name="other" /> share at least one common element; otherwise, <see langword="false" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.Remove(System.Int32)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
        <see langword="true" /> if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, <see langword="false" />. This method also returns <see langword="false" /> if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.SetEquals(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Determines whether the current set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>
        <see langword="true" /> if the current set is equal to <paramref name="other" />; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.SymmetricExceptWith(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Modifies the current set so that it contains only elements that are present either in the current set or in the specified collection, but not both. </summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.System#Collections#Generic#ICollection{System#Int32}#Add(System.Int32)">
      <summary>Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:XMLCommentsExamples.DocumentationInheritance.SetDocumentation.UnionWith(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Modifies the current set so that it contains all elements that are present in the current set, in the specified collection, or in both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is <see langword="null" />.</exception>
    </member>
  </members>
</doc>
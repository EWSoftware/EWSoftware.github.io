<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Query Data Context Extension Methods</title><meta name="Title" content="Query Data Context Extension Methods" /><meta name="Help.Id" content="fcc7cc28-ad7d-463d-84aa-723766215811" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="fcc7cc28-ad7d-463d-84aa-723766215811" /><meta name="Description" content="This topic describes the query related data context extension methods that work in conjunction with the to load, add, update, or delete rows." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><img src="../icons/Help.png" /></div><div id="DocumentationTitle" class="level-item">EWSofware Entity Framework Utilities Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Query Data Context Extension Methods</h1><div><p>This topic describes the query related data context extension methods that work in conjunction with
the <a href="869efb41-378c-426e-a84a-b014b72d1772.htm">Entity Stored Procedure Attributes</a> to load, add, update, or delete rows.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>In all of the extension methods below, if the data context connection is not in an open state, it
is opened temporarily while performing the action and closed again afterwards.</p><p>If change tracking is enabled on the data context, any loaded
entities will be added to the change tracker.  Likewise, changes to the entities will be tracked and their
state updated accordingly when added, updated, or deleted when submitting changes to the data context.  If change
tracking is not enabled on the data context or the entity is marked with the <span class="code">NeverTrackAttribute</span>,
they will not be tracked.</p><p>Asynchronous versions of all the methods are also available.</p></div></article><ul class="is-hidden-tablet"><li><a href="#LoadAll">LoadAll / LoadAllAsync</a></li><li><a href="#LoadByKey">LoadByKey / LoadByKeyAsync</a></li><li><a href="#InsertEntity">InsertEntity / InsertEntityAsync</a></li><li><a href="#UpdateEntity">UpdateEntity / UpdateEntityAsync</a></li><li><a href="#DeleteEntity">DeleteEntity / DeleteEntityAsync</a></li><li><a href="#SubmitChanges">SubmitChanges / SubmitChangesAsync (2 overloads each)</a></li></ul></div><h2 id="LoadAll" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>LoadAll / LoadAllAsync</h2><div id="IDCABSection"><p>This extension method is used to load all entities of the given type using a stored procedure
defined on the entity type.  The stored procedure name is determined by looking for the
<span class="code">LoadAllStoredProcedureAttribute</span> on the entity type.  The stored procedure should not
have any parameters or only parameters with acceptable default values in order to return all rows.</p><p>If the attribute is omitted from the entity type, the stored procedure name is assumed to be the
same as the entity type name without the <a href="0ba6159a-1cff-e696-254f-9c220ab1a4ce.htm">ResultSetSuffix</a>
property value.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using var dataContext = new MyDbContext();

var watchList = dataContext.LoadAll&lt;WatchList&gt;().ToList();</code></pre></div></div></div><h2 id="LoadByKey" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>LoadByKey / LoadByKeyAsync</h2><div id="IDDABSection"><p>This extension method is used to load all entities of the given type using a stored procedure
defined on the entity type using the given key value(s).  The stored procedure name is determined by looking for
the <span class="code">LoadByKeyStoredProcedureAttribute</span> on the entity type.  The stored procedure should
have a parameter for each of the passed key values.  The parameter order typically matches the declared key order
on the entity or the parameter order of the stored procedure but does not have to.</p><p>If the attribute is omitted from the entity type, the stored procedure name is assumed to be the
same as the entity type name without the <a href="0ba6159a-1cff-e696-254f-9c220ab1a4ce.htm">ResultSetSuffix</a>
property value.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using var dataContext = new MyDbContext();

var assetInfo = dataContext.LoadByKey&lt;Asset&gt;(assetKey).Single();</code></pre></div></div></div><h2 id="InsertEntity" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>InsertEntity / InsertEntityAsync</h2><div id="IDEABSection"><p>This extension method is used to insert the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<span class="code">InsertEntityStoredProcedureAttribute</span> on the entity type.  The stored procedure must
have parameters for each of the entity properties except those marked with the
<span class="code">IgnoreAttribute</span> for inserts.  It should not return a value or a result set.  Parameters
related to the primary key (single column, integer only) or marked with the <span class="code">TimestampAttribute</span>
are defined as input/out parameters.  All other parameters are input only.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using var dataContext = new MyDbContext();

if(watchListItem.WatchID == 0)
    dataContext.InsertEntity(watchListItem);
else
    dataContext.UpdateEntity(watchListItem);</code></pre></div></div></div><h2 id="UpdateEntity" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>UpdateEntity / UpdateEntityAsync</h2><div id="IDFABSection"><p>This extension method is used to update the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<span class="code">UpdateEntityStoredProcedureAttribute</span> on the entity type.  The stored procedure must
have parameters for each of the entity properties except those marked with the
<span class="code">IgnoreAttribute</span> for updates.  It should not return a value or a result set.  Parameters
marked with the <span class="code">TimestampAttribute</span> are defined as input/out parameters.  All other
parameters are input only.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using var dataContext = new MyDbContext();

if(watchListItem.WatchID == 0)
    dataContext.InsertEntity(watchListItem);
else
    dataContext.UpdateEntity(watchListItem);</code></pre></div></div></div><h2 id="DeleteEntity" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>DeleteEntity / DeleteEntityAsync</h2><div id="IDGABSection"><p>This extension method is used to delete the given entity using a stored procedure defined on the
entity type.  The stored procedure name is determined by looking for the
<span class="code">DeleteEntityStoredProcedureAttribute</span> on the entity type.  The stored procedure must have
one or more parameters representing the key columns on the entity type identified with a
<span class="code">PrimaryKeyAttribute</span> or one or more properties with a <span class="code">KeyAttribute</span>
or defined by the data context.  It should not return a value or a result set.  All parameters are input only.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using var dataContext = new MyDbContext();

dataContext.DeleteEntity(watchListItem);</code></pre></div></div></div><h2 id="SubmitChanges" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>SubmitChanges / SubmitChangesAsync (2 overloads each)</h2><div id="IDHABSection"><p>The <span class="code">SubmitChanges</span> methods are used to submit all tracked add, update, and
delete changes for the given entity type.</p><p>The first overload is similar to the <span class="code">SaveChanges</span> method on the data
context except that it only submits changes for the specified entity type.  The insert, update, and delete
stored procedures are determined by looking for the <span class="code">InsertEntityStoredProcedureAttribute</span>,
<span class="code">UpdateEntityStoredProcedureAttribute</span>, and <span class="code">DeleteEntityStoredProcedureAttribute</span>
attributes on the entity type.  It will get the changed entities from the data context's change tracker and
submit them accordingly using the extension methods described above.  The state of the entities is also updated
to reflect that they are in an unchanged state after being added or updated or detached if deleted.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">if(dataContext.HasChanges())
    dataContext.SubmitEntityChanges&lt;Account&gt;();</code></pre></div></div><p>The second overload allows you to specify functions that allow for custom handling of insert,
update, and delete operations for the given entity type.  This will get the changed entities from the data
context's change tracker and submit them accordingly using the given functions.  If the corresponding function
returns true, the state of the entity is updated to reflect that it is in an unchanged state after being added or
updated or detached if deleted.  If it returns false, the entity is left in its changed state and no action is
taken.  If a function delegate is not supplied for an operation, no action is taken.  The functions are passed
the entity entry from the change tracker so that they can determine what to do based on the changed state.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">if(dataContext.HasChanges())
{
    // Submit changes using stored procedure methods on the data context
    dataContext.SubmitChanges&lt;StateCode&gt;(
        se =&gt;
        {
            // Insert a new state code
            dataContext.spStateCodeAddUpdate(null, se.Entity.State, se.Entity.StateDesc);
            return true;
        },
        se =&gt;
        {
            // Update an existing state code possibly changing the key
            dataContext.spStateCodeAddUpdate((string?)se.OriginalValues[nameof(StateCode.State)],
                se.Entity.State, se.Entity.StateDesc);
            return true;
        },
        se =&gt;
        {
            // Delete an existing state code
            dataContext.spStateCodeDelete((string?)se.OriginalValues[nameof(StateCode.State)]);
            return true;
        });
}</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="48c2006f-d738-40a1-a486-d53fbdf7208c.htm">Welcome</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">LoadAll / LoadAllAsync</a></li><li><a class="quickLink">LoadByKey / LoadByKeyAsync</a></li><li><a class="quickLink">InsertEntity / InsertEntityAsync</a></li><li><a class="quickLink">UpdateEntity / UpdateEntityAsync</a></li><li><a class="quickLink">DeleteEntity / DeleteEntityAsync</a></li><li><a class="quickLink">SubmitChanges / SubmitChangesAsync (2 overloads each)</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://github.com/EWSoftware/EntityFrameworkUtils" target="_blank" rel="noopener noreferrer">[v2025.6.14.0] Copyright © 2024-2025, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSofware%20Entity%20Framework%20Utilities%20Library%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div id="AdContent" class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="EntityFrameworkUtils"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
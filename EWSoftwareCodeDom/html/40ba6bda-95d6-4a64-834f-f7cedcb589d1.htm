<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Documenting Web Projects</title><meta name="Help.Id" content="40ba6bda-95d6-4a64-834f-f7cedcb589d1" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="40ba6bda-95d6-4a64-834f-f7cedcb589d1" /><meta name="Description" content="A question that comes up with some regularity is how to produce a help file from the XML comments in the code for a web project using the Sandcastle Help File Builder https://GitHub.com/EWSoftware/SHFB _blank ." /><meta name="tocFile" content="../toc/RootTOC.xml" /><link type="text/css" rel="stylesheet" href="../css/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">EWSoftware.CodeDom Namespace Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Documenting Web Projects</h1><div><p>This topic contains the following sections:</p><ul class="is-hidden-tablet"><li><a href="#DocWebApps">Documenting Web Application and Web Service Application Projects</a></li><li><a href="#DocWebsites">Documenting Website and Web Service Website Projects</a></li><li><a href="#Automation">Automating the Process</a></li><li><a href="#KnownIssues">Usage Notes and Known Issues</a></li><li><a href="#HowTheyWork">How The Code Providers Work</a></li><li><a href="#Conclusion">Conclusion</a></li><li><a href="#seeAlsoSection">See Also</a></li></ul><p>A question that comes up with some regularity is how to produce a help file from the XML
comments in the code for a web project using the <a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">Sandcastle Help File Builder</a>. There are two types of web project:
a <em>web application</em> project and a <em>website</em> project
(both include a web service and an AJAX-enabled variant of the project type). A web application project is
the simplest to document as it generates a single assembly with a fixed name much like any other non-web
project.  A website project, however, requires some extra effort to document and has a number of
limitations:</p><ul><li><p>It does not necessarily generate a single assembly.</p></li><li><p>It only generates assemblies when you actually publish the project.</p></li><li><p>The assembly names may vary from build to build depending on the options you use when
publishing the website.</p></li><li><p>There is no project-level option to produce XML comments files. Instead, you have to add a
section to the <em>Web.config</em> file to produce them.</p></li><li><p>Even after adding the option to produce XML comments files, there are limitations:</p><ul><li><p>If you specify a single comments filename, only the comments from the last assembly
compiled will be saved.  The VB.NET compiler has a <span class="code">/doc+</span> option to work around this
issue.  However, the C# compiler does not so this makes it impossible to fully document a C# website
project.</p></li><li><p>The comments files produced using the VB.NET <span class="code">/doc+</span> option are
not placed in the folder to which the project was published. Instead, they are left in the system's temporary
ASP.NET folder for the related .NET version (i.e.
<em>C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319\Temporary ASP.NET files</em> so you must
locate and retrieve them after each build.</p></li></ul></li></ul><p>To work around the limitations present when documenting website projects, you can use the
supplied custom code providers (one for C# and one for VB.NET).  By using these code providers, you can
specify a folder to which the XML comments files should be copied.  This saves you from having to locate
and copy them manually and solves the issue of the C# compiler not being able to output one comments file
per assembly.  Below are instructions for documenting each type of web project and information about how
the code providers work.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>The code providers assembly can be found at the <a href="https://GitHub.com/EWSoftware/WebCodeProviders" target="_blank" rel="noopener noreferrer" title="Web Code Providers">Web Code Providers</a> project site.</p></div></article></div><h2 id="DocWebApps" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Documenting Web Application and Web Service Application Projects</h2><div id="IDCABSection"><p>As noted, web applications are the easiest to document and do not require the use of the
custom code providers.  These projects are created in Visual Studio by selecting <strong>File | New |
Project</strong> and then selecting <strong>ASP.NET Web Application</strong> or
<strong>ASP.NET Web Service Application</strong> from the <strong>Web</strong> category of
your preferred language.  Note that these options are only available in Visual Studio 2005 after you install
Service Pack 1.</p><p>You must enable the XML comments option in your application projects so that an XML comments
file is produced when the projects are built.  This is done as follows:</p><ol><li><p>In the Solution Explorer, right click on the project and select
<strong>Properties</strong>.</p></li><li><p>Select the <strong>Build</strong> property page (C#) or the
<strong>Compile</strong> property page (VB.NET).</p></li><li><p>The XML comments filename is a per configuration option.  As such, you can either select
the <strong>All Configurations</strong> option at the top of the page to set the XML comments
options for all configurations at the same time or select each configuration individually and repeat the
next step for each one.</p></li><li><p>For C#, in the <strong>Output</strong> section, check the checkbox next to the
<strong>XML documentation file</strong>  text box and specify a name for the XML comments file.
Although not required, a common convention is to name the XML comments file after the related assembly
except with a <em>.xml</em> extension. The assembly name can be found on the
<strong>Application</strong> property page.</p><p>For VB.NET, just check the <strong>Generate XML documentation file</strong> checkbox.
It names the file after the assembly automatically.</p></li><li><p>If you have a solution with multiple web application or web service application projects
that need to be documented, repeat the above steps for each project in the solution.  If using the
Sandcastle Help File Builder, be sure to give each project's XML comments file a unique name as they are
copied to a common location for the build. Identically named files would overwrite each other and the
documentation in the overwritten files would not appear in the help file.</p></li></ol><p>Once the above has been done, Visual Studio will create the XML comments file each time the
project is built.  It is placed in the <em>.\bin</em> folder along with the assembly.  These can
be used in conjunction with your preferred documentation tool to produce a help file.</p></div><h2 id="DocWebsites" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Documenting Website and Web Service Website Projects</h2><div id="IDDABSection"><p>These projects are created in Visual Studio by selecting <strong>File | New | Web Site</strong>
and then selecting <strong>ASP.NET Web Site</strong> or <strong>ASP.NET Web Service</strong>
from the template dialog box.  In order to create XML comments files, you must add the custom code providers
to the <em>Web.config</em> file and publish the website.  This is done as follows:</p><ol><li><p>If your project does not yet contain one, add a <em>Web.config</em>
configuration file.</p></li><li><p>Add the following <span class="code">&lt;system.codedom&gt;</span> section to the
<span class="code">&lt;configuration&gt;</span> section as shown in the example below.  You only need to add
the <span class="code">&lt;compiler&gt;</span> element for the language that you are using but it will not
hurt anything if they are both present.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Example Code Provider Configurations</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">configuration</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">system.codedom</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">compilers</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-comment">&lt;!-- For C# --&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">compiler</span> <span class="highlight-xml-attribute-name">language</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"c#;cs;csharp"</span> <span class="highlight-xml-attribute-name">extension</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">".cs"</span>
        <span class="highlight-xml-attribute-name">compilerOptions</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"/docpath:C:\Publish\Docs"</span>
        <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"EWSoftware.CodeDom.CSharpCodeProviderWithDocs,
              EWSoftware.CodeDom, Version=1.1.0.0, Culture=neutral,
              PublicKeyToken=d633d7d5b41cbb65"</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-comment">&lt;!-- NOTE: Change version value as needed (v3.5, v4.0, etc.) --&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">providerOption</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"CompilerVersion"</span> <span class="highlight-xml-attribute-name">value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"v4.0"</span><span class="highlight-xml-bracket">/&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">compiler</span><span class="highlight-xml-bracket">&gt;</span>

      <span class="highlight-xml-comment">&lt;!-- For VB.NET --&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">compiler</span> <span class="highlight-xml-attribute-name">language</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"vb;vbs;visualbasic;vbscript"</span> <span class="highlight-xml-attribute-name">extension</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">".vb"</span>
        <span class="highlight-xml-attribute-name">compilerOptions</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"/docpath:C:\Publish\Docs"</span>
        <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"EWSoftware.CodeDom.VBCodeProviderWithDocs,
              EWSoftware.CodeDom, Version=1.1.0.0, Culture=neutral,
              PublicKeyToken=d633d7d5b41cbb65"</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-comment">&lt;!-- NOTE: Change version value as needed (v3.5, v4.0, etc.) --&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">providerOption</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"CompilerVersion"</span> <span class="highlight-xml-attribute-name">value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"v4.0"</span><span class="highlight-xml-bracket">/&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">compiler</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">compilers</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">system.codedom</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">configuration</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div><p>Instead of a <span class="code">/doc</span> option, the custom code providers use a custom
<span class="code">/docpath</span> option in the <span class="code">compilerOptions</span> attribute that
specifies the fully qualified folder name into which the XML comments files are placed.  The folder will be
created by the code provider if it does not exist.  Any other compiler options that you might need can also
be specified in the attribute value separated by a space.</p></li><li><p>In order to use the code providers, the ASP.NET compiler must be able to find them.  You
can either copy the <strong>EWSoftware.CodeDom.dll</strong> assembly into your project's
<em>.\bin</em> folder or you can register it in the Global Assembly Cache (GAC) so that it is
available to any project. To do so, use the <strong>gacutil</strong> command line tool as follows
replacing the path to the assembly to match the installed location on your system:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">gacutil -i \DotNet\Web\WebCodeProviders\Bin\Release\EWSoftware.CodeDom.dll</pre></div></div><p>To remove the assembly from the Global Assembly Cache, use the <strong>gacutil</strong>
command line tool as follows:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">gacutil -u EWSoftware.CodeDom</pre></div></div><p>You can find a copy of the tool in the Visual Studio installation folder in the
<em>.\SDK\v2.0\bin</em> sub-folder.</p></li></ol><p>Once the above has been done, you can publish your website.  Right click on the project in the
Solution Explorer, select <strong>Publish Web Site</strong>, set the options, and click OK to
publish it.  When finished, look in the location you specified in the <span class="code">/docpath</span>
option and you will find one XML comments file for each assembly that was built for your website.  These can
be used in conjunction with the assemblies and your preferred documentation tool to produce a help file.</p><p>As an alternative to publishing the website, you can use a web deployment project.  Add-ins
are available at the following locations:</p><ul><li><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=25163" target="_blank" rel="noopener noreferrer">Visual Studio 2008 Web Deployment Add-In</a></p></li></ul><p>The <a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">Sandcastle Help File Builder</a> version 1.8.0.0 and later supports wildcard documentation sources.  As
such, just add one entry with the path set to <em>[appPath]\bin\App_*.dll</em> where
<em>[appPath]</em> is the path to the published website and another entry with the path
set to <em>[docPath]\App_*.xml</em> where <em>[docPath]</em> is the path to
the XML comments files.</p><p>Since the code providers are not needed after the website is published, you can delete the
<span class="code">system.codedom</span> section from the published <em>Web.Config</em> file and
delete the assembly from the <em>.\bin</em> folder if you added it to the project for
publishing.</p></div><h2 id="Automation" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Automating the Process</h2><div id="IDEABSection"><p>Using the <strong>aspnet_compiler</strong> tool, it is possible to automate the
publishing of a website project.  The tool is located in the .NET Framework folder.  For .NET 2.0 through
3.5, this is usually <em>C:\Windows\Microsoft.NET\Framework\v2.0.50727</em>.  For .NET 4, this
is usually <em>C:\Windows\Microsoft.NET\Framework\v4.0.30319</em>.  To run it, issue a command
similar to the following (lines wrapped for display purposes):</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve">C:\Windows\Microsoft.NET\Framework\v4.0.30319\aspnet_compiler
    -f -v /MyWebSite
    -p C:\Path\To\MyWebsite C:\Publish\MyWebSite</pre></div></div><p>The <span class="code">-f</span> option tells it to delete any existing content in the target
folder (C:\Publish\MyWebsite in the example above).  The <span class="code">-v [path]</span> option tells it
the virtual path of the website to compile (i.e. the path you use to load it in the web browser).  The
<span class="code">-p [path]</span> option tells it the physical location of the website related to the
virtual path to compile. Using a script, you could for example publish the website, build the help file,
replace the <em>Web.config</em> in the published website with one that has had the
<span class="code">system.codedom</span> section removed, and delete the code provider assembly if it was
copied locally.  This is left as an exercise for the reader.  The web deployment add-ins noted above
support post-build events so they may provide better support for such tasks.</p></div><h2 id="KnownIssues" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Usage Notes and Known Issues</h2><div id="IDFABSection"><p>The following are some known issues and things to be aware of when
using the custom code providers.</p><ul><li><p>If any part of the XML comments file path contains spaces, enclose it in
<span class="code">&amp;quot;</span> entities (i.e.
<span class="code">compilerOptions="/docpath:&amp;quot;C:\My Path With Spaces&amp;quot;"</span>).</p></li><li><p>Do not use a relative path in the <span class="code">/docpath</span> option. Always use a
fully qualified path.  When using the project's publish option, the ASP.NET compiler always runs in the .NET
Framework folder so your XML comments files will end up in a location relative to it rather than your
project's folder if you do.</p></li><li><p>You can specify any folder except one that is under the location to which you publish the
website.  The act of publishing the website clears the destination folder and, since the comments files are
produced first, you will lose them if you place them under it.</p></li><li><p>The code providers will delete any "App_*.xml" files from the specified folder on the
first use.  This prevents lots of files from accumulating in the comments file folder that contain duplicate
information when not using fixed names.  It also means that you should publish each website's comments files
to a unique folder so that they are not lost if you are publishing and documenting multiple projects.</p></li><li><p>Unless you are using fixed names when publishing, the assembly and comments filenames will
change each time you publish the website.  As such, use wildcards (App_*.dll and App_*.xml) to specify the
files to use in your preferred documentation tool.</p></li><li><p>When using the VB.NET custom code provider, the commonly imported namespaces such as
<span class="code">System</span> and <span class="code">Microsoft.VisualBasic</span> are not included
automatically for some unknown reason.  The custom code provider will add a <span class="code">/imports</span>
command line option automatically for most of the common namespaces to work around the problem.  If
publishing fails due to undefined types when using the custom code providers, simply add a
<span class="code">/imports:[Namespace]</span> option to the <span class="code">compilerOptions</span>
attribute where "[Namespace]" is the missing namespace.   You can generally identify namespaces that may
cause problems by checking <em>Web.Config</em> for <span class="code">&lt;namespace&gt;</span>
elements in the <span class="code">&lt;pages&gt;</span> configuration section.  See below for a list of the
common namespaces added automatically by the VB.NET custom code provider. Another workaround to this issue
is to add <span class="code">Imports</span> statements to the code for each of the required namespaces rather
than relying on the automatically included references.</p></li><li><p>Related to the item above, when the custom code providers are active in the
<em>Web.Config</em> file, you may see lots of errors indicated by the red squiggly underline
related to missing types while viewing VB.NET code. During development, you can comment out the custom code
providers so that this does not happen.  As noted, the other workaround is to add an <span class="code">Imports</span>
statement to the code that includes the missing namespace that contains the types.</p></li></ul></div><h2 id="HowTheyWork" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>How The Code Providers Work</h2><div id="IDGABSection"><p>The custom code providers are actually quite simple.  Both the C# and VB.NET custom code
providers are identical with the exception of their base class and an extra set of compiler options passed
by the VB.NET version.  The C# version is shown below.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Example Code Provider</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CSharpCodeProviderWithDocs : CSharpCodeProvider
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> CompilerResults CompileAssemblyFromDom(
      CompilerParameters options,
      <span class="highlight-keyword">params</span> CodeCompileUnit[] compilationUnits)
    {
        CodeProviderHelper.ReplaceDocPathOption(options, <span class="highlight-keyword">null</span>);
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">base</span>.CompileAssemblyFromDom(options,
            compilationUnits);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> CompilerResults CompileAssemblyFromFile(
      CompilerParameters options, <span class="highlight-keyword">params</span> <span class="highlight-keyword">string</span>[] fileNames)
    {
        CodeProviderHelper.ReplaceDocPathOption(options, <span class="highlight-keyword">null</span>);
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">base</span>.CompileAssemblyFromFile(options, fileNames);
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> CompilerResults CompileAssemblyFromSource(
      CompilerParameters options, <span class="highlight-keyword">params</span> <span class="highlight-keyword">string</span>[] sources)
    {
        CodeProviderHelper.ReplaceDocPathOption(options, <span class="highlight-keyword">null</span>);
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">base</span>.CompileAssemblyFromSource(options, sources);
    }
}</pre></div></div><p>The derived version simply overrides three key methods and, prior to calling the base
implementation, calls the <span class="code">CodeProviderHelper.ReplaceDocPathOption</span> method which
takes care of updating the compiler options to produce a unique XML comments file for the assembly in the
specified folder.  It is shown below.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Replace Doc Path Option Method</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-keyword">internal</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> ReplaceDocPathOption(
  CompilerParameters options,
  <span class="highlight-keyword">string</span>[] additionalOptions)
{
    Match m;
    <span class="highlight-keyword">string</span> docPath, docFile;

    <span class="highlight-comment">// Replace /docpath with /doc</span>
    <span class="highlight-keyword">if</span>(!String.IsNullOrEmpty(options.CompilerOptions))
    {
        m = reDocPathOpt.Match(options.CompilerOptions);

        <span class="highlight-keyword">if</span>(m.Success)
        {
            docPath = m.Groups[<span class="highlight-number">1</span>].Value.Replace(<span class="highlight-literal">"\""</span>,
                String.Empty);

            <span class="highlight-keyword">if</span>(!Directory.Exists(docPath))
            {
                Directory.CreateDirectory(docPath);
                docFilesPurged = <span class="highlight-keyword">true</span>;
            }
            <span class="highlight-keyword">else</span>
                <span class="highlight-keyword">if</span>(!docFilesPurged)
                {
                    <span class="highlight-comment">// Purge the comments files from the folder</span>
                    <span class="highlight-comment">// on the first call.</span>
                    <span class="highlight-keyword">foreach</span>(<span class="highlight-keyword">string</span> file <span class="highlight-keyword">in</span> Directory.GetFiles(
                      docPath, <span class="highlight-literal">"App_*.xml"</span>))
                        File.Delete(file);

                    docFilesPurged = <span class="highlight-keyword">true</span>;
                }

            docFile = Path.Combine(docPath, Path.GetFileName(
                Path.ChangeExtension(options.OutputAssembly,
                <span class="highlight-literal">".xml"</span>)));

            options.CompilerOptions = String.Format(
                <span class="highlight-literal">"{0} /doc:\"{1}\""</span>, reDocPathOpt.Replace(
                options.CompilerOptions, String.Empty), docFile);
        }
    }

    <span class="highlight-comment">// Append the other options</span>
    <span class="highlight-keyword">if</span>(additionalOptions != <span class="highlight-keyword">null</span> &amp;&amp; additionalOptions.Length != <span class="highlight-number">0</span>)
        options.CompilerOptions = String.Concat(
            options.CompilerOptions, <span class="highlight-literal">" "</span>, String.Join(<span class="highlight-literal">" "</span>,
            additionalOptions));
}</pre></div></div><p>A regular expression is used to locate the <span class="code">/docpath</span> option. If found,
it extracts the folder name and either creates it if it does not exist or deletes all existing
<em>App_*.xml"</em> files in it the first time it is called.  It then combines the path with the
output assembly's name and a <em>.xml</em>. extension and replaces the <span class="code">/docpath</span>
option with a <span class="code">/doc</span> command line option.  If any additional options are passed to
the method, they are also appended to the command line options.  The VB.NET code provider passes in an extra
<span class="code">/imports</span> command line option to specify the following default import namespaces to
work around the issue noted earlier:</p><ul><li><p>System</p></li><li><p>System.Collections</p></li><li><p>System.Collections.Generic</p></li><li><p>System.Collections.ObjectModel</p></li><li><p>System.Configuration</p></li><li><p>System.Data</p></li><li><p>System.Web</p></li><li><p>System.Web.Configuration</p></li><li><p>System.Web.UI</p></li><li><p>System.Web.UI.HtmlControls</p></li><li><p>System.Web.UI.WebControls</p></li><li><p>System.Web.Util</p></li><li><p>System.Xml</p></li><li><p>Microsoft.VisualBasic</p></li></ul></div><h2 id="Conclusion" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Conclusion</h2><div id="IDHABSection"><p>By using the custom code providers and the instructions above, you can now easily produce XML
comments files for website projects in order to create help files for them.</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4 class="quickLinkHeader">Reference</h4><div><a href="cbb7bea7-5a2b-73f1-9c37-f0f603e8ad2a.htm">CSharpCodeProviderWithDocs</a></div><div><a href="3e4b2bba-c32d-f96a-8e7b-aa7180754aa7.htm">VBCodeProviderWithDocs</a></div><h4 class="quickLinkHeader">Other Resources</h4><div><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">Sandcastle Help File Builder</a></div></div></div><div class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Documenting Web Application and Web Service Application Projects</a></li><li><a class="quickLink">Documenting Website and Web Service Website Projects</a></li><li><a class="quickLink">Automating the Process</a></li><li><a class="quickLink">Usage Notes and Known Issues</a></li><li><a class="quickLink">How The Code Providers Work</a></li><li><a class="quickLink">Conclusion</a></li><li><a class="quickLink">See Also</a><ul class="menu"><li><a class="quickLink">Reference</a></li><li><a class="quickLink">Other Resources</a></li></ul></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://GitHub.com/EWSoftware/WebCodeProviders" target="_blank" rel="noopener noreferrer">Copyright © 2008-2022, Eric Woodruff, All rights reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.CodeDom%20Namespace%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="WebCodeProviders"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks()

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>
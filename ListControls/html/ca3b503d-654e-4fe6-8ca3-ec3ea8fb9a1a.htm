<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Welcome</title><meta name="Title" content="Welcome" /><meta name="Help.Id" content="ca3b503d-654e-4fe6-8ca3-ec3ea8fb9a1a" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="ca3b503d-654e-4fe6-8ca3-ec3ea8fb9a1a" /><meta name="Description" content="All of the list controls in this library share a common set of features:" /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">EWSoftware.ListControls Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Welcome</h1><div><p>Welcome to the EWSoftware List Controls Library. This topic contains an overview of the controls and their features.</p><ul class="is-hidden-tablet"><li><a href="#CommonFeatures">Common Features</a></li><li><a href="#RBLFeatures">The Radio Button List Control and Its Features</a></li><li><a href="#CBLFeatures">The Checkbox List Control and Its Features</a></li><li><a href="#CBFeatures">The Combo Box Controls and Their Features</a></li><li><a href="#DLFeatures">The Data List Controls and Their Features</a></li><li><a href="#DNFeatures">The Data Navigator Control and Its Features</a></li><li><a href="#ETVFeatures">The Extended Tree View Control and Its Features</a></li><li><a href="#seeAlsoSection">See Also</a></li></ul></div><h2 id="CommonFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Common Features</h2><div id="IDBABSection"><p>All of the list controls in this library share a common set of features:</p><ul><li><p>The controls supports various data source types just like other .NET controls such as the
standard combo box (data sets, data views, data tables, array lists or any other collection object that implement
the <span class="code">IList</span> interface, and simple strings).</p></li><li><p>The controls have item indexer properties that allow you to retrieve any column value by name
from the data source for the currently selected item or any row in the data source.  Any column value from the
data source can be retrieved, not just those used as the display and value members.</p></li><li><p>A simple <span class="code">ListItem</span> object is supplied that can be used with an array
list as the data source for the list controls.</p></li><li><p>For the combo box controls, the <span class="code">Items</span> collection is sortable in
ascending or descending order if not using a data source (i.e. items are added directly to the
<span class="code">Items</span> collection).</p></li><li><p>All of the controls are Windows XP theme-aware and will utilize the current theme by default if
the application has a manifest file or if <span class="code">Application.EnableVisualStyles()</span> has been
called.</p></li><li><p>Design-time support is included for defining formatting, layout, data source, and many other
control properties.</p></li></ul></div><h2 id="RBLFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Radio Button List Control and Its Features</h2><div id="IDCABSection"><p>The <span class="code">RadioButtonList</span> control provides a single-selection radio button
group that supports data binding, layout options, and data source indexers.  It provides a similar set of
properties as the combo box control for working with the selected item (i.e. <span class="code">SelectedIndex</span>,
<span class="code">SelectedValue</span>, etc.).  It also provides the following features:</p><ul><li><p>The radio button list supports four different layout methods (single column, single row, down
then across, and across then down).  For the last two, the control will automatically lay out the radio buttons
in columns using a best fit algorithm. Properties are also provided to let you modify the padding around the list
and between columns and rows.</p></li><li><p>The radio button list is resizable at runtime and can scroll both vertically and horizontally
when necessary to display items that exceed the bounds of the control.</p></li><li><p>The control supports an image list to display images for each radio button entry.  Images can
be displayed with or without text.</p></li><li><p>Alignment properties are provided for the checkmark, image, and text so that you can define the
layout of the radio button entries in the list.</p></li><li><p>The control supports displaying entries as normal radio buttons or as button controls without
the checkmark.</p></li><li><p>An optional title can be displayed on the border above the list.</p></li></ul></div><h2 id="CBLFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Checkbox List Control and Its Features</h2><div id="IDDABSection"><p>The <span class="code">CheckBoxList</span> control provides a multi-selection checkbox group that
supports data binding, layout options, and data source indexers. It provides the same set of properties and
features as the <span class="code">RadioButtonList</span> control shown above (using checkboxes instead) and
provides the following additional features:</p><ul><li><p>The <span class="code">Checked</span> and <span class="code">CheckState</span> properties of any
checkbox in the list can be retrieved or set by index (numeric) position or by key (<span class="code">ValueMember</span>)
value.</p></li><li><p>The indices of the checked items or the values of the checked items from the data source can be
returned using the <span class="code">CheckedIndices</span> and <span class="code">CheckedItems</span> properties.</p></li><li><p>The checkbox list can use three-state checkboxes (checked, unchecked, and indeterminate).</p></li><li><p>Each checkbox in the list can be bound to an individual field in another data source using the
<span class="code">BindingMembers</span> and <span class="code">BindingMembersDataSource</span> properties.</p></li><li><p>By setting the <span class="code">BorderStyle</span> to <span class="code">Sunken</span>, the
<span class="code">ListBackColor</span> to <span class="code">Window</span>, and the <span class="code">FlatStyle</span>
to <span class="code">Flat</span> you can simulate a <span class="code">CheckedListBox</span> control's appearance
but gain access to all of the additional features of the <span class="code">CheckBoxList</span> control such as
data binding, layout options, formatting, an image list, data source indexers, setting the check state of items
by key, etc.</p></li></ul></div><h2 id="CBFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Combo Box Controls and Their Features</h2><div id="IDEABSection"><p>The <span class="code">AutoCompleteComboBox</span> is identical to the standard combo box control
with the addition of auto-completion to select matching entries as the user types text. The auto-complete feature
is available in all combo box styles (<span class="code">DropDown</span>, <span class="code">DropDownList</span>,
and <span class="code">Simple</span>).</p><p>The <span class="code">MultiColumnComboBox</span> provides the same features as the standard combo
box control but with a drop-down list that is capable of showing multiple columns of information.  It also
provides the following features:</p><ul><li><p>The control supports auto-completion in all combo box styles to select matching entries as the
user types text.</p></li><li><p>Various new events have been added and behavior changes made to fix problems that are present
in the standard combo box control.  See the tutorial for more information.</p></li><li><p>Unlike other implementations of multi-column combo boxes, the form hosting the control will not
lose focus.  Instead, the control acts like the normal combo box allowing the parent form to retain focus and the
text box portion to retain the keyboard cursor.</p></li><li><p>The drop-down portion auto-sizes itself when first displayed based on the defined settings.  It
also positions itself correctly on the screen either below or above the combo box to show the maximum number of
items based on its defined settings.</p></li><li><p>The drop-down portion is resizable at runtime and can scroll both vertically and horizontally
when necessary.  The <span class="code">Simple</span> combo box style is also supported.</p></li><li><p>If no column settings are defined, the drop-down will display all columns from the data source
with basic formatting.</p></li><li><p>If type information is available in the data source, the drop-down will automatically show
Boolean values using a checkbox column.</p></li><li><p>A <span class="code">ColumnFilter</span> property allows you to let the drop-down add the data
source columns automatically but limits them to the ones that you specify.</p></li><li><p>For finer control over the columns displayed as well as their formatting options, column style
definitions can be used to specify the columns to display in the drop-down as well as their format (alignment,
column header text, format string, null text, width, etc).</p></li><li><p>When defining column styles, you can use the standard text box or boolean data grid columns
supplied with .NET or you can use custom third-party column types such as label columns, image columns, progress
bar columns, etc (all drop-down data is read-only).</p></li><li><p>If you define drop-down column styles, setting the <span class="code">Width</span> property to
-1 will cause the drop-down to size the column to the preferred width.  Setting the width to zero will cause the
drop-down to size the column to the longest value in the data source for the column. Setting the width to any
other positive value will size the column to the specified width.</p></li></ul><p>The <span class="code">UserControlComboBox</span> provides the same features as the standard combo
box control but with a drop-down that is capable of showing any user control that you define.  It also provides
the following features:</p><ul><li><p>Various new events have been added and behavior changes made to fix problems that are present
in the standard combo box control.  See below for more information.</p></li><li><p>The control supports auto-completion in all combo box styles to select matching entries as the
user types text.</p></li><li><p>The drop-down portion displays a user control that you create and derive from the supplied
<span class="code">DropDownControl</span> class.  This allows it to show non-standard lists such as tree views,
list views, or any combination of controls that you can imagine.  For this control, the parent form will lose the
focus when the drop-down is displayed so that controls within the drop-down can gain the focus.</p></li><li><p>The drop-down portion auto-sizes itself when first displayed based on the defined user control.
It also positions itself correctly on the screen either below or above the combo box to show as much of the user
control as possible.</p></li><li><p>The drop-down portion is resizable at runtime and can scroll both vertically and horizontally
when necessary.  The <span class="code">Simple</span> combo box style is also supported.</p></li></ul></div><h2 id="DLFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Data List Controls and Their Features</h2><div id="IDFABSection"><p>The <span class="code">DataList</span> control allows you to specify a user control template that is
used to display and edit information from a data source similar in nature to the <span class="code">DataList</span>
web server control, the subform control or continuous forms detail section in a Microsoft Access form, or the
<span class="code">DataRepeater</span> control from Visual Basic 6.  It provides the following features:</p><ul><li><p>Add, update, and delete behavior is detected based on the data source and each behavior can
also be disabled via properties on the control.</p></li><li><p>If additions are allowed, the data list will display a "new row" placeholder at the end of the
list.  A new row is automatically added to the data source if you modify any of the controls in the placeholder
row template.</p></li><li><p>The control will refresh the displayed rows automatically if it detects changes to its data
source such as rows directly added to or removed from the data source or direct changes made to fields in a row
in the data source rather than through the row template.</p></li><li><p>The control supports data set relationships so you can use it to edit information displayed in
a master/detail format.</p></li><li><p>Navigation controls are provided that let you move from record to record, jump to a specific
record, delete a row, and jump to the new row item.</p></li><li><p>A caption area can be displayed at the top of the data list similar to the caption option in
the <span class="code">DataGrid</span> control.</p></li><li><p>A customizable separator can be shown to provide a dividing line between rows in the list.</p></li><li><p>A row header can be shown to indicate the currently selected row.  An indicator is also
displayed on the new row item when it does not have the focus.</p></li><li><p>If row headers are visible, one or more rows can be selected by clicking on a row header and
dragging the mouse.  Shift-clicking the mouse on a row header can be used to extend the selection up or down.
Methods and properties are also provided to set the row selection range.</p></li><li><p>Clicking and dragging in the row headers within the current selection will fire the
<span class="code">BeginDrag</span> event so that you can initiate a drag and drop operation.</p></li><li><p>Various events are provided to let you add functionality for occurrences such as rows being
data bound, adding a row, deleting a row, a row being made the current row, etc.</p></li><li><p>A user control derived from the supplied <span class="code">TemplateControl</span> class is used
to provide a means for displaying and editing rows from the data source.  This template can contain any controls
in any layout that you need to display and edit information (text boxes, combo boxes, list boxes, radio buttons,
etc).</p></li><li><p>The template controls for each row are initialized and bound as they are scrolled into view to
save time and resources.  This makes it ideal for small data sets and still makes it responsive when dealing with
much larger data sets.  It also lets you customize the formatting of elements on a row-by-row basis (i.e.
color-code fields in each row based on their value, etc).</p></li><li><p>User controls derived from the <span class="code">TemplateControl</span> class can also be
specified to provide a header and/or footer for the data list.  The header and footer are placed in fixed
positions vertically but will scroll horizontally with the data rows if necessary.  As with the data rows, the
header and footer templates can contain any controls in any layout that you need to display and edit information
(text boxes, combo boxes, list boxes, radio buttons, etc). Since the header and footer templates are fixed, they
are bound to the data source as a whole rather than to individual rows within the data source.  Information in
bound fields in the header and footer will update as you move from row to row in the detail section.</p></li><li><p>Definable shortcut keys are provided to let you delete rows in the data source, jump to the new
row item, jump to the row number navigation text box, and to switch between the header, detail, and footer
sections.</p></li><li><p>Hitting the Escape key will cancel changes to the current row.</p></li><li><p>Ctrl+Tab and Ctrl+Shift+Tab let you tab out of the data list to the following or preceding
control on the form.  When tabbing back into the data list, the last focused row will regain the focus.</p></li><li><p>A <span class="code">ClickableLabel</span> control is provided so that clicking a label in a row
template will give it the focus.  This can also be used in other forms to focus a control when its associated
label is clicked.</p></li></ul></div><h2 id="DNFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Data Navigator Control and Its Features</h2><div id="IDGABSection"><p>The <span class="code">DataNavigator</span> control allows you to navigate through a data source
using a set of VCR-style buttons displaying one row at a time.</p><ul><li><p>Add, update, and delete behavior is detected based on the data source and each behavior can
also be disabled via properties on the control.</p></li><li><p>The control supports data set relationships so you can use it to edit information displayed in
a master/detail format.</p></li><li><p>Navigation controls are provided that let you move from record to record, jump to a specific
record, delete a row, and add a new row.</p></li><li><p>Various events are provided to let you add functionality for occurrences such as adding a row,
deleting a row, a row being made the current row, etc.</p></li><li><p>Definable shortcut keys are provided to let you delete rows in the data source, add a new row
to the data source, and jump to the row number navigation text box.</p></li><li><p>Hitting the Escape key will cancel changes to the current row.</p></li></ul></div><h2 id="ETVFeatures" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Extended Tree View Control and Its Features</h2><div id="IDHABSection"><p>The <span class="code">ExtendedTreeView</span> control is a fully owner-drawn tree view control that
overcomes some limitations in the way the default tree view is drawn.  It also provides several additional
features to make it easier to use than the standard tree view control.</p><ul><li><p>Several visual changes have been made to make it look better (the node background color draws
all the way across, unthemed checkboxes do not have the thick black border, hot tracking works on nodes with
their own font, and many more).</p></li><li><p>Two new draw events, <span class="code">TreeNodeDrawing</span> and <span class="code">TreeNodeDrawn</span>
are raised in place of the standard <span class="code">DrawNode</span> event to give you more options to customize
the tree node appearance before and after it has been drawn.</p></li><li><p>When using a state image list without checkboxes, a new <span class="code">ChangeStateImage</span>
event is raised when the image is clicked or the space bar is hit.</p></li><li><p>When <span class="code">LabelEdit</span> is set to true, F2 initiates editing on the selected
node.  Additional hot keys are also supported to expand and collapse the nodes in the tree.</p></li><li><p>The <span class="code">AllowCollapse</span> property can be used to specify whether or not nodes
can be collapsed when <span class="code">ShowPlusMinus</span> is false.</p></li><li><p>The control implements <span class="code">IEnumerable</span> and <span class="code">IEnumerable&lt;T&gt;</span>
so that you can enumerate all of its nodes recursively using a simple for/each loop.  You can also use
<span class="code">TreeNodeEnumerator</span> to enumerate the nodes in one branch and, optionally, its subsequent
siblings.  This saves you from having to write recursive methods to handle child nodes.</p></li><li><p>The <span class="code">SyncParentChildCheckedState</span> property can be set to true to ensure
that the checked state of parent and child nodes is synchronized.</p></li><li><p>An item indexer property is available to retrieve nodes from the tree view by node name.</p></li><li><p>Methods have been added to allow setting or getting the check state of a node by name as well
as for checking and unchecking all nodes in the tree view.</p></li><li><p>The <span class="code">CheckedNodes</span> property can be used to obtain a collection
containing the current set of checked nodes.</p></li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="a3a3d71f-2d20-4506-bab1-638af4a36f4b.htm">Usage Notes</a></div><div><a href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm">Control Tutorials</a></div><div><a href="31916411-7c9d-40b1-a1f5-fef539e21783.htm">License Agreement</a></div><div><a href="4466344c-0933-476c-9743-63008a2d8659.htm">Version History</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Common Features</a></li><li><a class="quickLink">The Radio Button List Control and Its Features</a></li><li><a class="quickLink">The Checkbox List Control and Its Features</a></li><li><a class="quickLink">The Combo Box Controls and Their Features</a></li><li><a class="quickLink">The Data List Controls and Their Features</a></li><li><a class="quickLink">The Data Navigator Control and Its Features</a></li><li><a class="quickLink">The Extended Tree View Control and Its Features</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://github.com/EWSoftware/ListControls" target="_blank" rel="noopener noreferrer">[v2024.12.18.0] Copyright © 2005-2024, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ListControls%20Library%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div id="AdContent" class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="ListControls"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>
<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>DataList Control Tutorial</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="tutorials, DataList" /><meta name="Microsoft.Help.Id" content="2587355f-decc-4d08-85ff-7f8816b0cbfa" /><meta name="Description" content="The DataList control allows you to specify a user control template that is used to display and edit information from a data source similar in nature to the DataList web server control, the subform control or continuous forms detail section in a Microsoft A" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">EWSoftware.ListControls Library Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ca3b503d-654e-4fe6-8ca3-ec3ea8fb9a1a.htm" title="EWSoftware.ListControls Library Documentation" tocid="roottoc">EWSoftware.ListControls Library Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm" title="Control Tutorials" tocid="ce5cb77a-44a9-4629-aec3-6a8435cd8e53">Control Tutorials</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="3af969ee-6757-4660-9cc9-5bd518c24e05.htm" title="CheckBoxList and RadioButtonList Tutorial" tocid="3af969ee-6757-4660-9cc9-5bd518c24e05">CheckBoxList and RadioButtonList Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ea1601a4-68aa-4ad2-92f9-8c78fbf67512.htm" title="Combo Box Controls Tutorial" tocid="ea1601a4-68aa-4ad2-92f9-8c78fbf67512">Combo Box Controls Tutorial</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="2587355f-decc-4d08-85ff-7f8816b0cbfa.htm" title="DataList Control Tutorial" tocid="2587355f-decc-4d08-85ff-7f8816b0cbfa">DataList Control Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8fbf556a-9edc-4071-85ef-6df0d4d13950.htm" title="DataNavigator Control Tutorial" tocid="8fbf556a-9edc-4071-85ef-6df0d4d13950">DataNavigator Control Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a.htm" title="ExtendedTreeView Control Tutorial" tocid="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a">ExtendedTreeView Control Tutorial</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn">DataList Control Tutorial</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic describes the Data List control and its features.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Info">General Information</a></li><li class="outlineSectionEntry"><a href="#RowTemplate">Creating Header, Footer, and Row  Templates</a></li><li class="outlineSectionEntry"><a href="#UseTemplate">Using the Templates</a></li><li class="outlineSectionEntry"><a href="#ChgPolicy">The Data List's Change Policy</a></li><li class="outlineSectionEntry"><a href="#SharedDS">Shared Control Data Sources in Templates</a></li><li class="outlineSectionEntry"><a href="#Totals">Creating Calculated Fields and Footer Totals</a></li><li class="outlineSectionEntry"><a href="#Issues">Known Issues and Their Workarounds</a></li><li class="outlineSectionEntry"><a href="#CommonProblems">Common Problems</a></li></ul></div><div class="collapsibleAreaRegion" id="Info"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />General Information</span></div><div id="ID1RBSection" class="collapsibleSection"><p>The <span class="code">DataList</span> control allows you to specify a user control template that is
used to display and edit information from a data source similar in nature to the <span class="code">DataList</span>
web server control, the subform control or continuous forms detail section in a Microsoft Access form, or the
<span class="code">DataRepeater</span> control from Visual Basic 6.  Figure 1 below identifies the common elements
of the data list control as seen at runtime.</p><div class="mediaCenter"><img alt="DataList Elements" src="../media/DataList.jpg" /><div class="caption"><span class="captionLead">Figure 1:
						</span>
						The <span class="code">DataList</span> Control Elements
					</div></div><p>To use the <span class="code">DataList</span> control, simply drag the control from the toolbox,
drop it on the form, and use the <strong>Properties</strong> window to adjust its settings.</p><p>The properties in the <strong>Appearance</strong> category allow you to hide the row
headers or adjust their width and color, hide all of the navigation controls or just the Add and Delete buttons,
hide the separator between rows or adjusted its size and color, etc.</p><p>The properties in the <strong>Behavior</strong> category can be used to specify whether or
not additions, edits, or deletions are allowed to the data source, the shortcut keys to use for deleting a row,
moving to the new row, jumping to the row number navigation text box, or switching between sections, and setting
the repeat speed for the Next and Previous navigation buttons.</p><p>The control supports the same complex data sources that any other standard .NET control can use
(i.e. data sets, data views, data tables, arrays, etc).  To assign a data source and edit its contents, you must
set the <span class="code">RowTemplate</span> and the <span class="code">DataSource</span> properties. You may also
need to set the <span class="code">DataMember</span> property if the source contains multiple items to which the
data list can bind (i.e. a <span class="code">DataSet</span>).  If you assign these properties in code, always
assign the <span class="code">DataSource</span> property last to improve performance.  This is true of all .NET
controls as assigning a new display or value member forces the control to reevaluate its data source. By
assigning the data source last, it will only have to evaluate the data source once.  The
<span class="code">RowTemplate</span> property defines the template to use for the rows in the data source.  This
property cannot be set at design-time and is specified using code instead.  The optional
<span class="code">HeaderTemplate</span> and <span class="code">FooterTemplate</span> properties used to define
the header and footer controls are also set using code.</p><p>Each row in the data list will have its own binding context.  As such, it is possible to share a
data source for combo box controls, etc across all row templates and still allow each row to select unique values
from it.  The header and footer templates inherit the data list's binding context so that they can stay in synch
with its data source as you move from row to row.</p><p>Unlike the standard .NET list controls, all of the controls in the
<span class="code">EWSoftware.ListControls</span> namespace allow you to index their data source to extract
values.  This allows you to obtain the value of a field in the currently selected row or a field in any row even
if it is not the selected row and regardless of whether or not the field is displayed in the template.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAIAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAIAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAIAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Get the last name from the current row</span>
<span class="highlight-keyword">string</span> lastName = (<span class="highlight-keyword">string</span>)dlPeople[<span class="highlight-literal">"LastName"</span>];

<span class="highlight-comment">// Get the age from the sixth row</span>
<span class="highlight-keyword">int</span> age = (<span class="highlight-keyword">int</span>)dlPeople[<span class="highlight-number">5</span>, <span class="highlight-literal">"Age"</span>];</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAIAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAIAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAIAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAIAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAIAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Get the last name from the current row</span>
<span class="highlight-keyword">Dim</span> lastName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-keyword">CType</span>(dlPeople(<span class="highlight-literal">"LastName"</span>), <span class="highlight-keyword">String</span>)

<span class="highlight-comment">' Get the age from the sixth row</span>
<span class="highlight-keyword">Dim</span> age <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-keyword">CType</span>(dlPeople(<span class="highlight-number">5</span>, <span class="highlight-literal">"Age"</span>), <span class="highlight-keyword">Integer</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAIAAA");</script></div><div class="collapsibleAreaRegion" id="RowTemplate"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Header, Footer, and Row  Templates</span></div><div id="ID2RBSection" class="collapsibleSection"><p>The header, footer, and row template controls used by the <span class="code">DataList</span> are all
derived from the supplied <span class="code">TemplateControl</span> class.  The process for creating them is
almost identical for all three types but there are some differences in how they are utilized.  Row templates are
initialized and bound as they are scrolled into view.  One row template is created for each row in the data
source.  As such, you are free to have per-row settings and formatting such as color coding the rows or controls
based on the values in the row etc.  Header and footer templates are created and initialized immediately when a
data source is specified.  They are also bound to the data source as a whole.  As you move through the data
source, any bound controls in the header and footer will update to reflect the values in the row selected in the
details section of the data list.</p><p>There is no way to create and design header, detail, and footer templates together as part of the
<span class="code">DataList</span> control on a form at design-time.  Instead, each template is created and edited
as a separate user control within Visual Studio just like any other user control.  The template type is then
assigned to a property on the data list using code.  To create a new template control, follow these steps:</p><ol><li><p>Right click on the project in the <strong>Solution Explorer</strong>, select
<strong>Add</strong>, <strong>Add User Control</strong>, enter a name for the new user control,
and click <strong>Open</strong> to add it to the project.</p></li><li><p>Open the new user control in the designer and view the code for it.</p></li><li><p>Change the base class of the user control to <span class="code">EWSoftware.ListControls.TemplateControl</span>.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABGAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABGAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABGAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABGAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> AddressRow : EWSoftware.ListControls.TemplateControl</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABGAAHAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAGAAHAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAGAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAGAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAGAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> AddressRow
  <span class="highlight-keyword">Inherits</span> EWSoftware.ListControls.TemplateControl</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAGAAHAAA");</script></li><li><p>For a row template, it is strongly suggested that you use the deferred initialization technique
described next.  Row templates are bound and initialized as they are scrolled into view.  By deferring
initialization, the data list loads much faster when first displayed and will not consume resources until needed
when viewing large data sets.  Header and footer templates are always initialized as soon as they are created so
there is no need to use this technique for them.  The first step in deferring initialization is to modify the
constructor to suppress the call to the <span class="code">InitializeComponent</span> method unless it is made at
design-time.  This is done by using an <span class="code">if</span> statement as shown here:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEFAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEFAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEFAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEFAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> AddressRow()
{
    <span class="highlight-comment">// This call is required by the Windows.Forms Form Designer.</span>
    <span class="highlight-comment">// At runtime, actual initialization is deferred until needed.</span>
    <span class="highlight-keyword">if</span>(<span class="highlight-keyword">this</span>.DesignMode)
        InitializeComponent();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEFAAHAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADFAAHAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADFAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADFAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADFAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
    <span class="highlight-comment">' This call is required by the Windows.Forms Form Designer.</span>
    <span class="highlight-comment">' At runtime, actual initialization is deferred until needed.</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Me</span>.DesignMode = <span class="highlight-keyword">True</span> <span class="highlight-keyword">Then</span>
        InitializeComponent()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADFAAHAAA");</script><p>The last step is to add an override for the <span class="code">InitializeTemplate</span> method.
This is when <span class="code">InitializeComponent</span> is called to actually create the controls contained in
the template.  This override can also be used to set the data sources on combo boxes, list boxes, etc, and to
check the data list's change policy to see if controls need to be disabled, etc.  The base implementation does
nothing so there is no need to call it.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABFAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABFAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABFAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABFAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Actual initialization is deferred until needed to save</span>
<span class="highlight-comment">// time and resources.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> InitializeTemplate()
{
    <span class="highlight-comment">// Create the contained controls</span>
    <span class="highlight-keyword">this</span>.InitializeComponent();

    <span class="highlight-comment">// Use the shared data source for the combo box</span>
    cboState.DisplayMember = cboState.ValueMember = <span class="highlight-literal">"State"</span>;
    cboState.DataSource = (DataView)<span class="highlight-keyword">this</span>.TemplateParent.SharedDataSources[<span class="highlight-literal">"States"</span>];

    <span class="highlight-comment">// Update control states based on the parent's change policy.</span>
    <span class="highlight-comment">// This can be omitted if you do not need it.</span>
    <span class="highlight-keyword">this</span>.ChangePolicyModified();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABFAAHAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAFAAHAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAFAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAFAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAFAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Actual initialization is deferred until needed to save</span>
<span class="highlight-comment">' time and resources.</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> InitializeTemplate()
    <span class="highlight-comment">' Create the contained controls</span>
    <span class="highlight-keyword">Me</span>.InitializeComponent()

    <span class="highlight-comment">' Use the shared data source for the combo box</span>
    cboState.DisplayMember = <span class="highlight-literal">"State"</span>
    cboState.ValueMember = <span class="highlight-literal">"State"</span>
    cboState.DataSource = <span class="highlight-keyword">CType</span>(<span class="highlight-keyword">Me</span>.TemplateParent.SharedDataSources(<span class="highlight-literal">"States"</span>), DataView)

    <span class="highlight-comment">' Update control states based on the parent's change policy.</span>
    <span class="highlight-comment">' This can be omitted if you do not need it.</span>
    <span class="highlight-keyword">Me</span>.ChangePolicyModified()
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAFAAHAAA");</script></li><li><p>Add controls to the template and any required event handlers for them as you would for any
other user control.  You can also define public properties and methods if necessary to let forms containing the
data list utilizing the template make changes to it, etc.</p><p>Normal <span class="code">Label</span> controls do not respond to mouse clicks.  As such,
clicking on a label in a row will not give the row the focus.  Clicking on any other control type will give it
the focus.  If you would like to be able to click on labels to select a row, use the supplied
<span class="code">ClickableLabel</span> control. It is identical to the standard label control but when clicked
with the mouse, it will give the focus to the first tab-stop-enabled control following it in the tab order.  If
the control is disabled or one is not found, it simply gives the parent row template the focus instead.  The
<span class="code">ClickableLabel</span> can be used on normal forms and user controls as well.</p></li><li><p>View the code for the user control and add an override for the <span class="code">Bind</span>
method.  This is a required override so you must add it even if you have no bound controls (a header or footer
might not have any).  In such cases, override it and leave the method body empty.  Do not call the base
implementation of <span class="code">Bind</span> as it does nothing but throw an exception reminding you to
override it.</p><p>In the <span class="code">Bind</span> method, you will add code to clear and then create the
data bindings for controls that you will use to edit information in the template's row source.  Templates may get
re-bound under may different circumstances.  As such, the <span class="code">DataBindings</span> collection on all
bound controls must be cleared before you add the new bindings.  If you do not, it will generate a runtime
exception that complains about duplicate bindings.  To simplify this process, it is suggested that you use the
template control's overloaded <span class="code">AddBinding</span> method as shown in the example below.  This
greatly reduces the amount of code you have to write in order to clear and recreate the bindings.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACDAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACDAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACDAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACDAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Bind the controls to their data source</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Bind()
{
    <span class="highlight-keyword">this</span>.AddBinding(txtFName, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"FirstName"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(txtLName, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"LastName"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(txtAddress, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Address"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(txtCity, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"City"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(cboState, <span class="highlight-literal">"SelectedValue"</span>, <span class="highlight-literal">"State"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(txtZip, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Zip"</span>);
    <span class="highlight-keyword">this</span>.AddBinding(udcSumValue, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"SumValue"</span>);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACDAAHAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABDAAHAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABDAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABDAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABDAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Bind the controls to their data source</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Bind()
    <span class="highlight-keyword">Me</span>.AddBinding(txtFName, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"FirstName"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(txtLName, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"LastName"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(txtAddress, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Address"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(txtCity, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"City"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(cboState, <span class="highlight-literal">"SelectedValue"</span>, <span class="highlight-literal">"State"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(txtZip, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Zip"</span>)
    <span class="highlight-keyword">Me</span>.AddBinding(udcSumValue, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"SumValue"</span>)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABDAAHAAA");</script><p>As mentioned, <span class="code">AddBinding</span> is overloaded.  The example above uses the
version that clears all existing bindings and adds the requested binding. Other versions will let you add
additional bindings to a control without clearing the current bindings and also specify optional
<span class="code">Format</span> and <span class="code">Parse</span> event handlers for the bindings.</p></li><li><p>If the template will be used in a data list that can have a variable change policy (i.e. it
might allow edits or it might not), you may need to override the <span class="code">ChangePolicyModified</span>
method to update the state of controls in the template based on the new policy.  This method is called by the
data list on rows that have been initialized and bound whenever its change policy is modified after the data
source has been specified.  Note that you may also need to call this method from the
<span class="code">InitializeTemplate</span> method to set the state of controls when a row is initialized after
being scrolled into view or when the data source changes.  The base implementation does nothing so there is no
need to call it.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABCAAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABCAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABCAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABCAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Enable or disable the controls based on the edit policy.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> ChangePolicyModified()
{
    <span class="highlight-keyword">if</span>(<span class="highlight-keyword">this</span>.TemplateParent.AllowEdits != txtFName.Enabled &amp;&amp; !<span class="highlight-keyword">this</span>.IsNewRow)
    {
        txtFName.Enabled = txtLName.Enabled = txtAddress.Enabled = txtCity.Enabled =
            cboState.Enabled = txtZip.Enabled = <span class="highlight-keyword">this</span>.TemplateParent.AllowEdits;
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABCAAHAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAACAAHAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAACAAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAACAAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAACAAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Enable or disable the controls based on the edit policy.</span>
<span class="highlight-keyword">Public</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> ChangePolicyModified()
    <span class="highlight-keyword">Dim</span> allowEdits <span class="highlight-keyword">As</span> <span class="highlight-keyword">Me</span>.TemplateParent.AllowEdits

    <span class="highlight-keyword">If</span> allowEdits &lt;&gt; txtFName.Enabled <span class="highlight-keyword">And</span> <span class="highlight-keyword">Me</span>.IsNewRow = <span class="highlight-keyword">False</span> <span class="highlight-keyword">Then</span>
        txtFName.Enabled = allowEdits
        txtLName.Enabled = allowEdits
        txtAddress.Enabled = allowEdits
        txtCity.Enabled = allowEdits
        cboState.Enabled = allowEdits
        txtZip.Enabled = allowEdits
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAACAAHAAA");</script></li><li><p>If rows can be deleted from the data source, you can override the template's
<span class="code">CanDelete</span> property to allow it to permit or deny the deletion based on conditions that
you set such as getting a confirmation from the user.  The row being deleted is always given the first chance to
deny the deletion.  If the row allows it, the data list raises its <span class="code">DeletingRow</span> event to
let the containing form have a chance to permit or deny the deletion.</p><p>There are advantages to putting delete confirmations within the template.  It has direct access
to its controls so it is easier to perform any necessary validation prior to allowing the deletion.  If the
template is used in many forms, it also saves you from having to add an event handler for the data list's
<span class="code">DeletingRow</span> event in each one.</p></li><li><p>If you need validation in your row template, add an event handler for the template's
<span class="code">Validating</span> event.  By performing all of your validation in this event, you ensure that
the row cannot be left if it is in an invalid state. The data list will raise this event on the current row
template whenever it is needed.  The demo application contains an example.</p></li></ol></div><div class="collapsibleAreaRegion" id="UseTemplate"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Using the Templates</span></div><div id="ID3RBSection" class="collapsibleSection"><p>Once the templates have been created, you can assign their type to the appropriate property on the
<span class="code">DataList</span> control as shown below.  This is usually done in the form's constructor or when
the data source is assigned to the data list.  You can assign the templates to the properties individually or in
conjunction with the data source using the <span class="code">SetDataBinding</span> method.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Set the properties individually</span>
dlAddresses.RowTemplate = <span class="highlight-keyword">typeof</span>(AddressRow);
dlAddresses.HeaderTemplate = <span class="highlight-keyword">typeof</span>(AddressHeader);
dlAddresses.FooterTemplate = <span class="highlight-keyword">typeof</span>(AddressFooter);
dlAddresses.DataMember = <span class="highlight-literal">"Addresses"</span>;
dlAddresses.DataSource = dsAddresses;

<span class="highlight-comment">// Set the row template with the data source</span>
dlAddresses.SetDataBinding(dsAddresses, <span class="highlight-literal">"Addresses"</span>, <span class="highlight-keyword">typeof</span>(AddressRow));

<span class="highlight-comment">// Set all three templates along with the data source</span>
dlAddresses.SetDataBinding(dsAddresses, <span class="highlight-literal">"Addresses"</span>, <span class="highlight-keyword">typeof</span>(AddressRow),
    <span class="highlight-keyword">typeof</span>(AddressHeader), <span class="highlight-keyword">typeof</span>(AddressFooter));

<span class="highlight-comment">// This example specifies the table without going through the data set</span>
dlAddresses.SetDataBinding(dsAddresses.Tables[<span class="highlight-number">0</span>], <span class="highlight-keyword">null</span>, <span class="highlight-keyword">typeof</span>(AddressRow));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEAGAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAGAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Set the template types individually</span>
dlAddresses.RowTemplate = <span class="highlight-keyword">GetType</span>(AddressRow)
dlAddresses.HeaderTemplate = <span class="highlight-keyword">GetType</span>(AddressHeader)
dlAddresses.FooterTemplate = <span class="highlight-keyword">GetType</span>(AddressFooter)
dlAddresses.DataMember = <span class="highlight-literal">"Addresses"</span>
dlAddresses.DataSource = dsAddresses

<span class="highlight-comment">' Set the row template with the data source</span>
dlAddresses.SetDataBinding(dsAddresses, <span class="highlight-literal">"Addresses"</span>, <span class="highlight-keyword">GetType</span>(AddressRow))

<span class="highlight-comment">' Set all three templates along with the data source</span>
dlAddresses.SetDataBinding(dsAddresses, <span class="highlight-literal">"Addresses"</span>, <span class="highlight-keyword">GetType</span>(AddressRow),
    <span class="highlight-keyword">GetType</span>(AddressHeader), <span class="highlight-keyword">GetType</span>(AddressFooter))

<span class="highlight-comment">' This example specifies the table without going through the data set</span>
dlAddresses.SetDataBinding(dsAddresses.Tables(<span class="highlight-number">0</span>), <span class="highlight-keyword">Nothing</span>, <span class="highlight-keyword">GetType</span>(AddressRow))</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAGAAA");</script><p>Once the data source and row template are assigned, you can use the data list to edit information
in the data source.  Before you save changes to the data source, it is important to call the
<span class="code">CommitChanges</span> method on the data list control so that it can commit any pending changes
(i.e. data in the form controls that has not yet been pushed into the data source).  You can also check the
<span class="code">HasChanges</span> property to see if any changes were made. Using the <span class="code">HasChanges</span>
property automatically commits any pending changes.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAGAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnSave_Click(<span class="highlight-keyword">object</span> sender, System.EventArgs e)
{
    <span class="highlight-comment">// We must commit any pending changes</span>
    dlList.CommitChanges();

    daAddresses.Update(dsAddresses);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAGAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAGAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAGAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAGAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAGAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> btnSave_Click(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> System.EventArgs)
    <span class="highlight-comment">' We must commit any pending changes</span>
    dlList.CommitChanges()

    daAddresses.Update(dsAddresses)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAGAAA");</script></div><div class="collapsibleAreaRegion" id="ChgPolicy"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The Data List's Change Policy</span></div><div id="ID4RBSection" class="collapsibleSection"><p>The <span class="code">DataList</span> control has three properties that allow you to specify
whether additions, edits, or deletes are allowed to be made to the data source (<span class="code">AllowAdditions</span>,
<span class="code">AllowEdits</span>, and <span class="code">AllowDeletes</span>).  All three properties default to
true.  However, when a data source is assigned to the data list, these properties may be updated to reflect the
change policy of the data source.  For example, if the data source does not allow additions, the
<span class="code">AllowAdditions</span> property will also be set to false.  Likewise, you can set the properties
to false to disallow the associated modification even if the underlying data source allows it.</p><p>The data list will automatically adjust its behavior when additions are not allowed by hiding the
new row placeholder and disabling the Add button in the navigation controls.  When deletions are not allowed, it
disables the Delete button in the navigation controls.  The shortcut keys for both operations are also ignored
when their associated behavior is not allowed.  The data list and the template controls cannot handle the
<span class="code">AllowEdits</span> setting by themselves.  It is up to you to add code to your templates to
check the change policy as needed and disable the controls if edits are not allowed. The demo application
contains an example of this.  As shown in the demo, it is possible to disable edits but still allow additions.
In this situation, new rows can be added and edited but any existing rows are read-only.</p><p>The data list also raises a <span class="code">NoRows</span> event when a data source is assigned
that contains no rows or when the last row is deleted.  You can use this event to disable edit controls in the
header and footer until a new row is added and/or display a message asking the user to add a new row.</p></div><div class="collapsibleAreaRegion" id="SharedDS"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Shared Control Data Sources in Templates</span></div><div id="ID5RBSection" class="collapsibleSection"><p>When a template contains other controls with data sources such as combo boxes, list boxes, etc, it
can be expensive to create and load the data source for each control in every row template.  However, each
template has its own binding context so it is much more efficient to share a common data source amongst all
templates for those controls.  Because of its unique binding context, the controls in each row can be set
independently of each other without any conflicts while sharing a common data source.  To implement a shared data
source for the controls in a template, follow these steps.</p><ol><li><p>In forms that contain a data list that utilizes the template, create and store the data source
in the data list's <span class="code">SharedDataSources</span> property.  This is a simple hash table that is used
to store shared data sources for templates by key name.  For example:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACBAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACBAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACBAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACBAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> DataListTestForm()
{
    <span class="highlight-comment">// ... Other constructor code ...</span>

    <span class="highlight-comment">// Load the state codes for the row template's shared data source</span>
    OleDbDataAdapter daStates = <span class="highlight-keyword">new</span> OleDbDataAdapter(
        <span class="highlight-literal">"Select State, StateDesc From States"</span>, dbConn);

    DataTable dtStates = <span class="highlight-keyword">new</span> DataTable();
    daStates.Fill(dtStates);
    dlList.SharedDataSources.Add(<span class="highlight-literal">"States"</span>, dtStates.DefaultView);

    <span class="highlight-comment">// ... Other constructor code ...</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACBAAEAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABBAAEAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABBAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABBAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABBAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
    <span class="highlight-comment">' ... Other constructor code ...</span>

    <span class="highlight-comment">' Load the state codes for the row template's shared data source</span>
    <span class="highlight-keyword">Dim</span> daStates <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> OleDbDataAdapter(
        <span class="highlight-literal">"Select State, StateDesc From States"</span>, dbConn)

    <span class="highlight-keyword">Dim</span> dtStates <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> DataTable()
    daStates.Fill(dtStates)
    dlList.SharedDataSources.Add(<span class="highlight-literal">"States"</span>, dtStates.DefaultView)

    // ... Other constructor code ...
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABBAAEAAA");</script><p>This can be done in the form's constructor or at any point prior to assigning the template to
the data list control.  Always store the shared data source before assigning the template to the data list.
This is especially true for header and footer templates as they are created and initialized when assigned and
will not see the data source if you set it after assigning them to the data list.</p></li><li><p>In the <span class="code">InitializeTemplate</span> override for the template, add code to set
the data source on the controls that need it by retrieving the data source from the parent data list's
<span class="code">SharedDataSources</span> property using the appropriate key name. For example:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAAAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> InitializeTemplate()
{
    <span class="highlight-comment">// Create the contained controls</span>
    <span class="highlight-keyword">this</span>.InitializeComponent();

    <span class="highlight-comment">// Use the shared data source for the combo box</span>
    cboState.DisplayMember = cboState.ValueMember = <span class="highlight-literal">"State"</span>;
    cboState.DataSource = (DataView)<span class="highlight-keyword">this</span>.TemplateParent.SharedDataSources[<span class="highlight-literal">"States"</span>];
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAAAEAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAAEAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> InitializeTemplate()
    <span class="highlight-comment">' Create the contained controls</span>
    <span class="highlight-keyword">Me</span>.InitializeComponent();

    <span class="highlight-comment">' Use the shared data source for the combo box</span>
    cboState.DisplayMember = <span class="highlight-literal">"State"</span>
    cboState.ValueMember = <span class="highlight-literal">"State"</span>
    cboState.DataSource = <span class="highlight-keyword">CType</span>(<span class="highlight-keyword">Me</span>.TemplateParent.SharedDataSources(<span class="highlight-literal">"States"</span>), DataView)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAAEAAA");</script></li></ol></div><div class="collapsibleAreaRegion" id="Totals"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating Calculated Fields and Footer Totals</span></div><div id="ID6RBSection" class="collapsibleSection"><p>Due to the way that data binding works in .NET, changes to a row are not committed to the data
source unless you move off of the row or call the <span class="code">CommitChanges</span> method.  This may have
an effect on calculated fields in the data source that are displayed in a row template.  For example, if you have
an item quantity, a cost, and a total value field that is computed from the prior two displayed on the template,
changes made to the item quantity or cost will not affect the displayed total value until you move off of the
row.  If you always need to have the most current total displayed, you can add an event handler for the
<span class="code">Leave</span> event on the item quantity and cost controls and in it call the row template's
<span class="code">CommitChanges</span> method.  This will cause the changes to get pushed into the data source
and the total will reflect the new value.  However, this does have the side effect that all other changes to the
row are saved as well and they cannot be undone by hitting the Escape key.  A more acceptable approach might be
to not bind the total column and instead compute and display the total manually in the <span class="code">Leave</span>
event handlers.</p><p>It is also possible to display aggregate values from the data source.  For example, you might want
to display the sum of all values in a field from the data source in the data list's footer.  For read-only data,
this can be accomplished by overriding the footer template's <span class="code">Bind</span> method and computing
the value in it.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Recalculate the footer total when bound</span>
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Bind()
{
    <span class="highlight-comment">// Get the data source from the parent</span>
    DataTable tbl = <span class="highlight-keyword">this</span>.TemplateParent.DataSource <span class="highlight-keyword">as</span> DataTable;

    <span class="highlight-comment">// If not null, compute the sum of the item quantity</span>
    <span class="highlight-keyword">if</span>(tbl != <span class="highlight-keyword">null</span>)
        lblTotal.Text = tbl.Compute(<span class="highlight-literal">"SUM(ItemQty)"</span>, <span class="highlight-keyword">null</span>).ToString();
    <span class="highlight-keyword">else</span>
        lblTotal.Text = <span class="highlight-keyword">null</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEADAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">// Recalculate the footer total <span class="highlight-keyword">when</span> bound
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Bind()
    <span class="highlight-comment">' Get the data source from the parent</span>
    <span class="highlight-keyword">Dim</span> tbl <span class="highlight-keyword">As</span> DataTable = <span class="highlight-keyword">CType</span>(<span class="highlight-keyword">Me</span>.TemplateParent.DataSource, DataTable)

    <span class="highlight-comment">' If not null, compute the sum of the item quantity</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> (tbl <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
        lblTotal.Text = tbl.Compute(<span class="highlight-literal">"SUM(ItemQty)"</span>, <span class="highlight-keyword">Nothing</span>).ToString()
    <span class="highlight-keyword">Else</span>
        lblTotal.Text = <span class="highlight-keyword">Nothing</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEADAAA");</script><p>For a data list that contains editable information, the process requires a few more steps so that
the total remains accurate as the information changes. The following is taken from the demo application which you
can use as a working example.  There may be other methods to accomplish this task but this one works quite well.</p><p>Two private member variables are added to the footer template to track the current data source.  In
the overridden <span class="code">Bind</span> method, when the data source changes, event handlers are connected
to its <span class="code">ListChanged</span>, <span class="code">RowChanged</span> and <span class="code">RowDeleted</span>
events.  The event handlers for those three events compute the total when they are called.  The
<span class="code">ListChanged</span> handler could be used to recompute the total for changes and deletes as well
but it is called frequently and multiple times even for a single change so the <span class="code">RowChanged</span>
and <span class="code">RowDeleted</span> events are more efficient in those two cases.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Used to track the current data source for totaling</span>
<span class="highlight-keyword">private</span> IBindingList bl;
<span class="highlight-keyword">private</span> DataTable tblItems;

<span class="highlight-comment">// We still need to override this even if there are no bound controls.  It's</span>
<span class="highlight-comment">// also the place to hook up event handlers if creating such things as footer</span>
<span class="highlight-comment">// totals, etc.</span>
<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Bind()
{
    <span class="highlight-comment">// The demo uses a data set so we'll get a reference to the table through the list manager</span>
    CurrencyManager cm = <span class="highlight-keyword">this</span>.TemplateParent.ListManager;
    DataTable newSource = ((DataView)cm.List).Table;

    <span class="highlight-comment">// Hook up the events on the data source to keep the total current</span>
    <span class="highlight-keyword">if</span>(newSource != tblItems)
    {
        <span class="highlight-comment">// Disconnect from the old source if necessary</span>
        <span class="highlight-keyword">if</span>(tblItems != <span class="highlight-keyword">null</span>)
        {
            bl.ListChanged -= DataSource_ListChanged;
            tblItems.RowChanged -= DataSource_RowChgDel;
            tblItems.RowDeleted -= DataSource_RowChgDel;
        }

        tblItems = newSource;

        <span class="highlight-keyword">if</span>(tblItems != <span class="highlight-keyword">null</span>)
        {
            <span class="highlight-comment">// For the total, we'll sum it whenever a row is added, changed, or deleted</span>
            bl = (IBindingList)cm.List;
            bl.ListChanged += DataSource_ListChanged;
            tblItems.RowChanged += DataSource_RowChgDel;
            tblItems.RowDeleted += DataSource_RowChgDel;

            <span class="highlight-comment">// Show the initial total</span>
            lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">null</span>).ToString();
        }
        <span class="highlight-keyword">else</span>
            lblTotal.Text = <span class="highlight-keyword">null</span>;
    }
}

<span class="highlight-comment">// Update the total when a row is added</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DataSource_ListChanged(<span class="highlight-keyword">object</span> sender, ListChangedEventArgs e)
{
    <span class="highlight-keyword">if</span>(e.ListChangedType == ListChangedType.ItemAdded)
        lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">null</span>).ToString();
}

<span class="highlight-comment">// Update the total when a row is changed or deleted</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> DataSource_RowChgDel(<span class="highlight-keyword">object</span> sender, DataRowChangeEventArgs e)
{
    lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">null</span>).ToString();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Used to track the current data source for totaling</span>
<span class="highlight-keyword">Private</span> bl <span class="highlight-keyword">As</span> IBindingList
<span class="highlight-keyword">Private</span> tblItems <span class="highlight-keyword">As</span> DataTable

<span class="highlight-comment">' We still need to override this even if there are no bound controls.  It's</span>
<span class="highlight-comment">' also the place to hook up event handlers if creating such things as footer</span>
<span class="highlight-comment">' totals, etc.</span>
<span class="highlight-keyword">Protected</span> <span class="highlight-keyword">Overrides</span> <span class="highlight-keyword">Sub</span> Bind()
    <span class="highlight-comment">' The demo uses a data set so we'll get a reference to the table through the list manager</span>
    <span class="highlight-keyword">Dim</span> cm <span class="highlight-keyword">As</span> CurrencyManager = <span class="highlight-keyword">Me</span>.TemplateParent.ListManager
    <span class="highlight-keyword">Dim</span> newSource <span class="highlight-keyword">As</span> DataTable = <span class="highlight-keyword">CType</span>(cm.List, DataView).Table

    <span class="highlight-comment">' Hook up the events on the data source to keep the total current</span>
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> newSource.Equals(tblItems) <span class="highlight-keyword">Then</span>
        <span class="highlight-comment">' Disconnect from the old source if necessary</span>
        <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> (tblItems <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
            <span class="highlight-keyword">RemoveHandler</span> bl.ListChanged, <span class="highlight-keyword">AddressOf</span> DataSource_ListChanged
            <span class="highlight-keyword">RemoveHandler</span> tblItems.RowChanged, <span class="highlight-keyword">AddressOf</span> DataSource_RowChgDel
            <span class="highlight-keyword">RemoveHandler</span> tblItems.RowDeleted, <span class="highlight-keyword">AddressOf</span> DataSource_RowChgDel
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

        tblItems = newSource

        <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> (tblItems <span class="highlight-keyword">Is</span> <span class="highlight-keyword">Nothing</span>) <span class="highlight-keyword">Then</span>
            <span class="highlight-comment">' For the total, we'll sum it whenever a row is added, changed, or deleted</span>
            bl = <span class="highlight-keyword">CType</span>(cm.List, IBindingList)
            <span class="highlight-keyword">AddHandler</span> bl.ListChanged, <span class="highlight-keyword">AddressOf</span> DataSource_ListChanged
            <span class="highlight-keyword">AddHandler</span> tblItems.RowChanged, <span class="highlight-keyword">AddressOf</span> DataSource_RowChgDel
            <span class="highlight-keyword">AddHandler</span> tblItems.RowDeleted, <span class="highlight-keyword">AddressOf</span> DataSource_RowChgDel

            <span class="highlight-comment">' Show the initial total</span>
            lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">Nothing</span>).ToString()
        <span class="highlight-keyword">Else</span>
            lblTotal.Text = <span class="highlight-keyword">Nothing</span>
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' Update the total when a row is added</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> DataSource_ListChanged(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> ListChangedEventArgs)
    <span class="highlight-keyword">If</span> e.ListChangedType = ListChangedType.ItemAdded <span class="highlight-keyword">Then</span>
        lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">Nothing</span>).ToString()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>

<span class="highlight-comment">' Update the total when a row is changed or deleted</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> DataSource_RowChgDel(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> DataRowChangeEventArgs)
    lblTotal.Text = tblItems.Compute(<span class="highlight-literal">"Sum(SumValue)"</span>, <span class="highlight-keyword">Nothing</span>).ToString()
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="Issues"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Known Issues and Their Workarounds</span></div><div id="ID7RBSection" class="collapsibleSection"><p>A couple of issues have been discovered that require workarounds:</p><p>The <span class="code">Click</span> event for buttons in a row template may fire even if validation
fails in another row or container control keeping the focus in the other row or container control.  This appears
to be a bug in how the button control raises its click event after validation.  The workaround is to add a check
to see if the row template contains the focus as the first thing in the button's event handler.  For example:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnDelete_Click(<span class="highlight-keyword">object</span> sender, System.EventArgs e)
{
    <span class="highlight-keyword">if</span>(<span class="highlight-keyword">this</span>.ContainsFocus)
        <span class="highlight-keyword">this</span>.DeleteRow();
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABACAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> btnDelete_Click(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> System.EventArgs)
    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Me</span>.ContainsFocus <span class="highlight-keyword">Then</span>
        <span class="highlight-keyword">Me</span>.DeleteRow()
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">SUb</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABACAAA");</script><p>When using two or more <span class="code">DataList</span> controls that display related information
from the same data set (i.e. a master/detail view), you cannot edit the key fields that are used to relate the
two data sources in the master's data source.  The data binding behavior of .NET is such that when the keys are
edited, it treats the change as a deletion and an insertion which causes a rebind in the related data list and
this can result in problems when moving from one data list control to the other.  The workaround is to add a
temporary auto-increment key to the data sources and use that to relate the data.  Since they are no longer used
in the relationship, the real key fields can then be edited in the master data source.  If you do not show or do
not edit the relationship key fields then this is not a problem.  Please request technical support if you require
a more detailed example of how to accomplish this.</p></div><div class="collapsibleAreaRegion" id="CommonProblems"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Common Problems</span></div><div id="ID8RBSection" class="collapsibleSection"><p>Here are some common problems and their solutions that you may run into when developing template
controls for the data list.  The .NET Framework tends to hide some exceptions caused by binding errors such that
they cannot be caught by your application.  In those cases, the <span class="code">DataList</span> will dump
diagnostic information to the debug output window in Visual Studio when your application is running under the
control of the debugger.  If you are experiencing behavior as noted below, check there to see if it shows the
source of the problem.</p><ul><li><p>Forgetting to override the <span class="code">InitializeTemplate</span> method or not calling
<span class="code">InitializeComponent</span> when using deferred initialization.  If you are using deferred
initialization, be sure that you override the <span class="code">InitializeTemplate</span> method and call the
standard <span class="code">InitializeComponent</span> method from it so that all of the controls are created and
initialized.</p></li><li><p>Calling <span class="code">InitializeComponent</span> from the constructor at runtime and from
the <span class="code">InitializeTemplate</span> override.  This will create duplicate controls and it will appear
as if data binding is not working as nothing shows up in the controls.  If using deferred initialization,
suppress the call to <span class="code">InitializeComponent</span> in the constructor as shown earlier and call it
from <span class="code">InitializeTemplate</span> instead.  If not using deferred initialization, call it from the
constructor and make sure it is not being called again in the <span class="code">InitializeTemplate</span>
override.</p></li><li><p>Forgetting to specify the template type.  If a header or footer does not show up or no rows
appear, check to be sure that you specified the correct template type and assigned it to the data list's
<span class="code">RowTemplate</span>, <span class="code">HeaderTemplate</span>, and/or <span class="code">FooterTemplate</span>
property.</p></li><li><p>Forgetting to override the <span class="code">Bind</span> method.  All template controls must
override the <span class="code">Bind</span> method even if there are no bound controls (i.e. header and footer
templates).  If a header or footer does not show up or no rows appear, check the debug output window in the
debugger for a message similar to this one:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABHAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABHAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABHAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">**** [dlAddresses]: Exception occurred in BindData (1): The TemplateControl.Bind
method must be overridden in derived type 'AddressRow'</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABHAABAAA");</script><p>The offending control name appears in brackets at the start of the message and the template
type is given at the end of the message.</p></li><li><p>Forgetting to clear the data bindings.  If you forget to clear the data bindings and a row
template is re-bound, you will see an exception that states that binding to the given property would create a
duplicate binding which is not allowed.  Check to be sure that you have cleared the <span class="code">DataBindings</span>
collection on all controls in the template in the <span class="code">Bind</span> method.  This problem can be
avoided by using the template control's overloaded <span class="code">AddBinding</span> method.</p></li><li><p>General binding errors.  These types of errors include forgetting to bind a control to a field
in the row source, misspelling the property name or field name when creating the binding, or perhaps not
including the field in the row source.  Binding errors may generate an error message in the debug output window
so always check there if you experience odd behavior but no exception is thrown.  It will look similar to the
following:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEFAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEFAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEFAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">**** [dlAddresses]: Exception occurred in BindData (1): [exception details]</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEFAABAAA");</script><p>The offending control name appears in brackets at the start of the message and the exception
details follow at the end of the message.  The details may be generic such as a null reference exception or more
detailed such as telling you which binding failed.</p><p>When using a <span class="code">DataSet</span> as the data source for the data list control, be
sure to use fully qualified member names in any bindings in the header and footer controls.  The header and
footer controls are bound to the data source rather than an individual row and as such need the data member name
specified in any data bindings.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABFAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABFAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABFAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABFAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// The demo uses a data set so we need to use the fully qualified field name for</span>
<span class="highlight-comment">// the header control as it is bound to the data source as a whole.</span>
<span class="highlight-keyword">this</span>.AddBinding(lblKey, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Addresses.ID"</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABFAABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAFAABAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAFAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAFAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAFAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' The demo uses a data set so we need to use the fully qualified field name for</span>
<span class="highlight-comment">' the header control as it is bound to the data source as a whole.</span>
<span class="highlight-keyword">Me</span>.AddBinding(lblKey, <span class="highlight-literal">"Text"</span>, <span class="highlight-literal">"Addresses.ID"</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAFAABAAA");</script></li><li><p>Accidentally binding two controls to the same field in the row source.  This problem will not
usually generate any exceptions but may cause unexpected behavior such as one control assuming the value of
another control when you make changes in the first control or a control losing its value when it loses the focus.
Check the data bindings in the <span class="code">Bind</span> method to ensure that they are binding to the
correct fields and the correct properties in each control.</p></li><li><p>Not setting a unique binding context on controls that share a common data source within the
same template.  As noted earlier, each row template has its own binding context so controls in each one can share
a common data source without conflicts (i.e. a combo box in each row can re-use a common data source for its
items).  However, as with any other form or user control, controls within the same template that share a common
data source must have their own binding context.  For example, if you have two combo boxes on a template that
share the same data source for their items, assign a new binding context to the <span class="code">BindingContext</span>
property in one or both of the combo boxes so that each can be set independently of the other within the same
row.</p></li><li><p>Setting a shared data source for the template's list controls after the template has been
assigned to the data list control.  If this occurs, the controls in the template (combo boxes, list boxes, etc),
may not show any items or will generate a null reference exception.  Be sure to set the shared data sources for
such controls before assigning the template to the data list control.  Also be sure to use the same key name so
that the correct data source is retrieved from the data list's <span class="code">SharedDataSources</span>
property.</p></li><li><p>Forgetting to call <span class="code">CommitChanges</span> before saving the data source.  If
you save your data source (i.e. call <span class="code">Update</span> on a data adapter) but some changes are
missing, it could be that the information has not yet made it into the data source.  Be sure to call the
<span class="code">CommitChanges</span> method on the data list or check the <span class="code">HasChanges</span>
property to ensure that any pending edits are pushed into the data source.</p></li><li><p>Up/down controls such as <span class="code">NumericUpDown</span> will not save their changes to
the data source.  There is a bug in the .NET up/down controls that causes them to not commit their changes when
the <span class="code">Value</span> property is bound to the data source and you use the text box portion of the
control to edit the value.  The workaround is to bind the up/down control's <span class="code">Text</span>
property to the data source instead.</p></li></ul></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm">Control Tutorials</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="https://github.com/EWSoftware/ListControls" target="_blank">[v2015.1.27.0] Copyright © 2005-2015, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ListControls Library Documentation">Eric@EWoodruff.us</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>
<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>CheckBoxList and RadioButtonList Tutorial</title><meta name="Title" content="CheckBoxList and RadioButtonList Tutorial" /><meta name="Help.Id" content="3af969ee-6757-4660-9cc9-5bd518c24e05" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="3af969ee-6757-4660-9cc9-5bd518c24e05" /><meta name="Description" content="The CheckBoxList and RadioButtonList are quite similar with regard to creation and usage. Simply drag the control from the toolbox, drop it on the form, and use the Properties window to adjust its settings." /><meta name="tocFile" content="../toc/IDD.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">EWSoftware.ListControls Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>CheckBoxList and RadioButtonList Tutorial</h1><div><p>This topic describes the Radio Button List control and its features.</p><ul class="is-hidden-tablet"><li><a href="#Features">Common Features</a></li><li><a href="#RBList">RadioButtonList Usage</a></li><li><a href="#CKBList">CheckBoxList Usage</a></li><li><a href="#RBLBinding">RadioButtonList Data Binding</a></li><li><a href="#CBLBinding">CheckBoxList Data Binding</a></li></ul></div><h2 id="Features" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Common Features</h2><div id="IDBABSection"><p>The <span class="code">CheckBoxList</span> and <span class="code">RadioButtonList</span> are quite
similar with regard to creation and usage.  Simply drag the control from the toolbox, drop it on the form, and
use the <strong>Properties</strong> window to adjust its settings.  For simple lists, you can enter text
strings in the designer by selecting the <span class="code">Items</span> property and entering the values one per
line in the collection editor.  When items are added directly to the <span class="code">Items</span> collection,
the <span class="code">SortOrder</span> property can be used to sort the items in ascending or descending order.
The default sort order is <span class="code">None</span>.</p><p>A simple <span class="code">ListItem</span> object is supplied that can be used with an array list
as the data source for the list controls.  It contains a <span class="code">Display</span> property for the
display text and a <span class="code">Value</span> property for the value of the item.  The demo application
contains examples of its use.</p><p>The controls also support the same complex data sources that any other standard .NET control can
use (i.e. data sets, data views, data tables, arrays, etc).  To assign a more complex data source, you can set
the <span class="code">DisplayMember</span>, <span class="code">ValueMember</span>, and <span class="code">DataSource</span>
properties.  If assigning these three properties in code, always assign the <span class="code">DataSource</span>
property last to improve performance.  This is true of all .NET controls as assigning a new display or value
member forces the control to reevaluate its data source.  By assigning the data source last, it will only have to
evaluate the data source once.</p><p>The properties in the <strong>Appearance</strong> category can be used to alter the visual
style of the control.  The <span class="code">LayoutMethod</span> property allows you to define how the buttons
within the control are laid out (single column, single row, down then across, or across and then down).  You can
also specify an image list and define how the buttons, text, and images are aligned.  The
<span class="code">RadioButtonList</span> and <span class="code">CheckBoxList</span> controls are Windows XP
theme-aware.</p><p>The properties in the <strong>Title</strong> category can be used to specify a title that
appears on the top border of the control.  You can adjust its font and the colors used to display the title text.</p><p>Both controls have an <span class="code">EnforceDefaultSelection</span> property that allows you to
specify whether a default selection will be set if an attempt is made to set the selected index to -1.  When set
to true, the item specified by the <span class="code">DefaultSelection</span> property will be used instead.  By
default, this feature is enabled and the first entry in the data source is used as the default selection.  This
ensures that for the radio button list, it is never shown without any radio button selected.  For the checkbox
list, the check state of the specified item is unaffected when the selected index changes.  It simply lets you
specify which item should get the focus if the selection is cleared.</p><p>Unlike the standard .NET list controls, all of the controls in the <span class="code">EWSoftware.ListControls</span>
namespace allow you to index their data source to extract values.  This allows you to obtain the value of a field
in the current selection or a field in any row even if it is not the selected item and regardless of whether or
not the field is used as the display or value member.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Get the vendor name from the radio button list's current selection
string vendorName = (string)rblVendor["VendorName"];

// Get the item quantity from the sixth row of the checkbox list
int itemQty = (int)cblItems[5, "ItemQty"];</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Get the vendor name from the radio button list's current selection
Dim vendorName As String = CType(rblVendor("VendorName"), String)

' Get the item quantity from the sixth row of the checkbox list
Dim itemQty As Integer = CType(cblItems(5, "ItemQty"), Integer)</code></pre></div></div></div><h2 id="RBList" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>RadioButtonList Usage</h2><div id="IDCABSection"><p>The <span class="code">RadioButtonList</span> allows only a single selection and provides a set of
properties and events similar to the standard <span class="code">ListBox</span> control such as
<span class="code">SelectedIndex</span>, <span class="code">SelectedValue</span>, <span class="code">SelectedIndexChanged</span>,
etc.  As such, you can use it in a similar fashion but can take advantage of its extra features such as the
layout options, etc.</p></div><h2 id="CKBList" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>CheckBoxList Usage</h2><div id="IDDABSection"><p>The <span class="code">CheckBoxList</span> is similar in nature to the standard
<span class="code">CheckedListBox</span> control but is much more flexible as it allows better data binding
support and many more options with regard to its appearance and layout.  The <span class="code">CheckBoxList</span>
allows you to select one or more items from a data source. By default, it uses two-state checkboxes (checked and
unchecked).  By setting the <span class="code">ThreeState</span> property to true, you can make it use three-state
checkboxes (checked, unchecked, and indeterminate).</p><p>The <span class="code">CheckBoxList</span> control provides a set of properties and events similar
to those of the <span class="code">RadioButtonList</span> such as <span class="code">SelectedIndex</span>,
<span class="code">SelectedValue</span>, <span class="code">SelectedIndexChanged</span>, etc.  The
<span class="code">SelectedIndexChanged</span> event is raised when a new item is selected in the list.  Setting
the <span class="code">SelectedIndex</span> property will give the item at the specified index the focus but does
not change its check state. To detect changes in an item's check state, use the
<span class="code">ItemCheckStateChanged</span> event.  The checkbox list also provides the
<span class="code">GetItemChecked</span>/<span class="code">SetItemChecked</span> and
<span class="code">GetItemCheckState</span>/<span class="code">SetItemCheckState</span> methods to get or set the
check state of items in the list.  All of those methods are overloaded to accept either an integer specifying the
item's index in the collection or an item key which corresponds to the <span class="code">ValueMember</span> value
of an item in the collection.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Get an array of events from a comma-separated list of codes retrieved from a
// database field.
string[] events = eventCodes.Split(',');

// Mark each of the selected event codes as checked
foreach(string s in eventCodes)
    cblEventCodes.SetItemChecked(s.Trim(), true);</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Get an array of events from a comma-separated list of codes retrieved from a
' database field.
Dim events() As String = eventCodes.Split(",")

' Mark each of the selected event codes as checked
Dim s As String

For Each s In eventCodes
    cblEventCodes.SetItemChecked(s.Trim(), True)
Next</code></pre></div></div><p>The <span class="code">CheckedIndices</span> property can be used to obtain a collection that
contains the indices of all items in the list that have a check state of <span class="code">Checked</span> or
<span class="code">Indeterminate</span>.</p><p>The <span class="code">CheckedItems</span> property can be used to obtain a collection that contains
the actual items in the list that have a check state of <span class="code">Checked</span> or
<span class="code">Indeterminate</span>.  This collection has some helper methods that you will find useful.</p><table class="table is-hoverable"><thead><tr><th><p>Method</p></th><th><p>Description</p></th></tr></thead><tr><td><p><span class="code">ValueOf</span></p></td><td><p>This method can be used to obtain the value of the item in the collection.  The return value
corresponds to the <span class="code">ValueMember</span> value of the item in the list.</p></td></tr><tr><td><p><span class="code">DisplayTextOf</span></p></td><td><p>This method can be used to obtain the display text of the item in the collection.  The return
value corresponds to the <span class="code">DisplayMember</span> value of the item in the list.</p></td></tr><tr><td><p><span class="code">CheckStateOf</span></p></td><td><p>This method can be used to get the check state of the item in the collection.</p></td></tr><tr><td><p><span class="code">ToString</span></p></td><td><p>This method has been overridden so that it returns a comma-separated list of the values from
the collection.  The values corresponds to the <span class="code">ValueMember</span> values of the items in the
list.</p></td></tr><tr><td><p><span class="code">ToDisplayTextString</span></p></td><td><p>This method returns a comma-separated list of the display text values from the collection.
The values corresponds to the <span class="code">DisplayMember</span> values of the items in the list.</p></td></tr></table><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">CheckedItemsCollection checkedItems = cblEventCodes.CheckedItems;

// Display the value of each checked item
for(int idx = 0; idx &lt; checkedItems.Count; idx++)
    Debug.WriteLine(checkedItems.ValueOf(idx));

// Display the display text of each checked item
for(int idx = 0; idx &lt; checkedItems.Count; idx++)
    Debug.WriteLine(checkedItems.DisplayTextOf(idx));

// Display the check state of each checked item
for(int idx = 0; idx &lt; checkedItems.Count; idx++)
    Debug.WriteLine(checkedItems.CheckStateOf(idx));

// Get the checked values into a string ready to store in
// a database field.
string eventCodes = checkedItems.ToString();

// Show the display text values in a message box
MessageBox.Show("You chose: " + checkedItems.ToDisplayTextString());</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">Dim idx As Integer
Dim checkedItems As CheckedItemsCollection = cblEventCodes.CheckedItems

' Display the value of each checked item
For idx = 0 To checkedItems.Count - 1
    Debug.WriteLine(checkedItems.ValueOf(idx))
Next idx

' Display the display text of each checked item
For idx = 0 To checkedItems.Count - 1
    Debug.WriteLine(checkedItems.DisplayTextOf(idx))
Next idx

' Display the check state of each checked item
For idx = 0 To checkedItems.Count - 1
    Debug.WriteLine(checkedItems.CheckStateOf(idx))
Next idx

' Get the checked values into a string ready to store in
' a database field.
Dim eventCodes As String = checkedItems.ToString()

' Show the display text values in a message box
MessageBox.Show("You chose: " &amp; checkedItems.ToDisplayTextString())</code></pre></div></div></div><h2 id="RBLBinding" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>RadioButtonList Data Binding</h2><div id="IDEABSection"><p>You have a choice of three different control properties that can be bound to a data source in order
to edit fields in the data source.</p><table class="table is-hoverable"><thead><tr><th><p>Property</p></th><th><p>Description</p></th></tr></thead><tr><td><p><span class="code">SelectedValue</span></p></td><td><p>Use this when list items are specified using the <span class="code">DisplayMember</span>,
<span class="code">ValueMember</span>, and <span class="code">DataSource</span> properties.</p></td></tr><tr><td><p><span class="code">SelectedItem</span></p></td><td><p>Use this when list items are specified by adding them to the control's
<span class="code">Items</span> property.</p></td></tr><tr><td><p><span class="code">SelectedIndex</span></p></td><td><p>You may use this if the field values corresponds to an index from zero to the number of items
in the list minus one regardless of how the list items are defined.</p></td></tr></table><p>When using the <span class="code">DataSource</span> property to specify the items that appear in the
radio button list, you will add a binding on the <span class="code">SelectedValue</span> property.  As the
selection changes in the list, the <span class="code">SelectedValue</span> property also changes thus updating the
data source.  Below is an example of adding a data binding through code.  The bindings can also be done using the
Visual Studio designer.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C# - RadioButtonList Data Binding</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Assign a data source for the list items displayed by the radio button list
rblContactType.DisplayMember = "Display";
rblContactType.ValueMember = "Value";
rblContactType.DataSource = contactTypeList;

// Bind the ContactType field in the addresses data source to the SelectedValue property
rblContactType.DataBindings.Add(new Binding("SelectedValue", addressList, "ContactType");</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET - RadioButtonList Data Binding</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Assign a data source for the list items displayed by the radio button list
rblContactType.DisplayMember = "Display"
rblContactType.ValueMember = "Value"
rblContactType.DataSource = contactTypeList

' Bind the ContactType field in the addresses data source to the SelectedValue property
rblContactType.DataBindings.Add(New Binding("SelectedValue", addressList, "ContactType")</code></pre></div></div><p>The example above assumes that the field to which the property is bound will never be null or that
the list contains a null value entry.  If the bound field can contain null but your radio button list does not
contain an item with a null value, you can use a <span class="code">Format</span> event handler on the data
binding to enforce a default value. For example:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C# - Enforce a Default Value on Null Fields</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Create the binding and connect the event handler
Binding b = new Binding("SelectedValue", dsAddresses, "ContactType");
b.Format += ContactType_Format;

// Add the binding to the radio button list
rblContactType.DataBindings.Add(b);

// This event handler converts null values to a default radio button list value
private void ContactType_Format(object sender, ConvertEventArgs e)
{
    if(e.Value == null || e.Value == DBNull.Value)
        e.Value = "B";
}</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET - Enforce a Default Value on Null Fields</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Create the binding and connect the event handler
Dim b As New Binding("SelectedValue", dsAddresses, "ContactType")
AddHandler b.Format, AddressOf ContactType_Format

' Add the binding to the radio button list
rblContactType.DataBindings.Add(b)

' This event handler converts null values to a default radio button list value
Private Sub ContactType_Format(sender As Object, e As ConvertEventArgs)
    If e.Value Is Nothing OrElse e.Value Is DBNull.Value Then
        e.Value = "B"
    End If
End Sub</code></pre></div></div><p>If you specify the items to display in the radio button list by adding them to the
<span class="code">Items</span> property rather than using the <span class="code">DataSource</span> property, you
will need to bind the field to the <span class="code">SelectedItem</span> property instead.  If the value in the
data source corresponds directly to a radio button list index from zero to the number of items in the radio
button list minus one, you may bind the field to the <span class="code">SelectedIndex</span> property.  The
results are the same.  As the selection changes, the field will be updated with the value from the bound
property.  The <strong>Relationship Test</strong> example in the demo application contains an example of
binding a radio button list to a data source.</p></div><h2 id="CBLBinding" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>CheckBoxList Data Binding</h2><div id="IDFABSection"><p>Unlike the radio button list, the checkbox list is a multi-valued control.  As such, it does not
make sense to a bind field to the <span class="code">SelectedValue</span>, <span class="code">SelectedItem</span>,
or <span class="code">SelectedIndex</span> property as it would only reflect one of the selected values.  The
<span class="code">CheckBoxList</span> control provides three additional properties that allow you to easily bind
one field to each checkbox in the list thus allowing you to edit multiple fields with little effort.</p><table class="table is-hoverable"><thead><tr><th><p>Property</p></th><th><p>Description</p></th></tr></thead><tr><td><p><span class="code">BindingMembersDataSource</span></p></td><td><p>This property is used to specify the data source that contains the fields to which each
checkbox will be bound.</p></td></tr><tr><td><p><span class="code">BindingMembers</span></p></td><td><p>This string collection contains a list of each field in the
<span class="code">BindingMembersDataSource</span> that will be bound to one checkbox in the list.  There should
be at least one field for each checkbox in the list.  Any excess fields that do not have a corresponding checkbox
will be ignored.  The data type of the fields should be Boolean or convertible to a Boolean value.  Nulls are
supported.</p></td></tr><tr><td><p><span class="code">BindingMembersBindingContext</span></p></td><td><p>This property can be used to specify the binding context to use when binding the checkboxes
to the data source.  Normally, you can ignore this property.  However, if the data source is used by another
control on the form and that control has a binding context other than the default, you should assign its binding
context to this property so that changes to the data source will be reflected in both controls.</p></td></tr></table><p>As noted above, the data type of the fields specified in <span class="code">BindingMembers</span>
should be Boolean or convertible to a Boolean value.  Null values are also supported and the behavior of the
control when a null value is encountered depends on the setting of the <span class="code">ThreeState</span>
property.  If set to false, null values are converted to unchecked (false).  If <span class="code">ThreeState</span>
is set to true, null values are converted to indeterminate and the checkbox will display using the grayed
indeterminate state.  Likewise, if a checkbox is set to the indeterminate state, the bound field will be set to
null.</p><p>Below is an example of adding data bindings through code.  The bindings can also be done using the
Visual Studio designer.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C# - CheckBoxList Data Binding</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Add items to use for the checkbox item text.  We could also assign them using
// the DisplayMember, ValueMember, and DataSource too.
cblAddressTypes.Items.AddRange(new object[] {
    "Domestic Address", "International Address", "Postal Address",
    "Parcel Address", "Home Address", "Business Address" });

// Specify to which field each checkbox will be bound
cblAddressTypes.BindingMembers.AddRange(new string[] {
    "Domestic", "International", "Postal", "Parcel", "Home", "Business" });

// Specify the data source containing the binding members
cblAddressTypes.BindingMembersDataSource = addressList;</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET - CheckBoxList Data Binding</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Add items to use for the checkbox item text.  We could also assign them using
' the DisplayMember, ValueMember, and DataSource too.
cblAddressTypes.Items.AddRange(New Object() {
    "Domestic Address", "International Address", "Postal Address",
    "Parcel Address", "Home Address", "Business Address" });

' Specify to which field each checkbox will be bound
cblAddressTypes.BindingMembers.AddRange(New String() {
    "Domestic", "International", "Postal", "Parcel", "Home", "Business" })

' Specify the data source containing the binding members
cblAddressTypes.BindingMembersDataSource = addressList</code></pre></div></div><p>The <strong>Relationship Test</strong> example in the demo application contains an example
of binding a checkbox list to a data source.</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm">Control Tutorials</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Common Features</a></li><li><a class="quickLink">RadioButtonList Usage</a></li><li><a class="quickLink">CheckBoxList Usage</a></li><li><a class="quickLink">RadioButtonList Data Binding</a></li><li><a class="quickLink">CheckBoxList Data Binding</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://github.com/EWSoftware/ListControls" target="_blank" rel="noopener noreferrer">[v2024.12.18.0] Copyright © 2005-2024, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ListControls%20Library%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div id="AdContent" class="column"><iframe src="https://github.com/sponsors/EWSoftware/button" title="Sponsor EWSoftware" height="32" width="114" style="border: 0; border-radius: 6px;"></iframe>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
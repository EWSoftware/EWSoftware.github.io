<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Combo Box Controls Tutorial</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="tutorials, AutoCompleteComboBox" /><meta name="System.Keywords" content="tutorials, MultiColumnComboBox" /><meta name="System.Keywords" content="tutorials, UserControlComboBox" /><meta name="Microsoft.Help.Id" content="ea1601a4-68aa-4ad2-92f9-8c78fbf67512" /><meta name="Description" content="This control is derived from the standard .NET ComboBox control. The only differences are the addition of the auto-completion feature that selects items as you type and the data source indexer properties." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">EWSoftware.ListControls Library Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ca3b503d-654e-4fe6-8ca3-ec3ea8fb9a1a.htm" title="EWSoftware.ListControls Library Documentation" tocid="roottoc">EWSoftware.ListControls Library Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm" title="Control Tutorials" tocid="ce5cb77a-44a9-4629-aec3-6a8435cd8e53">Control Tutorials</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="3af969ee-6757-4660-9cc9-5bd518c24e05.htm" title="CheckBoxList and RadioButtonList Tutorial" tocid="3af969ee-6757-4660-9cc9-5bd518c24e05">CheckBoxList and RadioButtonList Tutorial</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ea1601a4-68aa-4ad2-92f9-8c78fbf67512.htm" title="Combo Box Controls Tutorial" tocid="ea1601a4-68aa-4ad2-92f9-8c78fbf67512">Combo Box Controls Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2587355f-decc-4d08-85ff-7f8816b0cbfa.htm" title="DataList Control Tutorial" tocid="2587355f-decc-4d08-85ff-7f8816b0cbfa">DataList Control Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8fbf556a-9edc-4071-85ef-6df0d4d13950.htm" title="DataNavigator Control Tutorial" tocid="8fbf556a-9edc-4071-85ef-6df0d4d13950">DataNavigator Control Tutorial</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a.htm" title="ExtendedTreeView Control Tutorial" tocid="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a">ExtendedTreeView Control Tutorial</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>Combo Box Controls Tutorial</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>This topic describes the Combo Box controls and their features.</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#AutoComp">AutoCompleteComboBox Usage</a></li><li class="outlineSectionEntry"><a href="#Features">Common Features</a></li><li class="outlineSectionEntry"><a href="#Differences">Combo Box Behavior Differences</a></li><li class="outlineSectionEntry"><a href="#MCCombo">MultiColumnComboBox Usage</a></li><li class="outlineSectionEntry"><a href="#UCCombo">UserControlComboBox Usage</a></li><li class="outlineSectionEntry"><a href="#DDCtrl">Creating a Dropdown Control</a></li></ul></div><div class="collapsibleAreaRegion" id="AutoComp"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />AutoCompleteComboBox Usage</span></div><div id="ID0RBSection" class="collapsibleSection"><p>This control is derived from the standard .NET <span class="code">ComboBox</span> control. The only
differences are the addition of the auto-completion feature that selects items as you type and the data source
indexer properties.  Use this control when you want auto-completion but do not need the extra functionality of
the other combo box classes such as multi-column drop-down support.  To use it, simply drag the control from the
toolbox, drop it on the form, and use the <strong>Properties</strong> window to adjust its settings.</p></div><div class="collapsibleAreaRegion" id="Features"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Common Features</span></div><div id="ID2RBSection" class="collapsibleSection"><p>The <span class="code">MultiColumnComboBox</span> and <span class="code">UserControlComboBox</span>
are quite similar with regard to creation and usage.  Simply drag the control from the toolbox, drop it on the
form, and use the <strong>Properties</strong> window to adjust its settings.  For simple lists, you can
enter text strings in the designer by selecting the <span class="code">Items</span> property and entering the
values one per line in the collection editor.  When items are added directly to the <span class="code">Items</span>
collection, the <span class="code">SortOrder</span> property can be used to sort the items in ascending or
descending order.  The default sort order is <span class="code">None</span>.</p><p>A simple <span class="code">ListItem</span> object is supplied that can be used with an array list
as the data source for the list controls.  It contains a <span class="code">Display</span> property for the
display text and a <span class="code">Value</span> property for the value of the item.  The demo application
contains examples of its use.  A simple example is shown below:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EALAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EALAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">ArrayList alRelevance = <span class="highlight-keyword">new</span> ArrayList();

<span class="highlight-comment">// Add list items to the array list containing a value and a description</span>
alRelevance.Add(<span class="highlight-keyword">new</span> ListItem(<span class="highlight-number">1</span>, <span class="highlight-literal">"Remote"</span>));
alRelevance.Add(<span class="highlight-keyword">new</span> ListItem(<span class="highlight-number">10</span>, <span class="highlight-literal">"Low"</span>));
alRelevance.Add(<span class="highlight-keyword">new</span> ListItem(<span class="highlight-number">30</span>, <span class="highlight-literal">"Medium"</span>));
alRelevance.Add(<span class="highlight-keyword">new</span> ListItem(<span class="highlight-number">80</span>, <span class="highlight-literal">"High"</span>));

<span class="highlight-comment">// Tell the combo box the value and display members and set the array list as the data source</span>
cboMinRel.ValueMember = <span class="highlight-literal">"Value"</span>;
cboMinRel.DisplayMember = <span class="highlight-literal">"Display"</span>;
cboMinRel.DataSource = alRelevance;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALAFAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAKAFAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAKAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAKAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Dim</span> alRelevance <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> ArrayList()

<span class="highlight-comment">' Add list items to the array list containing a value and a description</span>
alRelevance.Add(<span class="highlight-keyword">New</span> ListItem(<span class="highlight-number">1</span>, <span class="highlight-literal">"Remote"</span>))
alRelevance.Add(<span class="highlight-keyword">New</span> ListItem(<span class="highlight-number">10</span>, <span class="highlight-literal">"Low"</span>))
alRelevance.Add(<span class="highlight-keyword">New</span> ListItem(<span class="highlight-number">30</span>, <span class="highlight-literal">"Medium"</span>))
alRelevance.Add(<span class="highlight-keyword">New</span> ListItem(<span class="highlight-number">80</span>, <span class="highlight-literal">"High"</span>))

<span class="highlight-comment">' Tell the combo box the value and display members and set the array list as the data source</span>
cboMinRel.ValueMember = <span class="highlight-literal">"Value"</span>
cboMinRel.DisplayMember = <span class="highlight-literal">"Display"</span>
cboMinRel.DataSource = alRelevance</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKAFAAA");</script><p>The controls also support the same complex data sources that any other standard .NET control can
use (i.e. data sets, data views, data tables, arrays, etc).  Assigning a more complex data source is done in a
manner similar to the example above.  You set the <span class="code">DisplayMember</span> and
<span class="code">ValueMember</span> properties to members of the data source and then set the
<span class="code">DataSource</span> property to the complex data source (i.e. a data set, data view, etc).  If
assigning these three properties in code, always assign the <span class="code">DataSource</span> property last to
improve performance.  This is true of all .NET controls as assigning a new display or value member forces the
control to reevaluate its data source.  By assigning the data source last, it will only have to evaluate the data
source once.</p><p>The properties in the <strong>Appearance</strong> category can be used to alter the visual
style of the control.  To modify the drop-down style, its width, the default number of items to show, and the
control-specific properties, see the options in the <span class="code">DropDown</span> category.  The
control-specific properties are described in more detail in the sections below.</p><p>Both controls have an <span class="code">EnforceDefaultSelection</span> property that allows you to
specify whether a default selection will be set if an attempt is made to set the selected index to -1.  In
<span class="code">DropDownList</span> mode, if this property is true (the default), a <span class="code">SelectedIndex</span>
of -1 (no selection) is not allowed.  Instead, the index specified by the <span class="code">DefaultSelection</span>
property is used instead.  For the <span class="code">DropDown</span> and <span class="code">Simple</span> modes,
this property is ignored as values can be entered that are not in the list of valid items.</p><p>Once the drop-down has been displayed, it will retain the size and settings in effect until the
form closes or properties are changed that force it to get recreated.  If you need to force the drop-down portion
to get reset, you can call the <span class="code">RefreshSubControls</span> method.  This destroys the current
instance of the drop-down and causes it to get recreated the next time the drop-down is displayed.</p><p>Unlike the standard .NET list controls, all of the controls in the
<span class="code">EWSoftware.ListControls</span> namespace allow you to index their data source to extract
values.  This allows you to obtain the value of a field in the current selection or a field in any row even if it
is not the selected item and regardless of whether or not the field is used as the display or value member.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAEAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Get the vendor name from the current selection</span>
<span class="highlight-keyword">string</span> vendorName = (<span class="highlight-keyword">string</span>)cboVendors[<span class="highlight-literal">"VendorName"</span>];

<span class="highlight-comment">// Get the item quantity from the sixth row</span>
<span class="highlight-keyword">int</span> itemQty = (<span class="highlight-keyword">int</span>)cboItems[<span class="highlight-number">5</span>, <span class="highlight-literal">"ItemQty"</span>];</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEAFAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADAFAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Get the vendor name from the current selection</span>
<span class="highlight-keyword">Dim</span> vendorName <span class="highlight-keyword">As</span> <span class="highlight-keyword">String</span> = <span class="highlight-keyword">CType</span>(cboVendors(<span class="highlight-literal">"VendorName"</span>), <span class="highlight-keyword">String</span>)

<span class="highlight-comment">' Get the item quantity from the sixth row</span>
<span class="highlight-keyword">Dim</span> itemQty <span class="highlight-keyword">As</span> <span class="highlight-keyword">Integer</span> = <span class="highlight-keyword">CType</span>(cboItems(<span class="highlight-number">5</span>, <span class="highlight-literal">"ItemQty"</span>), <span class="highlight-keyword">Integer</span>)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADAFAAA");</script><p>The <span class="code">MultiColumnComboBox</span> and <span class="code">UserControlComboBox</span>
contain a <span class="code">DrawImage</span> property.  If set to true, the controls will raise the
<span class="code">DrawItemImage</span> event so that you can draw an image to the left of the text value in the
textbox portion of the control.  The event receives a reference to the combo box and a
<span class="code">DrawItemEventArgs</span> object that defines the item and its state.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Draw an image for the demo.  They aren't representative of the items, they're just</span>
<span class="highlight-comment">// something to show.</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> cboMultiCol_DrawItemImage(<span class="highlight-keyword">object</span> sender, DrawItemEventArgs e)
{
    <span class="highlight-keyword">if</span>(e.Index == <span class="highlight-number">-1</span>)
        e.DrawBackground();
    <span class="highlight-keyword">else</span>
        e.Graphics.DrawImage(ilImages.Images[e.Index % ilImages.Images.Count], e.Bounds);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABAFAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAAFAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Draw an image for the demo.  They aren't representative of the items, they're just</span>
<span class="highlight-comment">' something to show.</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> cboMultiCol_DrawItemImage(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> DrawItemEventArgs) _
  <span class="highlight-keyword">Handles</span> cboMultiCol.DrawItemImage
    <span class="highlight-keyword">If</span> e.Index = <span class="highlight-number">-1</span> <span class="highlight-keyword">Then</span>
        e.DrawBackground()
    <span class="highlight-keyword">Else</span>
        e.Graphics.DrawImage(ilImages.Images(e.Index <span class="highlight-keyword">Mod</span> ilImages.Images.Count), e.Bounds)
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAAFAAA");</script></div><div class="collapsibleAreaRegion" id="Differences"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Combo Box Behavior Differences</span></div><div id="ID3RBSection" class="collapsibleSection"><p>The <span class="code">MultiColumnComboBox</span> and <span class="code">UserControlComboBox</span>
have a few differences in behavior compared to the standard .NET combo box control.  These are mostly to fix bugs
present in the standard combo box control and to add extra features not present in it.  They are as follows:</p><ul><li><p>You can bind almost any data source to the multi-column and user control combo boxes with the
exception of non-value-type objects added directly to the <span class="code">Items</span> collection.  The
workaround is to add the objects to an <span class="code">ArrayList</span> and use that as the data source.
Simple value types such as integers and strings can be added directly to the <span class="code">Items</span>
collection and displayed correctly.  All other standard data source types such as data sets, data views, and data
tables will work as expected.</p></li><li><p>A new <span class="code">OnCloseUp</span> event is fired when the drop-down portion is closed.
Note that unlike the standard Windows combo box, the <span class="code">SelectedIndexChanged</span> event will
always fire before the <span class="code">OnCloseUp</span> event.</p></li><li><p><span class="code">SelectionChangeCommitted</span> is fired correctly when the drop-down portion
is closed and the item was changed.  A new <span class="code">SelectionChangeCanceled</span> event is raised if
the drop-down is closed without changing the selection. The correct event is always fired after the
<span class="code">OnCloseUp</span> event.</p></li><li><p>A new <span class="code">NotInList</span> event is fired just prior to the
<span class="code">Validating</span> event if the text in the control does not match anything in the item list.
This event gives you the opportunity to cancel the attempt to update the value or take some other action (i.e.
add the value as a valid item, force it to a valid selection, etc).</p></li><li><p>The <span class="code">Text</span> property of the combo box controls always returns whatever is
in the text portion of the combo box.  There is a bug in the standard combo box control that causes it to not
work correctly if bound to a data source.</p></li><li><p>Setting the <span class="code">Text</span> property of the combo box controls will correctly
synchronize the <span class="code">SelectedIndex</span> property with the new text.  If the text is not found, the
selected index is correctly set to -1.  A bug in the standard combo box prevents this from happening.</p></li><li><p>Setting the <span class="code">SelectedIndex</span> property to -1 in a data-bound combo box
will always clear the selected item and the text. A bug in the standard combo box control causes this to fail
occasionally.</p></li><li><p>In the standard combo box control, when the data source properties are modified, it will force
the <span class="code">SelectedIndex</span> property to the current position in the data source rather than
keeping the default -1 (no selection) value.  Many people consider this to be a bug but others consider it to be
valid behavior.</p><p>For the <span class="code">MultiColumnComboBox</span> and <span class="code">UserControlComboBox</span>
in <span class="code">DropDownList</span> mode, the <span class="code">EnforceDefaultSelection</span> property can
be used to alter the behavior to suit your own preferences.  For example, it may be considered valid to force a
selection in this mode so that it contains a valid selection from the start. The property defaults to true which
makes it work like the standard combo box control (the selection is always changed).  If set to false and the
current <span class="code">SelectedIndex</span> value is -1 when a data source property changes, the "no
selection" state (-1) is retained.  In <span class="code">DropDown</span> and <span class="code">Simple</span>
mode, the <span class="code">EnforceDefaultSelection</span> property is ignored and the "no selection" state will
be retained when the data source is changed.  This is because those two modes do allow entry of text that does
not appear in the list of values.</p></li></ul></div><div class="collapsibleAreaRegion" id="MCCombo"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />MultiColumnComboBox Usage</span></div><div id="ID4RBSection" class="collapsibleSection"><p>By default, the <span class="code">MultiColumnComboBox</span> will display all columns from its data
source with some default formatting.  You can use the properties in the <span class="code">DropDown</span>
category to customize the appearance of the drop-down and the columns that are displayed in it.  A simple way to
limit the columns displayed is to use the <span class="code">ColumnFilter</span> property to let it know which
columns should appear in the drop-down.  The columns will be auto-sized based on the longest value in each
column.  Note that even though a column filter is in place for the drop-down you can still access any field in
the data source using the item indexer as shown earlier.  You can set the filter at design-time by selecting the
property and entering the column names to display one per line using the collection editor.  You can also specify
the column filter at runtime using code similar to the following:</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAGADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAGADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAGADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAGADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Limit the drop-down to the vendor name and contact name</span>
cboVendor.ColumnFilter.AddRange(<span class="highlight-keyword">new</span> <span class="highlight-keyword">string</span>[] { <span class="highlight-literal">"VendorName"</span>, <span class="highlight-literal">"Contact"</span> });</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAGADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFADAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Limit the drop-down to the vendor name and contact name</span>
cboVendor.ColumnFilter.AddRange(<span class="highlight-keyword">New</span> <span class="highlight-keyword">String</span>() { <span class="highlight-literal">"VendorName"</span>, <span class="highlight-literal">"Contact"</span> })</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFADAAA");</script><p>For full control over the visual style of the drop-down along with which columns are displayed,
their order, and their individual styles, you can use the <span class="code">DropDownFormat</span> property.  The
basic properties in it allows you to specify the color and grid line settings and whether or not column and row
headers are visible. By selecting the <span class="code">GridColumnStyles</span> property of
<span class="code">DropDownFormat</span> you can also specify the columns to display in the drop-down along with
their formatting options such as alignment, column header text, width, etc.  When specifying column definitions
in this manner, there is no need to use the <span class="code">ColumnFilter</span> property.</p><p>When defining grid column styles, you can use the standard text box or boolean data grid columns
supplied with .NET or you can use custom third-party column types such as label columns, image columns, progress
bar columns, etc (all drop-down data is read-only).  At design-time, only the standard text box and boolean
columns are accessible.  To use third-party column types, you should add them to the
<span class="code">DropDownFormat.GridColumnStyles</span> collection using code.</p><p>When specifying column definitions using grid column styles, setting their <span class="code">Width</span>
property to -1 will cause the drop-down to size the column to the preferred width. Setting the width to zero will
cause the drop-down to size the column to the longest value in the data source for the column.  Setting the width
to any other positive value will size the column to the specified width.  As with the column filter, you can set
the grid column styles at runtime using code.  An example is shown below.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// These can be created and set at design-time too</span>
DataGridTextBoxColumn dgtbItemName = <span class="highlight-keyword">new</span> DataGridTextBoxColumn();
DataGridTextBoxColumn dgtbExpireDate = <span class="highlight-keyword">new</span> DataGridTextBoxColumn();
DataGridBoolColumn dgbcInStock = <span class="highlight-keyword">new</span> DataGridBoolColumn();

<span class="highlight-comment">// Set the column properties</span>
dgtbItemName.HeaderText = <span class="highlight-literal">"Item Name"</span>;
dgtbItemName.MappingName = <span class="highlight-literal">"ItemName"</span>;
dgtbItemName.Width = <span class="highlight-number">0</span>;     <span class="highlight-comment">// Size to widest item</span>

dgtbExpireDate.Format = <span class="highlight-literal">"MM/dd/yyyy"</span>;
dgtbExpireDate.HeaderText = <span class="highlight-literal">"Expiration Date"</span>;
dgtbExpireDate.MappingName = <span class="highlight-literal">"ExpireDate"</span>;
dgtbExpireDate.Width = <span class="highlight-number">-1</span>;  <span class="highlight-comment">// Size to preferred width</span>

dgbcInStock.Alignment = HorizontalAlignment.Center;
dgbcInStock.HeaderText = <span class="highlight-literal">"In Stock"</span>;
dgbcInStock.MappingName = <span class="highlight-literal">"InStockYN"</span>;
dgtbExpireDate.Width = <span class="highlight-number">100</span>; <span class="highlight-comment">// Fixed width</span>

<span class="highlight-comment">// Add the column definitions to the combo box control</span>
cboItems.DropDownFormat.GridColumnStyles.AddRange(<span class="highlight-keyword">new</span> DataGridColumnStyle[] {
    dgtbItemName, dgtbExpireDate, dgbcInStock });</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABADAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAADAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' These can be created and set at design-time too</span>
<span class="highlight-keyword">Dim</span> dgtbItemName <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> DataGridTextBoxColumn()
<span class="highlight-keyword">Dim</span> dgtbExpireDate <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> DataGridTextBoxColumn()
<span class="highlight-keyword">Dim</span> dgbcInStock <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> DataGridBoolColumn()

<span class="highlight-comment">' Set the column properties</span>
dgtbItemName.HeaderText = <span class="highlight-literal">"Item Name"</span>
dgtbItemName.MappingName = <span class="highlight-literal">"ItemName"</span>
dgtbItemName.Width = <span class="highlight-number">0</span>      <span class="highlight-comment">' Size to widest item</span>

dgtbExpireDate.Format = <span class="highlight-literal">"MM/dd/yyyy"</span>;
dgtbExpireDate.HeaderText = <span class="highlight-literal">"Expiration Date"</span>;
dgtbExpireDate.MappingName = <span class="highlight-literal">"ExpireDate"</span>;
dgtbExpireDate.Width = <span class="highlight-number">-1</span>   <span class="highlight-comment">' Size to preferred width</span>

dgbcInStock.Alignment = HorizontalAlignment.Center;
dgbcInStock.HeaderText = <span class="highlight-literal">"In Stock"</span>;
dgbcInStock.MappingName = <span class="highlight-literal">"InStockYN"</span>;
dgtbExpireDate.Width = <span class="highlight-number">100</span>  <span class="highlight-comment">' Fixed width</span>

<span class="highlight-comment">' Add the column definitions to the combo box control</span>
cboItems.DropDownFormat.GridColumnStyles.AddRange(<span class="highlight-keyword">new</span> DataGridColumnStyle() {
    dgtbItemName, dgtbExpireDate, dgbcInStock })</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="UCCombo"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />UserControlComboBox Usage</span></div><div id="ID5RBSection" class="collapsibleSection"><p>The <span class="code">UserControlComboBox</span> is similar in nature to other combo box controls
but it displays a user control that you create as its drop-down.  This allows you to create drop-downs that use
non-standard lists such as tree views, list views, or just about any other combination of controls that you can
imagine.  The drop-down will gain the focus when displayed so you can also put checkboxes, text boxes, buttons,
and other controls in the drop-down as well.</p><p>For this combo box, the <span class="code">MaxDropDownItems</span> property has no effect on the
drop-down size.  However, it is used to control how many items are skipped when you press page up or page down in
the textbox portion of the control.</p><p>The drop-down control type cannot be set at design-time so it must be assigned using code.  This is
most often done in the form's constructor after the <span class="code">InitializeComponent</span> method has been
called.  To do so, simply assign the drop-down control type to the <span class="code">DropDownControl</span>
property.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// TreeViewDropDown is a user control derived from DropDownControl</span>
ucCombo.DropDownControl = <span class="highlight-keyword">typeof</span>(TreeViewDropDown);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEACAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADACAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' TreeViewDropDown is a user control derived from DropDownControl</span>
ucCombo.DropDownControl = <span class="highlight-keyword">GetType</span>(TreeViewDropDown)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADACAAA");</script><p>The <span class="code">UserControlComboBox</span> exposes two events that you can use to customize
the settings of the drop-down control before it is displayed.  For example, you might need to hide certain
controls in the drop-down based on a condition in the form containing the combo box.  The
<span class="code">DropDownControlCreated</span> event is fired after the drop-down has been created but before it
has been initialized.  The <span class="code">DropDownControlInitialized</span> event is fired after the drop-down
has been created and initialized but just prior to it being displayed.  The <span class="code">sender</span>
parameter will be a reference to the drop-down control.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Hide the "exclude terminated" checkbox for this form</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> cboAssignTo_DropDownControlCreated(<span class="highlight-keyword">object</span> sender, EventArgs e)
{
    EmployeeDropDown dd = (EmployeeDropDown)sender;

    <span class="highlight-comment">// This is a custom property on the drop-down user control</span>
    dd.ShowExcludeTerminated = <span class="highlight-keyword">false</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABACAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAACAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">' Hide the "exclude terminated" checkbox for this form</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> cboAssignTo_DropDownControlCreated(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> EventArgs) _
    <span class="highlight-keyword">Handles</span> cboAssignTo.DropDownControlCreated
    <span class="highlight-keyword">Dim</span> dd <span class="highlight-keyword">As</span> EmployeeDropDown = <span class="highlight-keyword">CType</span>(sender, EmployeeDropDown)

    <span class="highlight-comment">' This is a custom property on the drop-down user control</span>
    dd.ShowExcludeTerminated = <span class="highlight-keyword">False</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="DDCtrl"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a Dropdown Control</span></div><div id="ID6RBSection" class="collapsibleSection"><p>The drop-down controls used by the <span class="code">UserControlComboBox</span> are all derived
from the supplied <span class="code">DropDownControl</span> class.  To create a new drop-down control, follow
these steps:</p><ol><li><p>Right click on the project in the <strong>Solution Explorer</strong>, select
<strong>Add</strong>, <strong>Add User Control</strong>, enter a name for the new user control,
and click <strong>Open</strong> to add it to the project.</p></li><li><p>Open the new user control in the designer and view the code for it.</p></li><li><p>Change the base class of the user control to <span class="code">EWSoftware.ListControls.DropDownControl</span>.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABEHABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABEHABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABEHABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABEHABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> TreeViewDropDown : EWSoftware.ListControls.DropDownControl</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABEHABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAEHABAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAEHABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAEHABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAEHABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Class</span> TreeViewDropDown
  <span class="highlight-keyword">Inherits</span> EWSoftware.ListControls.DropDownControl</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAEHABAAA");</script></li><li><p>Add controls to the template and any required event handlers for them as you would for any
other user control.  You can also define public properties and methods if necessary to let forms containing combo
boxes utilizing the drop-down control make changes to it using the events described in the prior section.</p></li><li><p>More likely than not, you will need to override the <span class="code">InitializeDropdown</span>
method to populate the controls and obtain data from the combo box that owns the drop-down.  The drop-down's
<span class="code">ComboBox</span> property can be used to obtain a reference to the <span class="code">UserControlComboBox</span>
that owns it.  The demo application contains an example of this.</p></li><li><p>You can also override the <span class="code">ShowDropDown</span> method if necessary to make
adjustments to the drop-down just prior to it being displayed.  For example, you might want to synchronize the
item displayed in the drop-down with the current selected index in the combo box.  The demo application contains
an example of this.</p></li><li><p>Once the drop-down has been created, you can assign its type to the
<span class="code">DropDownControl</span> property of the <span class="code">UserControlComboBox</span> as shown in
the prior section.</p></li></ol><p>The user can close the drop-down by hitting Escape or clicking outside of the drop-down just like a
normal combo box.  To cancel the selection process and close the drop-down from within your user control, you can
set the combo box's <span class="code">DroppedDown</span> property to false.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnCancel_Click(<span class="highlight-keyword">object</span> sender, EventArgs e)
{
    <span class="highlight-keyword">this</span>.ComboBox.DroppedDown = <span class="highlight-keyword">false</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEABAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAEABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> btnCancel_Click(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> EventArgs) _
  <span class="highlight-keyword">Handles</span> btnCancel.Click
    <span class="highlight-keyword">Me</span>.ComboBox.DroppedDown = <span class="highlight-keyword">False</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEABAAA");</script><p>To commit a selection making it the selected item in the combo box and close the drop-down from
within your user control, you can use the <span class="code">CommitSelection</span> method.  This method has two
versions: one to commit the selection by index and another to commit the selection by value (the
<span class="code">ValueMember</span> value of an item).</p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> btnSelect_Click(<span class="highlight-keyword">object</span> sender, EventArgs e)
{
    <span class="highlight-comment">// The tree view node tag contains the item value</span>
    <span class="highlight-keyword">this</span>.CommitSelection(tvItems.SelectedNode.Tag);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACABAAA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABABAAA_tab1" class="codeSnippetContainerTabSingle">VB.NET</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> btnSelect_Click(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> EventArgs) _
  <span class="highlight-keyword">Handles</span> btnSelect.Click
    <span class="highlight-comment">' The tree view node tag contains the item value</span>
    <span class="highlight-keyword">Me</span>.CommitSelection(tvItems.SelectedNode.Tag)
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABAAA");</script><p>Note that it is also possible to set the <span class="code">SelectedIndex</span> property from
within the user control to modify the selection (i.e. to track the selected item as you move through the nodes in
a tree view control).  The demo application contains an example of this.</p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID7RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm">Control Tutorials</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="https://github.com/EWSoftware/ListControls" target="_blank">[v2015.1.27.0] Copyright © 2005-2015, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ListControls Library Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="ros"></div></body></html>
<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>ExtendedTreeView Control Tutorial</title><meta name="Title" content="ExtendedTreeView Control Tutorial" /><meta name="Help.Id" content="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="7cf6fc2e-bab8-4bf4-bf76-c1db9e2d342a" /><meta name="Description" content="The ExtendedTreeView control is a fully owner-drawn tree view control that overcomes some limitations in the way the default tree view is drawn. It also provides several additional features to make it easier to use than the standard tree view control." /><meta name="tocFile" content="../toc/IDD.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">EWSoftware.ListControls Library Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>ExtendedTreeView Control Tutorial</h1><div><p>This topic describes the Extended Tree View control and its features.</p><ul class="is-hidden-tablet"><li><a href="#Info">General Information</a></li><li><a href="#ClearTree">Clearing The Tree Node Collection</a></li><li><a href="#Usage">ExtendedTreeView Usage</a></li><li><a href="#Enum">Node Enumeration</a></li><li><a href="#CustomDraw">Customizing the Tree View's Appearance</a></li></ul></div><h2 id="Info" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>General Information</h2><div id="IDBABSection"><p>The <span class="code">ExtendedTreeView</span> control is a fully owner-drawn tree view control that
overcomes some limitations in the way the default tree view is drawn.  It also provides several additional
features to make it easier to use than the standard tree view control.  Below is a list of the additional
features and differences:</p><ul><li><p>The node background color draws all the way across the node, not just behind the text.</p></li><li><p><span class="code">FullRowSelect</span> works with <span class="code">ShowLines</span> enabled.</p></li><li><p>Unthemed checkboxes do not have the thick black border and look like normal unthemed flat
checkboxes.</p></li><li><p>The checkboxes are correctly vertically centered based on the item height.</p></li><li><p>Hot tracking works on nodes with their own font.</p></li><li><p>The tree view can be set to not draw the default images for nodes without an image.  When it
does not draw the default image, the text is flush left with no gap.</p></li><li><p>When using a state image list without checkboxes, a new <span class="code">ChangeStateImage</span>
event is raised when the image is clicked or the space bar is hit.  This allows you to implement custom check
states on the tree nodes by using different images for the various states.</p></li><li><p>The <span class="code">DrawNode</span> event is suppressed.  In its place two new events are
raised that give better control over how the node is drawn.  <span class="code">TreeNodeDrawing</span> is raised
prior to the node being drawn and lets you customize the default appearance.  <span class="code">TreeNodeDrawn</span>
is raised after the node has been drawn and lets you customize the appearance of the fully drawn node.</p></li><li><p>When <span class="code">LabelEdit</span> is true, hitting F2 initiates label editing on the
selected node.</p></li><li><p><strong>Ctrl+E</strong> can be used to expand all child nodes of the selected node.
<strong>Ctrl+K</strong> can be used to collapse the selected node.  <strong>Ctrl+Shift+E</strong>
can be used to expand all nodes in the tree.  <strong>Ctrl+Shift+K</strong> can be used to collapse all
nodes in the tree.</p></li><li><p>The <span class="code">SelectOnRightOfLabelClick</span> property allows you to specify whether
or not a node is selected when the blank area to the right of its label is clicked.</p></li><li><p>The expando (+/-) images can be replaced with custom images.</p></li><li><p>The <span class="code">AllowCollapse</span> property can be used to specify whether or not nodes
can be collapsed when <span class="code">ShowPlusMinus</span> is false.</p></li><li><p>The control implements <span class="code">IEnumerable</span> and <span class="code">IEnumerable&lt;T&gt;</span>
so that you can enumerate all of its nodes recursively using a simple for/each loop.  You can also use
<span class="code">TreeNodeEnumerator</span> to enumerate the nodes in one branch and, optionally, its subsequent
siblings.  This saves you from having to write recursive methods to handle child nodes.</p></li><li><p>The <span class="code">SyncParentChildCheckedState</span> property can be set to true to ensure
that the checked state of parent and child nodes is synchronized.  If a child node is checked, all parent nodes
are marked as checked too.  If a parent is checked or unchecked, all child nodes are checked or unchecked as
well.  The checkbox on parent nodes with a mix of checked and unchecked children are drawn as a mixed checkbox to
make them easy to pick out when collapsed.</p></li><li><p>An item indexer property is available to retrieve nodes from the tree view by node name
including child nodes at any level.</p></li><li><p>Methods have been added to allow setting or getting the check state of a node by name as well
as for checking and unchecking all nodes in the tree view.</p></li><li><p>The <span class="code">CheckedNodes</span> property can be used to obtain a collection
containing the current set of checked nodes.</p></li></ul></div><h2 id="ClearTree" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Clearing The Tree Node Collection</h2><div id="IDCABSection"><p>Under certain circumstances, it is possible for the tree view to throw a null reference exception
when clearing the tree node collection.  This is caused by a redraw event that occurs as the tree nodes are
cleared.  The base tree view will only suspend redrawing if there are more than two hundred items.
Unfortunately, there is no way to tell whether or not a node is in the process of being removed.  As such, it may
be necessary to manually suspend updates when calling the node collection's <span class="code">Clear</span> method
and resume updates afterwards.  For example:</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Suspend updates while clearing the tree nodes
tvExtTree.BeginUpdate();

// Clear the nodes
tvExtTree.Nodes.Clear();

// Resume updates
tvExtTree.EndUpdate();</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Suspend updates while clearing the tree nodes
tvExtTree.BeginUpdate()

' Clear the nodes
tvExtTree.Nodes.Clear()

' Resume updates
tvExtTree.EndUpdate()</code></pre></div></div></div><h2 id="Usage" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>ExtendedTreeView Usage</h2><div id="IDDABSection"><p>The <span class="code">ExtendedTreeView</span> is similar in nature to the standard
<span class="code">TreeView</span> control but is much more flexible as it allows better support for customizing
its appearance and has more options for node retrieval and enumeration.  It provides a set of properties and
events similar to those of the <span class="code">TreeView</span>.  The extended tree view also provides the
<span class="code">GetNodeChecked</span>, <span class="code">GetNodeCheckedState</span>, and
<span class="code">SetNodeChecked</span> methods to get or set the check state of nodes in the tree.  Each method
identifies the node by the name assigned to the node's <span class="code">Name</span> property.  If the
<span class="code">SyncParentChildCheckedState</span> property is set to true, the checked state of parent nodes
is kept in synch with the child nodes.  For example, if a child node is checked, all parent nodes are marked as
checked too.  If a parent is checked or unchecked, all child nodes are checked or unchecked as well.  The
checkbox on parent nodes with a mix of checked and unchecked children are drawn as a mixed checkbox to make them
easy to pick out when collapsed.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Get a list of IDs to mark as checked.  Each node's Name property will match one of the IDs
string[] ids = currentItems.Split(',');

// Turn off synchronization while setting the check states
tvMenu.SyncParentChildCheckedState = false;

// Check each named node
foreach(string id in ids)
    tvMenu.SetNodeChecked(id.Trim(), true);

// Turn check state synchronization back on
tvMenu.SyncParentChildCheckedState = true;</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">' Get a list of IDs to mark as checked.  Each node's Name property will match one of the IDs
Dim ids As String() = currentItems.Split(",")

' Turn off synchronization while setting the check states
tvMenu.SyncParentChildCheckedState = False

' Check each named node
For Each id in ids
    tvMenu.SetNodeChecked(id.Trim(), True)
Next

' Turn check state synchronization back on
tvMenu.SyncParentChildCheckedState = True</code></pre></div></div><p>If you assign a name to each node using its <span class="code">Name</span> property, you can use the
extended tree view's item indexer to retrieve the nodes.  This will return the named node regardless of whether
it is a root node or a child nested at any level within the tree.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">// Set the named node's text
tvGroups["Folder2Book3Page5"].Text = "New Text Value";</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">// Set the named node's text
tvGroups("Folder2Book3Page5").Text = "New Text Value";</code></pre></div></div><p>If the tree view's <span class="code">CheckBoxes</span> property is set to true, the
<span class="code">CheckedNodes</span> property can be used to obtain a collection that contains the actual nodes
in the tree that have a check state of <span class="code">Checked</span> or <span class="code">Mixed</span>.  This
collection has some helper methods that you will find useful.</p><table class="table is-hoverable"><thead><tr><th><p>Method</p></th><th><p>Description</p></th></tr></thead><tr><td><p><span class="code">CheckStateOf</span></p></td><td><p>This method can be used to get the check state of the node in the collection.</p></td></tr><tr><td><p><span class="code">ContainsName</span></p></td><td><p>This method can be used to determine whether or not the collection contains a node with the
specified name.</p></td></tr><tr><td><p><span class="code">ToNameString</span></p></td><td><p>This method returns the checked nodes' names in a comma-separated list.</p></td></tr><tr><td><p><span class="code">ToTextValueString</span></p></td><td><p>This method returns the checked nodes' text values in a comma-separated list.</p></td></tr></table><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">CheckedNodesCollection checkedNodes = tvGroups.CheckedNodes;

// Display the check state of each checked node
for(int idx = 0; idx &lt; checkedNodes.Count; idx++)
    Debug.WriteLine(checkedNodes.CheckStateOf(idx));

// See if the collection contains a node named "Folder1Book2Page5"
Debug.WriteLine(checkedNodes.Contains("Folder1Book2Page5"));

// Get the checked node names into a string ready to store in a database field
string groupNames = checkedNodes.ToNameString();

// Show the node text values in a message box
MessageBox.Show("You chose: " + checkedNodes.ToTextValueString());</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">Dim idx As Integer
Dim checkedNodes As CheckedNodesCollection = tvGroups.CheckedNodes

' Display the check state of each checked node
For idx = 0 To checkedNodes.Count
    Debug.WriteLine(checkedNodes.CheckStateOf(idx))
Next idx

' See if the collection contains a node named "Folder1Book2Page5"
Debug.WriteLine(checkedNodes.Contains("Folder1Book2Page5"))

' Get the checked node names into a string ready to store in a database field
Dim groupNames As String = checkedNodes.ToNameString()

' Show the node text values in a message box
MessageBox.Show("You chose: " &amp; checkedNodes.ToTextValueString())</code></pre></div></div></div><h2 id="Enum" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Node Enumeration</h2><div id="IDEABSection"><p>One of the most useful features of the extended tree view is its support for node enumeration.
With a simple for/each loop, you can enumerate all nodes in the tree view including all child nodes to however
deep they are nested.  This saves you from having to write recursive functions to handle child node collections.</p><p>When enumerating the entire tree, enumeration starts at the first root node.  If it has children,
they are enumerated.  As each is enumerated, if they have children, they are enumerated as well.  This process
repeats until all nodes have been enumerated.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C# - Enumerate the entire tree</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">txtEnumResults.Text = null;

// Use foreach() on the ExtendedTreeView control itself to
// enumerate all of its nodes recursively.
foreach(TreeNode node in tvExtTree)
    txtEnumResults.AppendText($"{new String(' ', node.Level * 4)}{node.Text}\r\n");</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET - Enumerate the entire tree</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">Dim node As TreeNode
txtEnumResults.Text = Nothing

' Use For Each on the ExtendedTreeView control itself to enumerate all of its nodes recursively
For Each node in tvExtTree
    txtEnumResults.AppendText($"{New String(" "C, node.Level * 4)}{node.Text}" &amp; Environment.NewLine)
Next</code></pre></div></div><p>You can also use the <span class="code">TreeNodeEnumerator</span> directly to enumerate a single
branch of the tree and all of its children.  The option is also given to enumerate all subsequent sibling nodes
of the starting node if so desired.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C# - Enumerate starting at a selected node</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">bool enumerateSiblings = (sender == btnEnumNodeSibs);
TreeNode node, startNode = tvExtTree.SelectedNode;

if(startNode == null)
{
    txtEnumResults.Text = "Select a starting node first";
    return;
}

txtEnumResults.Text = null;

// For this, we create the enumerator manually and pass it
// the starting node and a flag indicating whether or not
// to enumerate the siblings of the starting node as well.
TreeNodeEnumerator enumerator = new TreeNodeEnumerator(startNode,
    enumerateSiblings);

// Call the MoveNext() method to move through each node.  Use the
// Current property to access the current node.
while(enumerator.MoveNext())
{
    node = enumerator.Current;

    txtEnumResults.AppendText($"Manual Enum: {new String(' ', node.Level * 4)}{node.Text}\r\n");
}

txtEnumResults.AppendText("\r\n\r\n");

// We can also use the helper method to simplify it
foreach(TreeNode tn in TreeNodeEnumerator.Enumerate(startNode, enumerateSiblings))
    txtEnumResults.AppendText($"Enum Helper: {new String(' ', tn.Level * 4)}{tn.Text}\r\n");</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">VB.NET - Enumerate starting at a selected node</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vbnet">Dim enumerateSiblings As Boolean = False
Dim node As TreeNode
Dim startNode As TreeNode = tvExtTree.SelectedNode

If sender Is btnEnumNodeSibs Then
    enumerateSiblings = True
End If

If startNode Is Nothing Then
    txtEnumResults.Text = "Select a starting node first"
    Return
End If

txtEnumResults.Text = Nothing

' For this, we create the enumerator manually and pass it the starting
' node and a flag indicating whether or not to enumerate the siblings
' of the starting node as well.
Dim enumerator As New TreeNodeEnumerator(startNode, enumerateSiblings)

' Call the MoveNext() method to move through each node.  Use the Current
' property to access the current node.
Do While enumerator.MoveNext()
    node = enumerator.Current

    txtEnumResults.AppendText($"Manual Enum: {New String(" "C, node.Level * 4)}{node.Text}" &amp;
        Environment.NewLine)
Loop

txtEnumResults.AppendText(Environment.NewLine &amp; Environment.NewLine)

' We can also use the helper method to simplify it
For Each node In TreeNodeEnumerator.Enumerate(startNode, enumerateSiblings)
    txtEnumResults.AppendText($"Enum Helper: {New String(" "C, node.Level * 4)}{node.Text}" &amp;
        Environment.NewLine)
Next</code></pre></div></div></div><h2 id="CustomDraw" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Customizing the Tree View's Appearance</h2><div id="IDFABSection"><p>The following additional properties allow you to customize the tree view's appearance without
having to handle the drawing events.</p><table class="table is-hoverable"><thead><tr><th><p>Property</p></th><th><p>Description</p></th></tr></thead><tr><td><p><span class="code">DrawDefaultImages</span></p></td><td><p>This property is used to set or get whether or not the tree view will draw default images for
tree nodes without images.  If not drawn, the node text is drawn flush left with no gap.  The default setting is
true to match the standard tree view control.</p></td></tr><tr><td><p><span class="code">ExpandoImageList</span></p></td><td><p>This property is used to set or get the expando image list used to show the +/- images when
the <span class="code">ShowPlusMinus</span> property is set to true.  See the property help for information on how
to set up the image list.</p></td></tr><tr><td><p><span class="code">UseThemedImages</span></p></td><td><p>This is used to set or get whether or not to use the themed versions of the expando and
checkbox images even when themes are not being used.  The default is false and the images are based on the
system's current visual style setting.</p></td></tr></table><p>To further customize the tree view's appearance you can handle the
<a href="43230e78-b6cf-b13f-1eb4-4f105766a2fb.htm">TreeNodeDrawing</a> and/or
<a href="4582d353-dac5-898f-2305-51cc1ba50e44.htm">TreeNodeDrawn</a>
events.  Each event receives a <a href="cf9fb0c5-95a1-857b-561f-1edb09d1b8b3.htm">DrawTreeNodeExtendedEventArgs</a>
instance that contains drawing state information for the node.  The <span class="code">TreeNodeDrawing</span>
event occurs prior to the node being drawn.  In your event handler, you can choose to alter the various
properties of the event arguments object and let the tree view draw the node based on your changes or you can
choose to draw the node yourself and suppress the default drawing of one or more parts of the node.  The
<span class="code">TreeNodeDrawn</span> event occurs after the node has been fully drawn and allows you to
customize its appearance after all other drawing has taken place.</p><p>See the <a href="cf9fb0c5-95a1-857b-561f-1edb09d1b8b3.htm">DrawTreeNodeExtendedEventArgs</a>
property help topics for information on what each of them does.  The demo application supplied with the library
contains a simple example of handling each event.</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="ce5cb77a-44a9-4629-aec3-6a8435cd8e53.htm">Control Tutorials</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">General Information</a></li><li><a class="quickLink">Clearing The Tree Node Collection</a></li><li><a class="quickLink">ExtendedTreeView Usage</a></li><li><a class="quickLink">Node Enumeration</a></li><li><a class="quickLink">Customizing the Tree View's Appearance</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://github.com/EWSoftware/ListControls" target="_blank" rel="noopener noreferrer">[v2023.4.9.0] Copyright © 2005-2023, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ListControls%20Library%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="ListControls"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
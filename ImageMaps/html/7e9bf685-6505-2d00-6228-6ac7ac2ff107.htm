<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>DrawImageEventArgs.ImageOffset Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="ImageOffset property" /><meta name="System.Keywords" content="DrawImageEventArgs.ImageOffset property" /><meta name="Microsoft.Help.F1" content="EWSoftware.ImageMaps.Windows.Forms.DrawImageEventArgs.ImageOffset" /><meta name="Microsoft.Help.F1" content="EWSoftware.ImageMaps.Windows.Forms.DrawImageEventArgs.get_ImageOffset" /><meta name="Microsoft.Help.Id" content="P:EWSoftware.ImageMaps.Windows.Forms.DrawImageEventArgs.ImageOffset" /><meta name="Description" content="This read-only property is used to get the image offset" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="EWSoftware.ImageMaps.Windows.Forms" /><meta name="file" content="7e9bf685-6505-2d00-6228-6ac7ac2ff107" /><meta name="guid" content="7e9bf685-6505-2d00-6228-6ac7ac2ff107" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">EWSoftware.ImageMaps Control Library Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="7e07e290-7738-4d8b-bcf1-8eb4b33706b0.htm" title="EWSoftware.ImageMaps Control Library Documentation" tocid="roottoc">EWSoftware.ImageMaps Control Library Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/7d8d2542-efea-a176-4474-f45d37979548.htm" title="EWSoftware.ImageMaps.Windows.Forms" tocid="7d8d2542-efea-a176-4474-f45d37979548">EWSoftware.ImageMaps.Windows.Forms</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/f245cc3b-4ef3-62cf-596f-e70bd4a7336a.htm" title="DrawImageEventArgs Class" tocid="f245cc3b-4ef3-62cf-596f-e70bd4a7336a">DrawImageEventArgs Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/afffdf6f-540a-67e5-3e4b-ecfd0b2f712b.htm" title="DrawImageEventArgs Properties" tocid="afffdf6f-540a-67e5-3e4b-ecfd0b2f712b">DrawImageEventArgs Properties</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dc34a804-9233-193e-f2e2-f1d444142df3.htm" title="DrawFocus Property " tocid="dc34a804-9233-193e-f2e2-f1d444142df3">DrawFocus Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1d50c6e2-bcc8-b7a0-5f5d-ed6df9be930a.htm" title="DrawState Property " tocid="1d50c6e2-bcc8-b7a0-5f5d-ed6df9be930a">DrawState Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="940d9562-65d2-db48-ce2e-ccd6d064ef22.htm" title="Graphics Property " tocid="940d9562-65d2-db48-ce2e-ccd6d064ef22">Graphics Property </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="7e9bf685-6505-2d00-6228-6ac7ac2ff107.htm" title="ImageOffset Property " tocid="7e9bf685-6505-2d00-6228-6ac7ac2ff107">ImageOffset Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="titleColumn"><h1>DrawImageEventArgs<span id="LST55F779C8_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST55F779C8_0?cpp=::|nu=.");</script>ImageOffset Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            This read-only property is used to get the image offset
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="7d8d2542-efea-a176-4474-f45d37979548.htm">EWSoftware.ImageMaps.Windows.Forms</a><br />
    <strong>Assembly:</strong>
   EWSoftware.ImageMaps.Windows.Forms (in EWSoftware.ImageMaps.Windows.Forms.dll) Version: 2015.1.19.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">Point</span> <span class="identifier">ImageOffset</span> { <span class="keyword">get</span>; }</pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">ReadOnly</span> <span class="keyword">Property</span> <span class="identifier">ImageOffset</span> <span class="keyword">As</span> <span class="identifier">Point</span>
	<span class="keyword">Get</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span>:
<span class="keyword">property</span> <span class="identifier">Point</span> <span class="identifier">ImageOffset</span> {
	<span class="identifier">Point</span> <span class="keyword">get</span> ();
}</pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">member</span> <span class="identifier">ImageOffset</span> : <span class="identifier">Point</span> <span class="keyword">with</span> <span class="keyword">get</span>
</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="http://msdn2.microsoft.com/en-us/library/bk9hwzbw" target="_blank">Point</a><br />If the image map is scrolled or centered, this represent the offset to use in order to
            position drawn items correctly on the image map.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID2RBSection" class="collapsibleSection">
This is an example of an owner drawn image area event handler.  For some other examples, see the demo
application.  As shown, the image area event properties are not accessible in the designer so you must write
code to connect the event handlers.  For example, add the code in the form's constructor after the call to
<span class="code">InitializeComponent</span>.

<div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDAABA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAABA','cs','1','4');return false;">C#</a></div><div id="ID0EDAABA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDAABA','vb','2','4');return false;">VB</a></div><div id="ID0EDAABA_tab3" class="codeSnippetContainerTabPhantom"><a href="#" onclick="javascript:ChangeTab('ID0EDAABA','cpp','3','4');return false;">C++</a></div><div id="ID0EDAABA_tab4" class="codeSnippetContainerTabPhantom"><a href="#" onclick="javascript:ChangeTab('ID0EDAABA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EDAABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> ImageMapEventsForm()
{
    InitializeComponent();

    <span class="highlight-comment">// Hook up the event handlers.  Since they are not accessible in the</span>
    <span class="highlight-comment">// designer, we must do it manually.</span>
    ImageAreaBase a = (ImageAreaBase)imMap.Areas[<span class="highlight-number">4</span>];
    a.DrawImage += Button_DrawImage;

    a = (ImageAreaBase)imMap.Areas[<span class="highlight-number">5</span>];
    a.DrawImage += Button_DrawImage;

    a = (ImageAreaBase)imMap.Areas[<span class="highlight-number">6</span>];
    a.DrawImage += Button_DrawImage;

    .
    .
    .
}


<span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Draw the "button" image areas</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-comment">/// &lt;param name="sender"&gt;The sender of the event (the image area)&lt;/param&gt;</span>
<span class="highlight-comment">/// &lt;param name="e"&gt;The event arguments&lt;/param&gt;</span>
<span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> Button_DrawImage(<span class="highlight-keyword">object</span> sender, DrawImageEventArgs e)
{
    ImageAttributes ia;
    Graphics g = e.Graphics;

    <span class="highlight-comment">// All are ellipse image areas</span>
    ImageAreaEllipse a = (ImageAreaEllipse)sender;
    Rectangle r = a.Ellipse;

    <span class="highlight-comment">// Offset the area rectangle by the draw event offset</span>
    r.Offset(e.ImageOffset.X, e.ImageOffset.Y);

    <span class="highlight-keyword">if</span>(!a.Enabled)
        ia = iaDisabled;
    <span class="highlight-keyword">else</span>
        ia = iaNormal;

    <span class="highlight-keyword">using</span>(TextureBrush tb = <span class="highlight-keyword">new</span> TextureBrush(imgFiller,
      <span class="highlight-keyword">new</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, imgFiller.Width, imgFiller.Height), ia))
    {
        tb.WrapMode = WrapMode.Tile;

        <span class="highlight-comment">// Translate the brush coordinates to account for the offset</span>
        <span class="highlight-keyword">using</span>(Matrix m = <span class="highlight-keyword">new</span> Matrix())
        {
            m.Translate((<span class="highlight-keyword">float</span>)r.X, (<span class="highlight-keyword">float</span>)r.Y);
            tb.Transform = m;

            <span class="highlight-comment">// If the area is focused or hot lighted, give it a glow effect</span>
            <span class="highlight-keyword">if</span>(e.DrawState == DrawState.Focus || e.DrawState == DrawState.HotLight)
            {
                <span class="highlight-keyword">using</span>(GraphicsPath pth = <span class="highlight-keyword">new</span> GraphicsPath())
                {
                    pth.AddEllipse(r);

                    <span class="highlight-keyword">using</span>(PathGradientBrush pgb = <span class="highlight-keyword">new</span> PathGradientBrush(pth))
                    {
                        pgb.CenterColor = Color.LightSteelBlue;

                        <span class="highlight-keyword">if</span>(e.DrawState == DrawState.Focus)
                            pgb.SurroundColors = <span class="highlight-keyword">new</span> Color[] { Color.Yellow };
                        <span class="highlight-keyword">else</span>
                            pgb.SurroundColors = <span class="highlight-keyword">new</span> Color[] { Color.Blue };

                        pgb.FocusScales = <span class="highlight-keyword">new</span> PointF(<span class="highlight-number">0.8</span>f, <span class="highlight-number">0.8</span>f);

                        g.FillEllipse(pgb, r);
                    }
                }
            }

            <span class="highlight-comment">// Draw the filler</span>
            g.FillEllipse(tb, r);
            g.DrawString((<span class="highlight-keyword">string</span>)a.Tag, buttonFont, Brushes.Black, r, sfFormat);
        }
    }
}</pre></div><div id="ID0EDAABA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="highlight-keyword">Public</span> <span class="highlight-keyword">Sub</span> <span class="highlight-keyword">New</span>()
    <span class="highlight-keyword">MyBase</span>.<span class="highlight-keyword">New</span>()

    InitializeComponent()

    <span class="highlight-comment">' Hook up the event handlers.  Since they are not accessible in the</span>
    <span class="highlight-comment">' designer, we must do it manually.</span>
    <span class="highlight-keyword">Dim</span> a <span class="highlight-keyword">As</span> ImageAreaBase = <span class="highlight-keyword">DirectCast</span>(imMap.Areas(<span class="highlight-number">4</span>), ImageAreaBase)

    <span class="highlight-keyword">AddHandler</span> a.DrawImage, <span class="highlight-keyword">AddressOf</span> Button_DrawImage

    a = <span class="highlight-keyword">DirectCast</span>(imMap.Areas(<span class="highlight-number">5</span>), ImageAreaBase)
    <span class="highlight-keyword">AddHandler</span> a.DrawImage, <span class="highlight-keyword">AddressOf</span> Button_DrawImage

    a = <span class="highlight-keyword">DirectCast</span>(imMap.Areas(<span class="highlight-number">6</span>), ImageAreaBase)
    <span class="highlight-keyword">AddHandler</span> a.DrawImage, <span class="highlight-keyword">AddressOf</span> Button_DrawImage
    .
    .
    .

<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span>


<span class="highlight-comment">''' &lt;summary&gt;</span>
<span class="highlight-comment">''' Draw the "button" image areas</span>
<span class="highlight-comment">''' &lt;/summary&gt;</span>
<span class="highlight-comment">''' &lt;param name="sender"&gt;The sender of the event (the image area)&lt;/param&gt;</span>
<span class="highlight-comment">''' &lt;param name="e"&gt;The event arguments&lt;/param&gt;</span>
<span class="highlight-keyword">Private</span> <span class="highlight-keyword">Sub</span> Button_DrawImage(sender <span class="highlight-keyword">As</span> <span class="highlight-keyword">Object</span>, e <span class="highlight-keyword">As</span> DrawImageEventArgs)
    <span class="highlight-keyword">Dim</span> ia <span class="highlight-keyword">As</span> ImageAttributes
    <span class="highlight-keyword">Dim</span> g <span class="highlight-keyword">As</span> Graphics = e.Graphics

    <span class="highlight-comment">' All are ellipse image areas</span>
    <span class="highlight-keyword">Dim</span> a <span class="highlight-keyword">As</span> ImageAreaEllipse = <span class="highlight-keyword">DirectCast</span>(sender, ImageAreaEllipse)
    <span class="highlight-keyword">Dim</span> r <span class="highlight-keyword">As</span> Rectangle = a.Ellipse

    <span class="highlight-comment">' Offset the area rectangle by the draw event offset</span>
    r.Offset(e.ImageOffset.X, e.ImageOffset.Y)

    <span class="highlight-keyword">If</span> <span class="highlight-keyword">Not</span> a.Enabled <span class="highlight-keyword">Then</span>
        ia = iaDisabled
    <span class="highlight-keyword">Else</span>
        ia = iaNormal
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

    <span class="highlight-keyword">Using</span> tb <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> TextureBrush(imgFiller, _
      <span class="highlight-keyword">New</span> Rectangle(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, imgFiller.Width, imgFiller.Height), ia)
        tb.WrapMode = WrapMode.Tile

        <span class="highlight-comment">' Translate the brush coordinates to account for the offset</span>
        <span class="highlight-keyword">Using</span> m <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> Matrix()
            m.Translate(<span class="highlight-keyword">CType</span>(r.X, <span class="highlight-keyword">Single</span>), <span class="highlight-keyword">CType</span>(r.Y, <span class="highlight-keyword">Single</span>))
            tb.Transform = m

            <span class="highlight-comment">' If the area is focused or hot lighted, give it a glow effect</span>
            <span class="highlight-keyword">If</span> e.DrawState = DrawState.Focus <span class="highlight-keyword">Or</span> e.DrawState = DrawState.HotLight <span class="highlight-keyword">Then</span>
                <span class="highlight-keyword">Using</span> pth <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> GraphicsPath()
                    pth.AddEllipse(r)

                    <span class="highlight-keyword">Using</span> pgb <span class="highlight-keyword">As</span> <span class="highlight-keyword">New</span> PathGradientBrush(pth)
                        pgb.CenterColor = Color.LightSteelBlue

                        <span class="highlight-keyword">If</span> e.DrawState = DrawState.Focus <span class="highlight-keyword">Then</span>
                            pgb.SurroundColors = <span class="highlight-keyword">New</span> Color() { Color.Yellow }
                        <span class="highlight-keyword">Else</span>
                            pgb.SurroundColors = <span class="highlight-keyword">New</span> Color() { Color.Blue }
                        <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

                        pgb.FocusScales = <span class="highlight-keyword">New</span> PointF(<span class="highlight-number">0.8</span>!, <span class="highlight-number">0.8</span>!)

                        g.FillEllipse(pgb, r)
                    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
                <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
            <span class="highlight-keyword">End</span> <span class="highlight-keyword">If</span>

            <span class="highlight-comment">' Draw the filler</span>
            g.FillEllipse(tb, r)
            g.DrawString(<span class="highlight-keyword">DirectCast</span>(a.Tag, <span class="highlight-keyword">String</span>), buttonFont, Brushes.Black, _
                <span class="highlight-keyword">New</span> RectangleF(<span class="highlight-keyword">CType</span>(r.X, <span class="highlight-keyword">Single</span>), <span class="highlight-keyword">CType</span>(r.Y, <span class="highlight-keyword">Single</span>), _
                <span class="highlight-keyword">CType</span>(r.Width, <span class="highlight-keyword">Single</span>), <span class="highlight-keyword">CType</span>(r.Height, <span class="highlight-keyword">Single</span>)), sfFormat)
        <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
    <span class="highlight-keyword">End</span> <span class="highlight-keyword">Using</span>
<span class="highlight-keyword">End</span> <span class="highlight-keyword">Sub</span></pre></div><div id="ID0EDAABA_code_Div3" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div><div id="ID0EDAABA_code_Div4" class="codeSnippetContainerCode" style="display: none"><p>No code example is currently available or this language may not be supported.</p></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="f245cc3b-4ef3-62cf-596f-e70bd4a7336a.htm">DrawImageEventArgs Class</a></div><div class="seeAlsoStyle"><a href="7d8d2542-efea-a176-4474-f45d37979548.htm">EWSoftware.ImageMaps.Windows.Forms Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><p><a href="https://github.com/EWSoftware/ImageMaps" target="_blank">[v2015.1.19.0] Copyright © 2004-2015, Eric Woodruff, All Rights Reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=EWSoftware.ImageMaps Control Library Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="ros"></div></body></html>
<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Defining Solution/Project Spell Check Classifiers</title><meta name="Title" content="Defining Solution/Project Spell Check Classifiers" /><meta name="Help.Id" content="0ff35371-69b5-48dd-a062-037abe2469de" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="0ff35371-69b5-48dd-a062-037abe2469de" /><meta name="Description" content="Unlike spell check as you type and the active document spell checking tool window, the solution/project spell checking tool window must classify the content of each and every file for itself to determine what parts need to be spell checked." /><meta name="tocFile" content="../toc/Root.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div id="DocumentationTitle" class="level-item">Visual Studio Spell Checker Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Defining Solution/Project Spell Check Classifiers</h1><div><p>Unlike spell check as you type and the active document spell checking tool window, the
solution/project spell checking tool window must classify the content of each and every file for itself to
determine what parts need to be spell checked.  To facilitate this process, a configuration file is used to
define a well-known set of filename extensions and map them to an appropriate classifier definition.</p><p>In the event that an unrecognized filename extension is encountered, the spell checking process looks
at the content and tries to determine whether or not it is well-formed XML.  If it is, it parses the content as
XML.  If not, it treats the file's content as plain text.</p><ul class="is-hidden-tablet"><li><a href="#DefaultDefinitions">Classifier Types</a></li><li><a href="#ConfigurationFiles">Classification Configuration Files</a><ul><li><a href="#Classifications">Classifications</a></li><li><a href="#Classifiers">Classifiers</a></li><li><a href="#Classifier">Classifier</a></li><li><a href="#Match">Match</a></li><li><a href="#Extensions">Extensions</a></li><li><a href="#Extension">Extension</a></li></ul></li><li><a href="#CustomConfig">Defining Your Own Classifier Configurations</a></li></ul></div><h2 id="DefaultDefinitions" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classifier Types</h2><div id="IDBABSection"><p>There are seven different types of classifier:</p><ul><li><p><span class="code">PlainTextClassifier</span> - This is the simplest of the classifiers.  It
just returns all of the file's content as a single block to be broken up into words for spell checking.</p></li><li><p><span class="code">XmlClassifier</span> - This classifier is used to parse XML files and spell
check them based on the active configuration settings.  For example, it skips the inner text of unwanted XML
elements and spell checks the values of attributes that have been specified as needing spell checking.  This
classifier can only be used on well-formed XML content.</p></li><li><p><span class="code">ResourceFileClassifier</span> - This is a variant of the XML classifier used
for resource files (<em>.resx</em>).  This classifier will automatically ignore certain non-words
common to the default comments in resource files which describe the elements within it.  It also automatically
ignores <span class="code">data</span> and <span class="code">metadata</span> elements with a
<span class="code">type</span> attribute with any value or a <span class="code">mimetype</span> attribute with
"base64" in its value.  These typically do not contain a value that should be spell checked.  A common example is
base 64 encoded image data.  This prevents a number of unwanted issues being reported.</p></li><li><p><span class="code">ReportingServicesClassifier</span> - This is a variant of the XML classifier
used for Reporting Services report files (<em>.rdl</em> and <em>.rdlc</em>).  This
classifier will automatically ignore various elements that should not be spell checked, will limit the content
that is spell check in <span class="code">Code</span> elements to comments and string literals, and will limit the
content that is spell checked in expressions to literal strings.  This prevents a number of unwanted issues being
reported.</p></li><li><p><span class="code">HtmlClassifier</span> - This classifier is used to parse HTML files and works
in a manner similar to the XML classifier.  Unlike the XML classifier, this one can handle ill-formed content
common to many HTML file types.</p></li><li><p><span class="code">MarkdownClassifier</span> - This classifier is identical to the HTML
classifier but it is used on markdown files and excludes spans that look like inline or fenced code blocks.  This
helps reduce the number of false misspelling reports that can result in such spans.</p></li><li><p><span class="code">CodeClassifier</span> - This classifier is geared toward parsing code.  It
uses a series of regular expressions to identify file content that looks like code comments and literal strings.
Once done, it takes additional steps to further classify different string literal types (i.e. verbatim and
interpolated) as well as parsing XML documentation comment elements to remove sections that should not be
spell checked and include attribute values that should.  Expressions can be added to classify text as undefined.
Such undefined spans are removed from other classified spans to reduce the number of false misspelling reports
from the removed spans.</p></li><li><p><span class="code">ScriptWithHtmlClassifier</span> - This classifier is similar to the
<span class="code">CodeClassifier</span> described above but is specific to JavaScript and TypeScript files that
contain embedded HTML elements.  It will parse the code and also the HTML elements to include the wanted HTML
element parts such as inner text and exclude the unwanted HTML elements parts such as ignored attribute values.</p></li><li><p><span class="code">RegexClassifier</span> - This is a general classifier that uses a series of
regular expressions to classify file content as code comments or string literals.  This is useful for non-code
files such as style sheets or SQL scripts that do not require the extra classification steps performed by the
<span class="code">CodeClassifier</span> described above.</p></li></ul></div><h2 id="ConfigurationFiles" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Classification Configuration Files</h2><div id="IDCABSection"><p>The package comes with a standard configuration file that contains the current set of classifier
definitions and recognized file types.  By creating your own <em>Classifications.config</em> file in
the spell checker's application data configuration folder (see below), you can add additional classifier
definitions, override existing ones, and/or add additional recognized file types and map them to a classifier.
The following sections describe the various elements found in the configuration file.  For an example, see the
package's <a href="https://github.com/EWSoftware/VSSpellChecker/blob/master/Source/VSSpellChecker/Classifications.config" target="_blank" rel="noopener noreferrer" title="Classifications.config">standard configuration file</a>.  This is also where you can see which file extensions are currently recognized and to which
classifier they are being mapped.</p><h4 id="Classifications" class="quickLinkHeader">Classifications</h4><p>This is the root element.  All other elements are nested within this one.</p><h4 id="Classifiers" class="quickLinkHeader">Classifiers</h4><p>This element contains the classifier definitions.  It consists of a set of
<span class="code">Classifier</span> elements that define the ID, type, and configuration for each one.</p><h4 id="Classifier" class="quickLinkHeader">Classifier</h4><p>This element defines a classifier.  The <span class="code">Id</span> element uniquely identifies
the classifier.  Typically, it will be set to a language name or content type.  The <span class="code">Type</span>
attribute is used to indicate which type of classifier it will use.  The value should be set to one of the
classifier types described in the first section.  If the classifier has configurable elements, they will be
nested within this element.</p><p>The <span class="code">XmlDocCommentDelimiter</span> attribute can be used to define the XML
documentation comment delimiter which can vary by language.  For example, the C-style classifier defines it as
<span class="code">///</span> while the VB-style classifier defines it as <span class="code">'''</span>.  In a
similar manner, the <span class="code">QuadSlashDelimiter</span> attribute can be used to define the quad-slash
delimiter and the <span class="code">OldStyleDocCommentDelimiter</span> attribute can be used to define the
delimiter for the older style of XML comments.  Currently, these two options are only used by the C# classifier
to exclude quad-slash commented code and to determine old-style XML commented code if so indicated in the C#
configuration options.</p><p>The <span class="code">Mnemonic</span> attribute can be added to define the mnemonic character
for user interface label text that indicates a hot key.  Only the ampersand and underscore are recognized as
valid mnemonic characters.  If not specified, it defaults to the ampersand character.  This is used when the
Ignore Mnemonics option is enabled in the General Settings configuration category.</p><h4 id="Match" class="quickLinkHeader">Match</h4><p>This is a configuration element used by several of the classifiers to define a regular
expression that will be used to find content and classify it accordingly.  The <span class="code">Expression</span>
attribute is used to define the regular expression.  The <span class="code">Options</span> attribute is used to
define one or more regular expression options that should be used with the expression.  Specify a comma-separated
list of <a href="https://learn.microsoft.com/dotnet/api/system.text.regularexpressions.regexoptions" target="_blank" rel="noopener noreferrer">RegexOptions</a>
values as needed.  If omitted, no options will be defined for the expression.  The <span class="code">Classification</span>
attribute defines how the matched text is to be classified.  Below are the most common classifications:</p><ul><li><p><span class="code">DelimitedComments</span> - Delimited comments in code such as
<span class="code">/* Comments */</span>.</p></li><li><p><span class="code">SingleLineComment</span> - A single line comment such as
<span class="code">// Comment</span>.</p></li><li><p><span class="code">NormalStringLiteral</span> - A normal string literal such as
<span class="code">"A text string"</span>.</p></li><li><p><span class="code">RegionDirective</span> - A region directive such as
<span class="code">#region Private data members</span>.</p></li><li><p><span class="code">Undefined</span> - Some classifiers use this to mark spans of text that
should be removed from other classifications to reduce false misspelling reports from unwanted text.</p></li></ul><p>There are several other classifications not typically used within the configuration files.
These are used mostly by the classifiers themselves after parsing the file to further classify a range of text.
For example, the code classifier will change the <span class="code">NormalStringLiteral</span> classification to
<span class="code">VerbatimStringLiteral</span> or <span class="code">InterpolatedStringLiteral</span> based on
whether or not it has the appropriate prefix character before the opening quote.  The code classifier will also
reclassify <span class="code">SingleLineComment</span> and <span class="code">DelimitedComments</span> if necessary
to handle XML documentation and quad-slash comment types when necessary.  Typically, these subtypes will not
appear within the classifier configurations.  The <span class="code">RangeClassification</span> enumerated type
in the source code contains all of the currently defined range classifications used by the spell checker.</p><h4 id="Extensions" class="quickLinkHeader">Extensions</h4><p>This element contains the file type definitions that map file extensions to the classifiers.
It consists of a set of <span class="code">Extension</span> elements that define the extension and classifier for
each one.  As noted above, any extension not represented is tried first as XML and, if not XML, then as plain
text.</p><h4 id="Extension" class="quickLinkHeader">Extension</h4><p>This maps a specific file extension to a classifier definition.  The <span class="code">Value</span>
attribute defines the extension without the leading period.  The <span class="code">Classifier</span> attribute
defines the ID of the classifier to use for this file type.  It should match the <span class="code">Id</span>
attribute value of a <span class="code">Classifier</span> element defined earlier in the configuration file or one
from the standard configuration file.</p><p>An exception is the <span class="code">None</span> classifier ID.  This is technically not a
classifier.  It is a simple means of excluding certain file types from being spell checked.  For example, the
<em>aff</em> and <em>dic</em> file extensions are mapped to this classifier to prevent
dictionary files from being spell checked.  This is a convenient way of excluding a class of files from being
spell checked in the solution/project spell checking process without having to exclude them explicitly in the
global configuration or within each solution or project's configuration.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>Extensions for binary file types do not need to be specifically excluded using the
<span class="code">None</span> classifier.  Binary files are automatically excluded from being spell checked prior
to reaching the point of determining the classifier type.</p></div></article></div><h2 id="CustomConfig" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Defining Your Own Classifier Configurations</h2><div id="IDDABSection"><p>To define additional file extension mappings or to define your own classifiers for new file types,
create a file in the <em>%LOCALAPPDATA%\EWSoftware\Visual Studio Spell Checker</em> folder
called <em>Classifications.config</em>.  In it, add the necessary sections as described above.  If
all you need to do is map file extensions to classifiers, just add an <span class="code">Extensions</span> section
and define the mappings.  You can reuse the existing classifier IDs if you find one that will suit your needs.</p><p>Redefining a classifier or an extension with an ID that appears in the standard configuration file
will effectively replace its definition with yours.  This is a convenient way to try out changes or fixes to the
existing classifier expressions should you find an issue with them.</p><article class="message is-warning"><div class="message-header"><p><span class="icon"><i class="fa fa-warning"></i></span>  Important</p></div><div class="message-body"><p>Any changes made to the classifications configuration file will not take effect until Visual
Studio is restarted.</p></div></article><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Example Custom Configuration Files</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-XML">&lt;Classifications&gt;
  &lt;!-- A simple example that maps new file types to existing classifier definitions --&gt;
  &lt;Extensions&gt;
    &lt;Extension Value="myext" Classifier="XML" /&gt;
    &lt;Extension Value="xyz" Classifier="HTML" /&gt;

    &lt;!-- Never spell check "xxx" files as part of the project --&gt;
    &lt;Extension Value="xxx" Classifier="None" /&gt;
  &lt;/Extensions&gt;
&lt;/Classifications&gt;</code></pre></div></div><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle"> </span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-XML">&lt;Classifications&gt;
  &lt;!-- An example of defining a new classifier type --&gt;
  &lt;Classifiers&gt;
    &lt;Classifier Id="SomeLanguage" Type="RegexClassifier"&gt;
      &lt;Match Expression="\s*#.*?[\r\n]{1,2}" Classification="SingleLineComment" /&gt;
      &lt;Match Expression="(&amp;quot;&amp;quot;)|(@&amp;quot;(.|[\r\n])*?&amp;quot;|&amp;quot;(.|\\&amp;quot;|\\\r\n)*?((\\\\)+&amp;quot;|[^\\]{1}&amp;quot;))"
        Classification="NormalStringLiteral" /&gt;
    &lt;/Classifier&gt;
  &lt;/Classifiers&gt;

  &lt;Extensions&gt;
    &lt;Extension Value="abc" Classifier="SomeLanguage" /&gt;
  &lt;/Extensions&gt;
&lt;/Classifications&gt;</code></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="fa790577-88c0-4141-b8f4-d8b70f625cfd.htm">Solution/Project Spell Check Tool Window</a></div><div><a href="df2a45c1-1996-46f6-9d33-e73f0fa1d88a.htm">Add Spell Checking for Third Party Content Types</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Classifier Types</a></li><li><a class="quickLink">Classification Configuration Files</a><ul class="menu"><li><a class="quickLink">Classifications</a></li><li><a class="quickLink">Classifiers</a></li><li><a class="quickLink">Classifier</a></li><li><a class="quickLink">Match</a></li><li><a class="quickLink">Extensions</a></li><li><a class="quickLink">Extension</a></li></ul></li><li><a class="quickLink">Defining Your Own Classifier Configurations</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://GitHub.com/EWSoftware/VSSpellChecker" target="_blank" rel="noopener noreferrer">Copyright © 2013-2025, Eric Woodruff, All rights reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Visual%20Studio%20Spell%20Checker%20Documentation">Eric@EWoodruff.us</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div id="AdContent" class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="VSSpellChecker"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
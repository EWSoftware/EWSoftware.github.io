<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Creating a BuildAssembler Build Component</title><meta name="Title" content="Creating a BuildAssembler Build Component" /><meta name="Help.Id" content="e6d18448-2459-46f1-bbdc-a7db415f2bda" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="e6d18448-2459-46f1-bbdc-a7db415f2bda" /><meta name="Description" content="The first step is to determine what items will appear in the build component configuration. The configuration is stored as an XML fragment in the help file builder project file. The root node is always component." /><meta name="tocFile" content="../toc/IDP.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/EWSoftware/SHFB"><img alt="Sandcastle Help File Builder" style="height: 69px;" src="../icons/Sandcastle.jpg" /></a></div><div id="DocumentationTitle" class="level-item">Sandcastle Help File Builder Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Creating a BuildAssembler Build Component</h1><div><p>This topic will walk you through the creation of a build component project.</p><ul class="is-hidden-tablet"><li><a href="#DefineConfig">Defining the Build Component Configuration</a></li><li><a href="#CreateProject">Creating the Project</a></li><li><a href="#Metadata">The Export Attribute Metadata</a><ul><li><a href="#MetadataId">Id</a></li><li><a href="#MetadataVersion">Version</a></li><li><a href="#MetadataCopyright">Copyright</a></li><li><a href="#MetadataDescription">Description</a></li><li><a href="#MetadataIsVisible">IsVisible</a></li></ul></li><li><a href="#FactoryClass">The Factory Class</a><ul><li><a href="#Constructor">Constructor</a></li><li><a href="#Dependencies">Dependencies</a></li><li><a href="#DefaultConfig">DefaultConfiguration</a></li><li><a href="#Create">Create</a></li></ul></li><li><a href="#Template">The Build Component Template Class</a><ul><li><a href="#Initialize">Initialize</a></li><li><a href="#Apply">Apply</a></li><li><a href="#WriteMessage">WriteMessage</a></li><li><a href="#OnComponentEvent">OnComponentEvent</a></li></ul></li></ul></div><h2 id="DefineConfig" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Defining the Build Component Configuration</h2><div id="IDBBBSection"><p>The first step is to determine what items will appear in the build component configuration.  The
configuration is stored as an XML fragment in the help file builder project file.  The root node is always
<span class="code">component</span>.  Define your own elements to contain the build component configuration that
will be nested within the root element.  It is possible that a build component will have no configurable
elements.  In that case, there is nothing to add to the default configuration.  Below is an example of a
configuration that is passed to a build component.</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">Example Build Component Configuration</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-xml">&lt;component id="Copy From Index Component"&gt;
  &lt;index name="reflection" value="/reflection/apis/api" key="@id" cache="15"&gt;
    &lt;data base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml"
      duplicateWarning="false" /&gt;
    &lt;data files="reflection.xml" /&gt;
  &lt;/index&gt;
  &lt;copy name="reflection" source="*" target="/document/reference" /&gt;
&lt;/component&gt;</code></pre></div></div></div><h2 id="CreateProject" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Creating the Project</h2><div id="IDCBBSection"><p>This section describes how to create and configure the build component project.  It will describe
the process for a C# project but the steps should be fairly similar for a VB.NET project with a few differences
in the configuration option titles.</p><h3 class="quickLinkHeader">Create the Build Component Project</h3><div><ol><li><p>In Visual Studio, select the <strong>New Project</strong> option.  In the <strong>New Project</strong>
dialog box, select the C# or VB.NET language, and then select the <strong>Documentation</strong> subcategory.  Select
the <strong>BuildAssembler Build Component</strong> template, give it a name and click <strong>OK</strong> to create it.
Once it has been created, right click on the project and select <strong>Properties</strong>.</p></li><li><p>In the <strong>Application</strong> tab, set the assembly name and default namespace as you see fit.</p></li><li><p>In the <strong>Package</strong> tab, set the NuGet package properties.</p></li><li><p>By default, the Debug project properties are set to use the standalone GUI for debugging
which will help you see if the component can be located, that the configuration form is working if you
created one for the component, and that it is working within the build as expected.  See the
<a href="d7b0528c-c75a-477b-9445-db6d2c55dbcb.htm">Debugging Components and Plug-Ins</a> for some special requirements when debugging
components and plug-ins.</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Tip</p></div><div class="message-body"><p>Using the standalone GUI as the host is easier than using Visual Studio as the package
locks the assemblies once the help file builder project has loaded them for use and you will not be able to
rebuild them.  Shutting down the standalone GUI frees the assemblies so that you can rebuild them and start a
new debugging session.</p><p>In the help file builder project that you use to test your build component, set the
project's <span class="code">Component Path</span> property to the folder containing your build component's
assembly.  If you have opened the project's <strong>Components</strong> property page before setting the component path,
you may need to close and reopen the project in order for it to discover your build component assembly.</p></div></article></li><li><p>Optionally, select the <strong>Signing</strong> tab and check the "Sign the assembly" checkbox.
Select "&lt;New...&gt;" from the "Choose a strong name key file" dropdown, enter a filename, and click OK to
create the key file.  You can protect the key file with a password if you like or uncheck the option to create
one without a password.</p></li></ol></div><p>You are now ready to edit the build component class itself.  See the comments in the template class
for information on how to get started.  Some general information is given below.  Note that multiple build
components can reside within the same assembly.  Add new class files to the project and implement the necessary
methods as described below and as shown in the template class.</p><p>The build component is derived from the
<span class="code">Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentCore</span> class and consists of a
few methods that you must implement along with a nested Managed Extensibility Framework (MEF) factory class that
describes the component, creates instances, and allows interaction with the design tools and build engine.
These are described below.  Review the code for "<span class="code">TODO:</span>" comments to find sections that
need attention such as setting the build component's ID, the configuration file insertion points, the default
configuration, etc.  If you followed the steps in the <strong>Creating the Project</strong> section, you
can run the project and debug it by setting breakpoints in the build component's code.  As noted above, set the
test project's <span class="code">Component Path</span> property to the folder containing the build component
assembly first.  If necessary, close and reopen the test project so that it can discover the build component.</p></div><h2 id="Metadata" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Export Attribute Metadata</h2><div id="IDDBBSection"><p>The nested factory class is a MEF component.  The <span class="code">BuildComponentExportAttribute</span>
is used to define the necessary metadata that enables the help file builder to load and use the component.</p><h4 id="MetadataId" class="quickLinkHeader">Id</h4><p>The <span class="code">Id</span> parameter is required and is used to uniquely identify the
build component.</p><h4 id="MetadataVersion" class="quickLinkHeader">Version</h4><p>The <span class="code">Version</span> property is optional and allows you to define the build
component version displayed in the help file builder property page when the build component is selected.</p><h4 id="MetadataCopyright" class="quickLinkHeader">Copyright</h4><p>The <span class="code">Copyright</span> property is optional and allows you to define the
build component copyright displayed in the help file builder property page when the build component is selected.</p><h4 id="MetadataDescription" class="quickLinkHeader">Description</h4><p>The <span class="code">Description</span> property is optional and allows you to define the
build component description displayed in the help file builder property page when the build component is
selected.</p><h4 id="MetadataIsVisible" class="quickLinkHeader">IsVisible</h4><p>The <span class="code">IsVisible</span> property is optional and allows you to define
whether or not the build component should be visible in the help file builder's property page.  The default if
omitted is false and the build component will not show up in the list of build components that can be added to
the project.  It will only be included in a project if referenced as a dependency in another build component.</p></div><h2 id="FactoryClass" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Factory Class</h2><div id="IDEBBSection"><p>The factory class is derived from
<span class="code">Sandcastle.Core.BuildAssembler.BuildComponent.BuildComponentFactory</span> and contains the
following properties and methods.</p><h4 id="Constructor" class="quickLinkHeader">Constructor</h4><p>In the constructor, set the <span class="code">ReferenceBuildPlacement</span> and
<span class="code">ConceptualBuildPlacement</span> properties which describe how to place the component in the
<strong>BuildAssembler</strong> configuration file.  Each uses a <span class="code">ComponentPlacement</span>
instance to describe how they component should be inserted.  Placement is defined using a required placement
action value, a required component ID, and an optional component instance value.  If a component is not usable
in either a reference or conceptual build, the corresponding property can be omitted.</p><ul><li><p>The <span class="code">PlacementAction</span> parameter defines where to insert the
configuration relative to the indicated component ID where relevant.  It can have one of the following values:
								</p><ul><li><p><span class="code">Start</span> - The configuration is inserted at the start of the
configuration file ahead of all others.  If multiple build components use this option they are all inserted at
the start in no particular order.  The component ID is ignored with this option.</p></li><li><p><span class="code">End</span> - The configuration is inserted at the end of the
configuration file after all others.  If multiple build components use this option they are all inserted at the
end in no particular order.  The component ID is ignored with this option.</p></li><li><p><span class="code">Before</span> - The configuration is inserted before the component
indicated by the required ID and optional instance parameters.</p></li><li><p><span class="code">After</span> - The configuration is inserted after the component
indicated by the required ID and optional instance parameters.</p></li><li><p><span class="code">Replace</span> - The configuration for the custom component replaces
an existing component indicated by the required ID and optional instance parameters.</p></li></ul><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Note</p></div><div class="message-body"><p>If a component already exists in the configuration file with a matching ID attribute it
is assumed to be the same component in the correct location and is automatically replaced with the custom
configuration.</p></div></article></li><li><p>The ID parameter can be used to identify another component in the configuration file by ID.</p></li><li><p>The instance parameter can be used to identify a specific instance of a build component in
the configuration file.  For example, the <span class="code">Copy From Index</span> component appears multiple
times in the standard configuration file.  If you need to merge a custom build component before or after one of
these occurrences or replace one, you can use this attribute to specify which one.  If omitted, the first
instance is assumed.</p></li></ul><h4 id="Dependencies" class="quickLinkHeader">Dependencies</h4><p>Override this property to specify an enumerable list of component IDs on which the current
component depends.  If the indicated components do not exist in the project settings or in the configuration
file template already, they will be added automatically with their default configuration at build time.  This
property does not need to be overridden if there are no dependencies.  Dependent configurations are merged prior
to project settings.  As such, it is not required that a dependent component appear in the project as well.  If
it does, the project settings will override the default configuration.</p><h4 id="DefaultConfig" class="quickLinkHeader">DefaultConfiguration</h4><p>Override this property to specify the default configuration for a custom build component.  This
information is used when the component is added as a dependency and when the component is added to the project
and the user does not modify it.  You can use the various replacement tags as attribute values.  These will be
replaced at build time with the appropriate project values.  The default if not overridden is an empty string.</p><h4 id="Create" class="quickLinkHeader">Create</h4><p>This method must be implemented to create an instance of the build component.  Simply create
the component instance and return it.</p></div><h2 id="Template" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>The Build Component Template Class</h2><div id="IDFBBSection"><p>In its simplest form, the only two methods you need to implement are the <span class="code">Initialize</span>
and <span class="code">Apply</span> methods.  A few supporting properties and methods in the base class are also
available for use.</p><h4 id="Initialize" class="quickLinkHeader">Initialize</h4><p>This method is implemented to initialize the component.  It is passed an XML navigator that
contains the configuration information.</p><h4 id="Apply" class="quickLinkHeader">Apply</h4><p>This method is implemented to apply the component's changes to the document.  It is passed
an XML document containing the current document and a key that identifies it (the API member in reference builds
or the topic ID in conceptual builds.</p><h4 id="WriteMessage" class="quickLinkHeader">WriteMessage</h4><p>This method is used to output a message from the component.  The message level parameter
indicates the severity of the message.  If <span class="code">Error</span> is used, it will stop the build.
An overload is supplied to which you can pass the key.  This can help associate a message with a particular
topic or member ID to make the problem easier to find and fix.</p><h4 id="OnComponentEvent" class="quickLinkHeader">OnComponentEvent</h4><p>This method is used to invoke the <span class="code">ComponentEvent</span> event on the
<span class="code">BuildAssembler</span> instance.  This is a way to communicate information between components.
To use it, the receiving component attaches an event handler to the <span class="code">BuildAssembler.ComponentEvent</span>
event.  The sending component invokes this method and passes an event argument instance containing any data
relevant to the event.  It is up to the receiving event handler to cast the event argument parameter to a
particular type that it is interested in to see if it should handle the event.</p></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="c8258d52-6664-4e96-86cd-6f75a854a69c.htm">Creating Custom Components</a></div><div><a href="8dcbb69b-7a1a-4049-8e6b-2bf344efbbc9.htm">BuildAssembler Components</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Defining the Build Component Configuration</a></li><li><a class="quickLink">Creating the Project</a></li><li><a class="quickLink">Create the Build Component Project</a></li><li><a class="quickLink">The Export Attribute Metadata</a><ul class="menu"><li><a class="quickLink">Id</a></li><li><a class="quickLink">Version</a></li><li><a class="quickLink">Copyright</a></li><li><a class="quickLink">Description</a></li><li><a class="quickLink">IsVisible</a></li></ul></li><li><a class="quickLink">The Factory Class</a><ul class="menu"><li><a class="quickLink">Constructor</a></li><li><a class="quickLink">Dependencies</a></li><li><a class="quickLink">DefaultConfiguration</a></li><li><a class="quickLink">Create</a></li></ul></li><li><a class="quickLink">The Build Component Template Class</a><ul class="menu"><li><a class="quickLink">Initialize</a></li><li><a class="quickLink">Apply</a></li><li><a class="quickLink">WriteMessage</a></li><li><a class="quickLink">OnComponentEvent</a></li></ul></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div id="FooterContent" class="column"><p><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">[v2024.12.15.0] Copyright © 2006-2024, Eric Woodruff, All rights reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle%20Help%20File%20Builder%20Documentation">Eric Woodruff</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div id="AdContent" class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="SHFB"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><link rel="stylesheet" href="../css/vs.min.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/highlight.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Component Migration Support</title><meta name="Title" content="Component Migration Support" /><meta name="Help.Id" content="bc933f8f-e792-45bf-afec-62aa2c46aa3b" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="bc933f8f-e792-45bf-afec-62aa2c46aa3b" /><meta name="Description" content="This topic provides information on migrating build components, plug-ins, presentation styles, and syntax generators built against v2021.4.9.0 and earlier to the latest release that supports .NET Core and deploying the components as NuGet packages." /><meta name="tocFile" content="../toc/ID2.xml" /></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/EWSoftware/SHFB"><img alt="Sandcastle Help File Builder" style="height: 69px;" src="../icons/Sandcastle.jpg" /></a></div><div id="DocumentationTitle" class="level-item">Sandcastle Help File Builder Documentation</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div id="ContentContainer" class="columns pl-5 pr-5 fixedContent"><div id="ShowHideTOCColumn" class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="Resizer" class="is-hidden"></div><div id="TopicContent" class="column content is-7"><h1>Component Migration Support</h1><div><p>This topic provides information on migrating build components, plug-ins, presentation styles, and
syntax generators built against v2021.4.9.0 and earlier to the latest release that supports .NET Core and
deploying the components as NuGet packages.  Presentation styles also underwent a complete rewrite in
version 2022.8.14.0.  However, you may be able to replace your presentation style with simpler build components or
plug-ins rather than reimplementing an entire presentation style.</p><ul class="is-hidden-tablet"><li><a href="#QuickUpdate">Quick Updates for MSBuild Support Only</a></li><li><a href="#RecreateProjects">Support for MSBuild and .NET Core Builds</a></li><li><a href="#BuildComponents">Migrating Build Component Projects</a></li><li><a href="#PlugIns">Migrating Help File Builder Plug-In Projects</a></li><li><a href="#PresentationStyles">Migrating Presentation Style Projects</a></li><li><a href="#SyntaxGenerators">Migrating Syntax Generator Projects</a></li></ul></div><h2 id="QuickUpdate" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Quick Updates for MSBuild Support Only</h2><div id="IDCABSection"><p>Some quick updates can be made to get an existing component working with the new release without
having to recreate the project with the restriction that they will only work with MSBuild.  For .NET Core builds,
the projects will need to be recreated as described in the sections below.  Make the following changes as needed
based on the project type:</p><ul><li><p>Remove any references to <em>Sandcastle.Core</em> and
<em>SandcastleBuilder.Utils</em> and replace them with NuGet package references to
<em>EWSoftware.Sandcastle.Core</em> and/or <em>EWSoftware.SandcastleBuilder.Utils</em> as
needed.  Use the latest release available for each.  Note that the version may not match the latest release of
the help file builder as the package version for these only changes when there are breaking changes to the API.</p></li><li><p>For presentation styles, refer to the section below for additional changes that are required
due to change in the API.</p></li><li><p>Remove the <span class="code">IsConfigurable</span> property from the build component and
plug-in export attributes.</p></li><li><p>If configurable, remove the <span class="code">ConfigureComponent</span> method from build
components and the <span class="code">ConfigurePlugIn</span> method from plug-ins.  Save the code though as you
will need to move it to the configuration forms when you add a new MEF editor factory class below.</p></li><li><p>For plug-ins, change the type on the <span class="code">Initialize</span> method's
<em>configuration</em> parameter from <span class="code">XPathNavigator</span>
to <span class="code">XElement</span>.  It will be necessary to rework the initialization code to work with the
new parameter type.</p></li><li><p>For configurable build components and plug-ins, add an editor factory class to the
configuration editor form similar to the following examples.  The first is for a plug-in, the second is for a
build component.</p><article class="message is-warning"><div class="message-header"><p><span class="icon"><i class="fa fa-warning"></i></span>  Important</p></div><div class="message-body"><p>It is essential that the ID specified in the export attribute matches the ID on the component
or plug-in's export attribute exactly.  This is how the IDEs will match the editor component to the related
build component or plug-in.</p><p>Also note that the <span class="code">EditConfiguration</span> methods now return true if the
configuration was edited or false if it was not rather than the new configuration.  If changes are made to the
configuration, they should be made directly to the passed in XML element.</p></div></article><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs">using SandcastleBuilder.Utils;
using SandcastleBuilder.Utils.BuildComponent;

#region Plug-in configuration editor factory for MEF
//=====================================================================

/// &lt;summary&gt;
/// This allows editing of the plug-in configuration
/// &lt;/summary&gt;
[PlugInConfigurationEditorExport("TODO: Put your plug-in ID here")]
public sealed class PlugInEditorFactory : IPlugInConfigurationEditor
{
    /// &lt;inheritdoc /&gt;
    public bool EditConfiguration(SandcastleProject project, XElement configuration)
    {
        // TODO: Add code to invoke the editor dialog.
        //using (var dlg = new WindowsFormsExampleConfigDlg(configuration))
        //{
        //    return dlg.ShowDialog() == DialogResult.OK;
        //}
    }
}
#endregion

#region Build component configuration editor factory for MEF
//=====================================================================

/// &lt;summary&gt;
/// This allows editing of the build component configuration
/// &lt;/summary&gt;
[ConfigurationEditorExport("TODO: Put your build component ID here")]
public sealed class BuildComponentEditorFactory : IConfigurationEditor
{
    /// &lt;inheritdoc /&gt;
    public bool EditConfiguration(XElement configuration, CompositionContainer container)
    {
        // TODO: Add code to invoke the editor dialog.
        //using (var dlg = new WindowsFormsExampleConfigDlg(configuration))
        //{
        //    return dlg.ShowDialog() == DialogResult.OK;
        //}
    }
}
#endregion</code></pre></div></div></li></ul></div><h2 id="RecreateProjects" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Support for MSBuild and .NET Core Builds</h2><div id="IDDABSection"><p>Starting with version v2023.7.8.0, all component projects use an SDK format
project and contain the necessary properties to generate a NuGet package when built.  This allows them to be
shared publicly on NuGet.org or privately with a local repository.  So that they are platform independent and
work with both MSBuild and the dotnet tool, the projects target .NET Standard 2.0.  Support for configuration has
also been separated from the component assemblies.  If your component supports configuration within the IDE,
create a new project to host the configuration forms.</p><p>It is recommended that you create a new project and import your existing code into the new project
rather than modifying the old project file.  That way, all of the necessary NuGet properties and the build
property file are present and ready to update.  The following sections provide more information on
changes that need to be made to the various component project types.</p><article class="message is-warning"><div class="message-header"><p><span class="icon"><i class="fa fa-warning"></i></span>  Important</p></div><div class="message-body"><p>If, after creating a project, you rename the assembly created by the project, be sure to rename
the project's <em>.props</em> file found in the <em>.\build</em> folder to match the new
assembly name.  This is required so that the build properties can be found when added to a help file builder
project using NuGet.</p></div></article></div><h2 id="BuildComponents" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Migrating Build Component Projects</h2><div id="IDEABSection"><ul><li><p>Create a new project and edit the properties on the project file's Package properties page that
are used to generate the NuGet package for the component.</p></li><li><p>Import your component's code into the new project to replace the example component.  Some of
the attribute values in the <em>AssemblyInfo.cs</em> file can be put in the project's package
properties instead (title, description, company).</p></li><li><p>In the MEF component factory class, remove the <span class="code">IsConfigurable</span> property
from the attribute metadata.</p></li><li><p>If the component is configurable, remove the <span class="code">ConfigureComponent</span>
method.  To support configuration, you will need to create a new project using the <strong>Build Component/Plug-In
Configuration Editor</strong> template project.  See the <a href="9ec616aa-59df-4c5c-a128-e540e6bb479c.htm">Creating a Configuration UI Project</a>
topic for more information.</p></li></ul></div><h2 id="PlugIns" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Migrating Help File Builder Plug-In Projects</h2><div id="IDFABSection"><ul><li><p>Create a new project and edit the properties on the project file's Package properties page that
are used to generate the NuGet package for the plug-in.</p></li><li><p>Import your plug-in's code into the new project to replace the example plug-in.  Some of
the attribute values in the <em>AssemblyInfo.cs</em> file can be put in the project's package
properties instead (title, description, company).</p></li><li><p>In the MEF component factory class, remove the <span class="code">IsConfigurable</span> property
from the attribute metadata.</p></li><li><p>If the component is configurable, remove the <span class="code">ConfigureComponent</span>
method.  To support configuration, you will need to create a new project using the <strong>Build Component/Plug-In
Configuration Editor</strong> template project.  See the <a href="9ec616aa-59df-4c5c-a128-e540e6bb479c.htm">Creating a Configuration UI Project</a>
topic for more information.</p></li><li><p>In the plug-in's <span class="code">Initialize</span> method, change the type on the
<em>configuration</em> parameter from <span class="code">XPathNavigator</span>
to <span class="code">XElement</span>.  It will be necessary to rework the initialization code to work with the
new parameter type.</p></li></ul></div><h2 id="PresentationStyles" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Migrating Presentation Style Projects</h2><div id="IDGABSection"><p>Starting with version 2022.8.14.0, presentation styles are implemented using a code-based API rather than
XSL transformations.  This makes them much easier to extend and modify compared to prior releases.  If you
created your own presentation style in the past to make adjustments to how the topics were rendered or to add or
remove handling for certain sections or elements, it is entirely likely that you will not need to create a whole
new presentation style going forward.  Instead, you should be able to implement just those parts that you need to
modify using standard help file builder plug-ins to adjust how the topics are rendered with selected presentation
style regardless of which one is selected.  See the <a href="baf1dcbc-e9cf-4d71-a770-621e6eaf10a7.htm">Creating a Presentation Style Component</a>
for more information.</p><p>A new project template and more information on creating a presentation style using the new API will
be provided in a future release.</p></div><h2 id="SyntaxGenerators" class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Migrating Syntax Generator Projects</h2><div id="IDHABSection"><ul><li><p>Create a new project and edit the properties on the project file's Package properties page that
are used to generate the NuGet package for the syntax generator.</p></li><li><p>Import your syntax generator's code and other supporting files into the new project to
replace the example syntax generator.  Some of the attribute values in the <em>AssemblyInfo.cs</em>
file can be put in the project's package properties instead (title, description, company).</p><p>Note that the syntax generator's <span class="code">IsConfigurable</span> property is still
supported and should be left alone if set as it is used by the syntax component's configuration dialog rather
than a configuration form defined within this project.</p></li></ul></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="078cc1c7-7995-431e-bf9c-8813becbe8df.htm">Version History</a></div></div></div><div id="InThisArticleColumn" class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">Quick Updates for MSBuild Support Only</a></li><li><a class="quickLink">Support for MSBuild and .NET Core Builds</a></li><li><a class="quickLink">Migrating Build Component Projects</a></li><li><a class="quickLink">Migrating Help File Builder Plug-In Projects</a></li><li><a class="quickLink">Migrating Presentation Style Projects</a></li><li><a class="quickLink">Migrating Syntax Generator Projects</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">[v2023.7.8.0] Copyright © 2006-2023, Eric Woodruff, All rights reserved</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle%20Help%20File%20Builder%20Documentation">Eric Woodruff</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="SHFB"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script></body></html>
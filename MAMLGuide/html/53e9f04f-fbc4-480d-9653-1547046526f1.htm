<!DOCTYPE html ><html lang="en-US"><head><meta charset="utf-8" /><meta name="viewport" content="width=device-width, initial-scale=1" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" href="../css/bulma.css" /><link rel="stylesheet" href="../css/font-awesome.min.css" /><link rel="stylesheet" href="../css/presentationStyle.css" /><script src="../scripts/jquery-3.5.1.min.js"></script><script src="../scripts/clipboard.min.js"></script><script src="../scripts/presentationStyle.js"></script><title>Schema Extensibility</title><meta name="Help.Id" content="53e9f04f-fbc4-480d-9653-1547046526f1" /><meta name="Help.ContentType" content="Concepts" /><meta name="guid" content="53e9f04f-fbc4-480d-9653-1547046526f1" /><meta name="Description" content="This topic will explain how you can change the MAML schema so that you can use elements from other namespaces as well." /><meta name="tocFile" content="../toc/RootTOC.xml" /><link type="text/css" rel="stylesheet" href="../css/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script></head><body><div class="fixedLayout"><div id="Header" class="fixedHeader"><div class="pageHeader level mb-0 py-2 px-4"><div id="TitleContainer" class="level-left"><div class="level-item"><a target="_blank" rel="noopener noreferrer" href="https://github.com/EWSoftware/SHFB"><img alt="Sandcastle MAML Guide" style="height: 50px;" src="../icons/Sandcastle.jpg" /></a></div><div id="DocumentationTitle" class="level-item">Sandcastle MAML Guide</div></div><div id="LangFilterSearchContainer" class="level-right"><div class="level-item"><div class="dropdown is-hoverable"><div class="dropdown-trigger"><button class="button" aria-haspopup="true" aria-controls="dropdown-menu"><span id="CurrentLanguage"></span><span class="icon is-small"><i class="fa fa-angle-down" aria-hidden="true"></i></span></button></div><div class="dropdown-menu" role="menu"><div id="LanguageSelections" class="dropdown-content"><a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a><a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a><a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a><a class="dropdown-item languageFilterItem" data-languageId="fs">F#</a></div></div></div></div><div class="level-item"><form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;"><div class="field"><div class="control has-icons-left"><input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" /><span class="icon is-small is-left"><i class="fa fa-search"></i></span><button id="SearchButton" type="submit" class="is-hidden"></button></div></div></form></div></div></div></div><div class="fixedContent"><div id="HeaderPrelimContainer" class="level my-1 px-2"><div id="HeaderTextContainer" class="level-left"><div class="level-item"><span class="has-text-grey-light">SHFB Default 2022 Style - Coming Soon</span></div></div></div><nav class="breadcrumb my-1 px-2 border-bottom" role="navigation"><ul id="TopicBreadcrumbs" /></nav><div class="columns pl-5 pr-5 fixedContent"><div class="column is-hidden-tablet"><a id="ShowHideTOC">Show/Hide TOC</a></div><div id="TOCColumn" class="column is-hidden-mobile"><nav class="toc"><ul id="TableOfContents" class="toc-menu" /></nav></div><div id="TopicContent" class="column content is-7"><h1>Schema Extensibility</h1><div><p>
				This topic will explain how you can change the MAML schema so that you can use elements from other
				namespaces as well. This is useful when extending Sandcastle with build components that provide new
				elements because it still allows you to validate your topic files.
			</p><article class="message is-info"><div class="message-header"><p><span class="icon"><i class="fa fa-info-circle"></i></span>  Tip</p></div><div class="message-body"><p>
					The Sandcastle version of the MAML schema files already contain the necessary changes.
				</p></div></article></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>XML Schema Extensibility</h2><div id="IDBABSection"><p>
					In general, XML schema provides the <span class="code">any</span> element
					for declaring extensibility points in your schema. The
					<span class="code">any</span> element has two attributes that control the
					extensibility contract.
				</p><p>
					The <span class="code">namespace</span> attribute allows you to either
					explicitly specify a closed set of namespaces that are allowed or to specify
					one of these pseudo-URIs:
				</p><dl><dt>##local</dt><dd><p>
							This allows only to use elements that do not reside in any namespace.
							This is not what we want to use because it forces build component
							authors to declare all elements in the empty namespace. This could
							easily lead to name clashes between different build components.
						</p></dd><dt>##targetNamespace</dt><dd><p>
							This only allows elements from the target namespace of the declaring
							schema. For our purposes this is useless because it would only allow
							elements from the MAML namespace
							(<em>http://ddue.schemas.microsoft.com/authoring/2003/5</em>).
						</p></dd><dt>##any</dt><dd><p>
							This allows any namespace, including the target namespace of the
							declaring schema. We do not want to use this because it would also
							allow to use any element from the MAML namespace
							(<em>http://ddue.schemas.microsoft.com/authoring/2003/5</em>)
							itself and hence undermine the schema validation for MAML.
						</p></dd><dt>##other</dt><dd><p>
							This allows any namespaces except the target namespace of the declaring
							schema. For our purposes this is ideal because it allows only to use
							elements from any namespace except the MAML namespace
							(<em>http://ddue.schemas.microsoft.com/authoring/2003/5</em>).
						</p></dd></dl><p>
					The <span class="code">processContents</span> attribute allows you to control
					the validation requirements. It can have one of following values:
				</p><dl><dt>skip</dt><dd><p>
							This is the least restrictive value. It specifies that the schema processor
							should not try to validate the contents of the new element, even if it is
							able to find a schema for it.
						</p></dd><dt>strict</dt><dd><p>
							This is the most restrictive setting. It requires the schema processor to
							always validate the contents of the new element. If it is not able to
							find such a schema an error is reported during validation.
						</p></dd><dt>lax</dt><dd><p>
							This is a compromise between the settings <span class="code">skip</span> and
							<span class="code">strict</span>. The schema processor will validate the schema
							if it is able to find a schema for the new element and will skip it if cannot
							find such a schema. For our purposes this is ideal because it allows build component
							authors to provide a schema for validation but does not force them to do so.
						</p></dd></dl><p>
					Therefore, our extensibility points will all look like this:
				</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">XML</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">any</span> <span class="highlight-xml-attribute-name">namespace</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"##other"</span> <span class="highlight-xml-attribute-name">processContents</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"lax"</span> <span class="highlight-xml-bracket">/&gt;</span></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Extending Inline Text</h2><div id="IDCABSection"><p>
					Build components might add elements that you can use inside a <span class="code">para</span>
					element. Examples for such elements are:
				</p><dl><dt>Linking</dt><dd><p>
							These are elements that allow you to link to other topics. MAML itself already provides several
							elements for this purpose, such as the <span class="code">link</span> element to link to conceptual
							topics, the <span class="code">codeEntityReference</span> element to link to managed code APIs, and
							the <span class="code">externalLink</span> element to link to some location in the internet.
						</p></dd><dt>Semantics</dt><dd><p>
							This category includes elements that are used to associate pieces of text with semantics.
							In many cases these semantics are made visible through a consistent formatting, such as italics
							or bold text. Amongst others MAML itself provides the <span class="code">localUri</span>
							element for marking text as representing local paths and the <span class="code">ui</span>
							element for marking text as representing elements in your user interface.
						</p></dd></dl><p>
					To extend the <span class="code">para</span> element we will extend the underlying type
					<span class="code">inlineType</span>.
				</p><p>
					Open the file <em>inline.xsd</em>, goto line 62, and add the <span class="code">any</span>
					element to the type:
				</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">XML</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">complexType</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"inlineType"</span> <span class="highlight-xml-attribute-name">mixed</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"true"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">annotation</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">documentation</span><span class="highlight-xml-bracket">&gt;</span>
      The inlineType complexType describes a simple inline-only
      content model. It provides both text and elements with
      similarly simple content models.
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">documentation</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">annotation</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">choice</span> <span class="highlight-xml-attribute-name">minOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0"</span> <span class="highlight-xml-attribute-name">maxOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"unbounded"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">group</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:inlineGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">element</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:sharedContent"</span><span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">element</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"conditionalSection"</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">complexType</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">sequence</span><span class="highlight-xml-bracket">&gt;</span>
          <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">element</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:conditions"</span><span class="highlight-xml-bracket">/&gt;</span>
          <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">element</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"conditionalContent"</span> <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:inlineType"</span><span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">sequence</span><span class="highlight-xml-bracket">&gt;</span>
      <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">complexType</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">element</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-comment">&lt;!-- PATCH HERE --&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">any</span> <span class="highlight-xml-attribute-name">namespace</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"##other"</span> <span class="highlight-xml-attribute-name">processContents</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"lax"</span> <span class="highlight-xml-bracket">/&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">choice</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">attributeGroup</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:contentIdentificationSharingAndConditionGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">complexType</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Extending Related Topics</h2><div id="IDDABSection"><p>
					For build components that provide elements for linking we also want to be able to use them inside the
					<span class="code">relatedTopics</span> element. To do this, we will extend the type
					<span class="code">relatedTopicsType</span>.
				</p><p>
					Open the file <em>hierarchy.xsd</em>, goto line 123 and add the <span class="code">any</span>
					element to the type:
				</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">XML</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">complexType</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"relatedTopicsType"</span> <span class="highlight-xml-attribute-name">mixed</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"false"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">choice</span> <span class="highlight-xml-attribute-name">minOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0"</span> <span class="highlight-xml-attribute-name">maxOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"unbounded"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">group</span>   <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:relatedTopicLinkGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-comment">&lt;!-- PATCH HERE --&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">any</span> <span class="highlight-xml-attribute-name">namespace</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"##other"</span> <span class="highlight-xml-attribute-name">processContents</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"lax"</span> <span class="highlight-xml-bracket">/&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">choice</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">attributeGroup</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:contentIdentificationSharingAndConditionGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">complexType</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>Extending Section Structure</h2><div id="IDEABSection"><p>
					Last but not least build components might also provide elements that allow you to build a structure.
					For this purpose MAML itself already provides the <span class="code">table</span>,
					<span class="code">code</span>, and <span class="code">para</span> elements.  To allow new structural
					elements we have to extend the type <span class="code">sectionContentType</span>.
				</p><p>
					Open the file <em>structure.xsd</em>, goto line 66 and add the <span class="code">any</span>
					element to the type:
				</p><div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">XML</span><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></div><div class="codePanel"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">complexType</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"sectionContentType"</span> <span class="highlight-xml-attribute-name">mixed</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"false"</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">choice</span> <span class="highlight-xml-attribute-name">minOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0"</span> <span class="highlight-xml-attribute-name">maxOccurs</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"unbounded"</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">group</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:structureGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">element</span> <span class="highlight-xml-attribute-name">name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"conditionalSection"</span> <span class="highlight-xml-attribute-name">type</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:conditionalSectionType"</span><span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-comment">&lt;!-- PATCH HERE --&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">any</span> <span class="highlight-xml-attribute-name">namespace</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"##other"</span> <span class="highlight-xml-attribute-name">processContents</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"lax"</span> <span class="highlight-xml-bracket">/&gt;</span>
  <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">choice</span><span class="highlight-xml-bracket">&gt;</span>
  <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">attributeGroup</span> <span class="highlight-xml-attribute-name">ref</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"maml:contentIdentificationSharingAndConditionGroup"</span><span class="highlight-xml-bracket">/&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">complexType</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><h2 class="quickLinkHeader"><span class="icon toggleSection" tabindex="0"><i class="fa fa-angle-down"></i></span>See Also</h2><div id="seeAlsoSection"><h4>Other Resources</h4><div><a href="746fc19e-2670-440b-8277-a1ef7dc074d5.htm">Visual Studio IntelliSense</a></div></div></div><div class="column is-hidden-mobile"><nav class="menu sticky is-hidden"><p class="menu-label"><strong>In This Article</strong></p><ul id="InThisArticleMenu" class="menu-list"><li><a class="quickLink">XML Schema Extensibility</a></li><li><a class="quickLink">Extending Inline Text</a></li><li><a class="quickLink">Extending Related Topics</a></li><li><a class="quickLink">Extending Section Structure</a></li><li><a class="quickLink">See Also</a></li></ul></nav></div></div></div><footer id="PageFooter" class="footer border-top py-3 fixedFooter"><div class="columns"><div class="column"><p><a href="https://GitHub.com/EWSoftware/SHFB" target="_blank" rel="noopener noreferrer">[v2022.4.16.0] Sandcastle MAML Guide</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:Eric%40EWoodruff.us?Subject=Sandcastle%20MAML%20Guide">Eric Woodruff</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script> 
				</div><div class="column"><script type="text/javascript">
    function _dmBootstrap(file) {
        var _dma = document.createElement('script');
        _dma.type = 'text/javascript';
        _dma.async = true;
        _dma.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + file;
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(_dma);
    }
    function _dmFollowup(file) { if (typeof DMAds === 'undefined') _dmBootstrap('cdn2.DeveloperMedia.com/a.min.js'); }
    (function () { _dmBootstrap('cdn1.DeveloperMedia.com/a.min.js'); setTimeout(_dmFollowup, 2000); })();
</script>
<div data-type="ad" data-publisher="ewsoftware.github.io" data-format="728x90" data-zone="MAMLGuide"></div>
 
				</div></div></footer></div><script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks()

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
});</script></body></html>